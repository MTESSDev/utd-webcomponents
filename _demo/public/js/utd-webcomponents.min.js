var utd = (function (exports) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }

    return _get.apply(this, arguments);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /*! Wrapper pour les customElements afin de supporter les attributs kebab case avec les customElements de svelte. 
      Référence : https://github.com/sveltejs/svelte/issues/3852
  */
  var customElements = {
    define: function define(tagName, CustomElement) {
      var CustomElementWrapper = /*#__PURE__*/function (_CustomElement) {
        _inherits(CustomElementWrapper, _CustomElement);

        var _super = _createSuper$f(CustomElementWrapper);

        function CustomElementWrapper() {
          _classCallCheck(this, CustomElementWrapper);

          return _super.apply(this, arguments);
        }

        _createClass(CustomElementWrapper, [{
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(attrName, oldValue, newValue) {
            _get(_getPrototypeOf(CustomElementWrapper.prototype), "attributeChangedCallback", this).call(this, attrName.replace(/-([a-z])/g, function (_, up) {
              return up.toUpperCase();
            }), oldValue, newValue === '' ? true : newValue // [Tweaked] Value of omitted value attribute will be true
            );
          }
        }], [{
          key: "observedAttributes",
          get: function get() {
            return (_get(_getPrototypeOf(CustomElementWrapper), "observedAttributes", this) || []).map(function (attr) {
              return attr.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
            });
          }
        }]);

        return CustomElementWrapper;
      }(CustomElement);

      window.customElements.define(tagName, CustomElementWrapper); // <--- Call the actual customElements.define with our wrapper
    }
  };

  /*! utd-webcomponents v1.7.7 */
  //TODO ajouter possibilité que utd reçoive les textes de langue requis. De quelle façon?
  //A- En paramètre des méthodes qui en ont besoin
  //B- Globalement via une initialisation de texte UTD qui serait faite une fois.
  //IMPORTANT! Laisser ce commentaire, une fois le build terminé, il sera remplacé par une condition permettant de ne pas réexécuter le script (afin d'éviter les erreurs de custom elements dejà définis qui se produisent parfois. On suppose rechargement d'un onglet ou autre.)

  /*!_VerifierSiDejaCharge_*/

  /*======================================================================================================================*/

  /* -10- FENÊTRES DE MESSAGE
  /*======================================================================================================================*/
  var message = function () {
    var elementsPublics = {};
    /**
     * Affiche une fenêtre de message (dialog).
     * @param {Object} parametres Paramètres.
     * @param {Object} parametres.type Type de message ("erreur", "information", "avertissement", "succes"  pour l'instant, autres types à venir). Défaut "avertissement".
     * @param {Object} parametres.titre Titre du message. Texte brut ou HTML (ex. Annuler les modifications) Défaut "". 
     * @param {Object} parametres.corps Corps du message. Texte brut ou HTML (ex. Désirez-vous annuler les modifications ou poursuivre?.) Défaut "".
     * @param {Object} parametres.texteBoutonPrimaire Texte du bouton primaire. (Celui le plus à droite). Si vide n'est pas affiché.
     * @param {Object} parametres.texteBoutonSecondaire Texte du bouton secondaire. (Situé à la gauche du bouton primaire). Si vide n'est pas affiché.
     * @param {Object} parametres.texteBoutonFermer Texte du bouton de fermeture du message. Défaut "Fermer" ou "Close en anglais".
     * @param {Object} parametres.afficherBoutonFermer Afficher le bouton pour fermer la fenêtre de message. Défaut true.
     * @param {Object} parametres.idControleFocusFermeture Id du contrôle auquel on redonne le focus à la fermeture de la fenêtre de message. Si non spécifié, focus redonné à l'élément actif avant l'affichage du message.
     * @returns {Object} Une promesse jQuery qui contiendra éventuellement un objet contenant la raison de fermeture. (ex. objet.primaire ou objet.secondaire)
     * @example afficherMessage(parametres)
                .done(function (resultat) {
                    if (resultat.primaire) {
                        alert("Très bon choix! Poursuivre aurait pu causer une rupture du continuum espace temps!");
                    } else if (resultat.secondaire) {
                        alert("Mauvais choix! Vous auriez-du poursuivre. À cause de vous le continuum espace temps risque de se briser!");
                    } else {
                        alert("Vous vous êtes contenté de fermer la fenêtre sans faire de choix... La prochaine fois assumez-vous! L'avenir du monde est entre vos mains!");
                    }
                });
    * @references https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/alertdialog.html
    * @notes Le titre et les boutons sont lus 2 fois dans NVDA... ça semble faire partie du pattern (voir lien ci-dessus). 
    */

    elementsPublics.afficher = function (parametres) {
      var valeursDefaut = {
        type: "",
        titre: "",
        corps: "",
        texteBoutonPrimaire: "",
        texteBoutonSecondaire: "",
        texteBoutonFermer: obtenirLanguePage() === 'fr' ? "Fermer" : "Close",
        afficherBoutonFermer: false,
        estBoutonsTexteLong: false,
        idControleFocusFermeture: null
      };
      parametres = extend(valeursDefaut, parametres);
      parametres.idControleFocusFermeture = parametres.idControleFocusFermeture || obtenirIdControleActif();
      var conteneurFenetreMessage = ajouterControle(parametres);
      var fenetreMessage = conteneurFenetreMessage.querySelector('utd-dialog');
      var boutons = conteneurFenetreMessage.querySelectorAll('[slot="pied"] > button');
      boutons.forEach(function (btn) {
        btn.addEventListener("click", function () {
          var raison = this.getAttribute('raison-fermeture');
          fenetreMessage.setAttribute('raison-fermeture', raison);
          fenetreMessage.setAttribute('afficher', 'false');
        });
      }); //Définir une promesse qui sera résolue à la fermeture de la fenêtre.

      return new Promise(function (resolve) {
        definirEvenementFermeture(fenetreMessage, resolve);
        fenetreMessage.setAttribute('afficher', 'true');
      });
    };
    /**
     * (Privée)
     * Ajoute le contrôle de fenêtre de message au DOM.
     * @param {Object} parametres Paramètres de la function afficherMessage.
     * @returns Object correspondant au conteneur de la fenêtre de message.
     */


    function ajouterControle(parametres) {
      //    var classeIcone = obtenirClasseIcone(parametres.type);
      var type = parametres.type ? " type=\"".concat(parametres.type, "\" ") : '';
      var html = "\n        <utd-dialog titre=\"".concat(parametres.titre, "\" id-focus-fermeture=\"").concat(parametres.idControleFocusFermeture, "\" estfenetremessage=\"true\" boutons-texte-long=\"").concat(parametres.estBoutonsTexteLong, "\" ").concat(type, ">\n            <div slot=\"contenu\">\n                ").concat(parametres.corps, "\n            </div>\n            <div slot=\"pied\">");
      var htmlBoutonPrimaire = "<button type=\"button\" class=\"utd-btn primaire compact\" raison-fermeture=\"primaire\" data-ga-action=\"".concat(parametres.titre, "\">").concat(parametres.texteBoutonPrimaire, "</button>");
      var htmlBoutonSecondaire = parametres.texteBoutonSecondaire ? "<button type=\"button\" class=\"utd-btn secondaire compact\" raison-fermeture=\"secondaire\" data-ga-action=\"".concat(parametres.titre, "\">").concat(parametres.texteBoutonSecondaire, "</button>") : '';
      html += "\n                ".concat(htmlBoutonSecondaire).concat(htmlBoutonPrimaire, "                        \n            </div>\n        </utd-dialog>");
      var id = genererId();
      var conteneurFenetreMessage = document.createElement('div');
      conteneurFenetreMessage.id = id;
      conteneurFenetreMessage.innerHTML = html;
      document.body.appendChild(conteneurFenetreMessage);
      return conteneurFenetreMessage;
    }
    /**
     * (Privéee)
     * Compléter la promesse indiquant de quelle façon la fenêtre s'est fermée et supprimer l'élément du DOM une fois qu'il n'est plus affiché.
     * @param {Object} fenetreMessage Objet correspondant à la fenêtre de message.
     * @param {Promise} resolve Résolution de promesse.
     */


    function definirEvenementFermeture(fenetreMessage, resolve) {
      fenetreMessage.addEventListener("fermeture", function (e) {
        resolve(e.detail.raisonFermeture); //setTimeout ici afin de s'assurer que svelte a terminé son traitement avant de retirer le compsant du DOM

        setTimeout(function () {
          fenetreMessage.parentElement.remove();
        });
      });
    }

    return elementsPublics;
  }();
  /*======================================================================================================================*/

  /* -11- DIALOGUE
  /*======================================================================================================================*/

  var dialogue = function () {
    var elementsPublics = {};
    /**
    * Affiche une fenêtre de dialogue modal.
    * @param {Object} parametres Paramètres.
    * @param {Object} parametres.idDialogue Id du contrôle utd-dialog à afficher.
    * @param {Object} parametres.idControleFocusFermeture Id du contrôle auquel on redonne le focus à la fermeture du dialogue. Si non spécifié, focus redonné à l'élément actif avant l'affichage du message.
    */

    elementsPublics.afficher = function (idDialogue, idControleFocusFermeture) {
      if (!idDialogue) {
        console.error('utd.dialogue.afficher -> Aucun id de dialogue spécifié.');
        return;
      }

      idControleFocusFermeture = idControleFocusFermeture || obtenirIdControleActif();
      var dialogue = document.getElementById(idDialogue);

      if (dialogue) {
        dialogue.setAttribute('afficher', 'true');

        if (idControleFocusFermeture) {
          dialogue.setAttribute('id-focus-fermeture', idControleFocusFermeture);
        }
      } else {
        console.error("utd.dialogue.afficher -> Contr\xF4le utd-dialog \"".concat(dialogue, "\" non trouv\xE9."));
      }
    };

    elementsPublics.masquer = function (idDialogue) {
      if (!idDialogue) {
        console.error('utd.dialogue.masquer -> Aucun id de dialogue spécifié.');
        return;
      }

      var dialogue = document.getElementById(idDialogue);

      if (dialogue) {
        dialogue.setAttribute('afficher', 'false');
        var idFocus = dialogue.getAttribute('id-focus-fermeture');

        if (idFocus) {
          var controleFocus = document.getElementById(idFocus);

          if (controleFocus) {
            controleFocus.focus();
          } else {
            console.log("utd.dialogue.masquer -> Contr\xF4le \"".concat(idFocus, "\" \xE0 qui redonner le focus non trouv\xE9."));
          }
        }
      } else {
        console.error("utd.dialogue.masquer -> Contr\xF4le utd-dialog \"".concat(dialogue, "\" non trouv\xE9."));
      }
    };

    return elementsPublics;
  }();
  /*======================================================================================================================*/

  /* -20- TRAITEMENT EN COURS
  /*======================================================================================================================*/

  var traitementEnCours = function () {
    var elementsPublics = {};

    elementsPublics.debuter = function (element, avecOverlay) {
      avecOverlay = avecOverlay !== undefined ? avecOverlay : true;

      if (element) {
        //Ajouter un overlay global pendant le traitement en cours s'il y a lieu (défaut oui)  
        if (avecOverlay) {
          var overlay = document.createElement("div"); //Si un overlay est déjà présent, on ajoute le nouveau mais on le masque (il sera peut-être éventuellement réaffiché dans le traitement terminer du traitement en cours)

          if (document.getElementsByClassName('utd-overlay').length > 0) {
            overlay.classList.add('utd-d-none');
          }

          overlay.classList.add('utd-overlay');
          document.body.appendChild(overlay);
        }

        element.setAttribute('overlay', avecOverlay ? 'true' : 'false');

        if (element.tagName.toLowerCase() === 'button' || element.tagName.toLowerCase() === 'input' && element.type.toLowerCase() === 'submit') {
          element.classList.add("utd-traitement-en-cours");
          var htmlTraitementEnCours = '<div class="utd-spinner"></div>';

          if (element.getElementsByClassName('utd-spinner').length === 0) {
            element.innerHTML += htmlTraitementEnCours;
          }

          element.disabled = true;
        }

        notifierTraitementEnCoursLecteurEcran(element);
      }
    };

    elementsPublics.terminer = function (element) {
      if (element) {
        var spinner = element.querySelector('.utd-spinner');

        if (spinner) {
          spinner.remove();
        }

        element.classList.remove("utd-traitement-en-cours");
        element.disabled = false;
        supprimerOverlay(element);
        element.removeAttribute('overlay');
        notifierTraitementEnCoursLecteurEcran(element, true);
      }
    };

    function supprimerOverlay(element) {
      //Si le traitement en cours sur l'élément avait un overlay on le retire.
      var avecOverlay = element.getAttribute('overlay');

      if (avecOverlay === 'true') {
        //Retrait du overlay 
        var overlayTraitementEnCours = document.getElementsByClassName('utd-overlay');

        if (overlayTraitementEnCours.length > 1) {
          //On enlève 1 overlay, si un masqué existe c'est lui qu'on enlève. S'il y en a d'autres ils seront fermés éventuellement.
          var overlayInvisibles = document.getElementsByClassName('utd-overlay utd-d-none');

          if (overlayInvisibles.length > 0) {
            overlayInvisibles[0].remove();
          } else {
            //Si aucun overlay invisible, on enlève le 1er trouvé.
            overlayTraitementEnCours[0].remove();
          }
        } else if (overlayTraitementEnCours.length === 1) {
          overlayTraitementEnCours[0].remove();
        }
      }
    }

    function notifierTraitementEnCoursLecteurEcran(element, estTraitementTermine) {
      //Générer un id à l'élément qui va contenir le spinner de traitement en cours
      if (!element.id) {
        element.id = genererId();
      }

      var idZoneNotification = "zoneNotification_".concat(element.id); //Ajouter la zone de notification hors écran si elle n'existe pas déjà.

      var zoneNotificationsLecteurEcran = document.getElementById(idZoneNotification);

      if (!zoneNotificationsLecteurEcran) {
        zoneNotificationsLecteurEcran = document.createElement("div");
        zoneNotificationsLecteurEcran.id = idZoneNotification;
        zoneNotificationsLecteurEcran.classList.add('utd-sr-only');
        document.body.appendChild(zoneNotificationsLecteurEcran);
      }

      var texte = "";

      if (estTraitementTermine) {
        texte = obtenirLanguePage() === 'fr' ? "Traitement terminé." : "Processing complete.";
      } else {
        texte = obtenirLanguePage() === 'fr' ? "Traitement en cours." : "Processing...";
      }

      zoneNotificationsLecteurEcran.innerHTML = texte;
    }

    return elementsPublics;
  }();
  /*======================================================================================================================*/

  /* -30- NOTIFICATIONS
  /*======================================================================================================================*/

  var notification = function () {
    var elementsPublics = {};
    /**
     * Affiche une notification (toast).
     * @param {Object} parametres Paramètres.
     * @param {Object} parametres.type Type de notification (positif, negatif ou neutre). Défaut "positif".
     * @param {Object} parametres.titre Titre de la notification (ex. Succès) Défaut "Succès" ou "Échec".
     * @param {Object} parametres.message Message de la notification (ex. Enregistrement effectué avec succès.) Défaut "".
     * @param {Object} parametres.texteBoutonFermer Texte du bouton de fermeture de la notification. Défaut "Fermer".
     * @param {Object} parametres.delaiFermeture Délai (en ms) de fermeture automatique de la notification. Défaut 5000.
     */

    elementsPublics.emettre = function (parametres) {
      var valeursDefaut = {
        type: "positif",
        titre: "",
        //parametres.type == "echec" ? "Échec" : "Succès",
        message: "",
        texteBoutonFermer: obtenirLanguePage() === 'fr' ? "Fermer" : "Close",
        delaiFermeture: 5000
      };
      parametres = extend(valeursDefaut, parametres);
      var zoneNotifications = obtenirZoneNotifications();
      var notification = ajouterNotification(zoneNotifications, parametres);
      retirerNotificationApresDelai(notification, parametres);
    };
    /**
     * Obtient la node correspondant à la zone de notifications utd.
     * @returns {object} La zone de notifications utd.
     */


    function obtenirZoneNotifications() {
      var zoneNotifications = document.getElementById('utdZoneNotifications');

      if (!zoneNotifications) {
        zoneNotifications = document.createElement('div');
        zoneNotifications.id = 'utdZoneNotifications';
        zoneNotifications.classList.add('utd-notifications');
        document.body.appendChild(zoneNotifications);
      }

      return zoneNotifications;
    }
    /**
     * (Privée)
     * Ajoute une notification dans la zone des notifications.
     * @param {Object} zoneNotifications Node correspondant à la zone de notifications.
     * @param {Object} parametres Paramètres de la méthode emettre (qui permet d'émettre une notification).
     * @returns {Object} Node correspondant à la notification ajoutée.
     */


    function ajouterNotification(zoneNotifications, parametres) {
      var notification = document.createElement('div');
      notification.classList.add("notification", parametres.type);
      var possedeTitre = !!parametres.titre;

      if (!possedeTitre) {
        notification.classList.add("sans-titre");
      }

      notification.innerHTML = obtenirHtmlNotification(parametres, possedeTitre);
      definirEvenementClick(notification);
      zoneNotifications.appendChild(notification);
      afficherNotification(notification);
      return notification;
    }
    /**
     * 
     * @param {Object} parametres Paramètres de la méthode emettre (qui permet d'émettre une notification).
     * @param {Boolean} possedeTitre Indique si la notification possède un titre ou non.
     * @returns 
     */


    function obtenirHtmlNotification(parametres, possedeTitre) {
      var html = "\n            <button type=\"button\">\n                <span class=\"utd-sr-only\">".concat(parametres.texteBoutonFermer, "</span>\n                <span class=\"utd-icone-svg x-fermer-blanc\" aria-hidden=\"true\"></span>\n            </button>\n            <div role=\"alert\">");

      if (possedeTitre) {
        var classeIcone = obtenirClasseIcone(parametres.type);
        html += "\n                <div class=\"titre\">\n                    <span class=\"utd-icone-svg ".concat(classeIcone, " md\" aria-hidden=\"true\"></span>\n                    <span class=\"texte\">").concat(parametres.titre, "&nbsp;</span>\n                </div>            \n            ");
      }

      html += "\n            <div class=\"texte-message\">\n                ".concat(parametres.message, "\n            </div></div>");
      return html;
    }
    /**
     * Obtient la classe de l'icône de titre.
     * @param {string} type Type de notification
     * @returns {string} Classe de l'icône de titre pour le type spécifié.
     */


    function obtenirClasseIcone(type) {
      switch (type) {
        case "negatif":
          return "erreur-blanc";

        case "neutre":
          return "information-blanc";

        default:
          return "succes-blanc";
      }
    }
    /**
     * Affiche la notification en effectuant un fade in.
     * @param {Object} notification Node notification à afficher.
     */


    function afficherNotification(notification) {
      setTimeout(function () {
        notification.classList.add('visible');
      }, 10);
    }
    /**
     * Retire la notification après le délai prévu.
     * @param {Object} notification Node correspondant à la notification à retirer.
     * @param {Object} parametres Paramètres de la méthode emettre (qui permet d'émettre une notification).
     */


    function retirerNotificationApresDelai(notification, parametres) {
      setTimeout(function () {
        retirerNotification(notification);
      }, parametres.delaiFermeture);
    }
    /**
     * Retire la notification du dom et en effectuant un fade out.
     * @param {Object} notification Node correspondant à la notification à retirer.
     */


    function retirerNotification(notification) {
      var dureeAnimationMs = 500;
      notification.classList.remove('visible');
      setTimeout(function () {
        notification.remove();
      }, dureeAnimationMs);
    }
    /**
     * (Privéee)
     * Définit le traitement à effectuer sur le click d'une notification.
     * @param {Object} notification Node de notification sur laquelle on doit appliquer l'événement.
     */


    function definirEvenementClick(notification) {
      notification.addEventListener("click", function (e) {
        retirerNotification(notification);
      });
    }

    return elementsPublics;
  }();
  /* ============================================================= */

  /* ======================== UTILITAIRES ======================== */

  /* ============================================================= */

  /**
   * Obtient l'id du contrôle actif. Si le contrôle actif n'a pas d'id, on lui en assigne un.
   * @returns L'id du contrôle actif.
   */

  function obtenirIdControleActif() {
    if (document.activeElement) {
      var id = document.activeElement.id;

      if (!id) {
        id = genererId();
        document.activeElement.id = id;
      }

      return id;
    }

    return null;
  }
  /**
   * 
   * @param {Object} cible Objet dans lequel on doit copier les données. 
   * @param {Object} source Objet contenant les infos à copier dans l'objet cible. 
   * @returns 
   */

  function extend(cible, source) {
    for (var sourceProp in source) {
      var sourceVal = source[sourceProp]; // Is this value an object?  If so, iterate over its properties, copying them over

      if (sourceVal && Object.prototype.toString.call(sourceVal) === "[object Object]") {
        cible[sourceProp] = cible[sourceProp] || {};
        extend(cible[sourceProp], sourceVal);
      } else {
        cible[sourceProp] = sourceVal;
      }
    }

    return cible;
  }
  /**
   * Génère un id unique.
   * @returns Un id unique.
   */

  function genererId() {
    return Date.now().toString(36) + '-' + Math.random().toString(36).substr(2, 9);
  }
  /**
   * Obtient la langue de la page courante.
   * @returns {string} Code de langue de la page courante (fr/en).
   */

  function obtenirLanguePage() {
    return document.getElementsByTagName("html")[0].getAttribute("lang") || "fr";
  }
  function ajusterAccessibiliteLiens(texteAccessibilite) {
    texteAccessibilite = texteAccessibilite || obtenirLanguePage() === 'fr' ? ". Ce lien sera ouvert dans un nouvel onglet." : ". This link will open in a new tab.";
    document.querySelectorAll('main a[target="_blank"]').forEach(function (lien) {
      //Ne pas traiter les liens sans href et les liens
      if (!lien.getAttribute('href')) {
        return;
      } //Ne pas traiter les liens vers des fichiers pdf ou les liens ayant explicitement une classe indiquant de ne pas les considérer comme lien externe(sans-lien-externe).  TODO éventuellement rafiner la condition afin de traiter uniquement les liens vers des pages web...


      if (lien.getAttribute('href').endsWith(".pdf") || lien.classList.contains("utd-sans-lien-externe")) {
        return;
      } //Ajouter la classe lien-externe afin d'afficher l'icône d'ouverture dans une nouvelle fenêtre.


      if (!lien.classList.contains("utd-lien-externe") && !lien.querySelector('.utd-lien-externe')) {
        lien.classList.add("utd-lien-externe");
      } //Ajouter le texte pour accessibilité nouvelle fenêtre si on détecte qu'il n'est pas là. TODO rafiner cette vérification éventuellement au besoin, il pourrait arriver qu'un .sr-only soit là pour autre chose dans le lien (très peu probable)


      if (!lien.querySelector(".utd-sr-only")) {
        lien.innerHTML = lien.innerHTML + "<span class=\"utd-sr-only\">".concat(texteAccessibilite, "</span>");
      }
    });
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _isNativeReflectConstruct$f() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct$f()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }

  function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function noop() {}

  var identity = function identity(x) {
    return x;
  };

  function assign(tar, src) {
    // @ts-ignore
    for (var k in src) {
      tar[k] = src[k];
    }

    return tar;
  }

  function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
      loc: {
        file: file,
        line: line,
        column: column,
        char: char
      }
    };
  }

  function run(fn) {
    return fn();
  }

  function blank_object() {
    return Object.create(null);
  }

  function run_all(fns) {
    fns.forEach(run);
  }

  function is_function(thing) {
    return typeof thing === 'function';
  }

  function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && _typeof(a) === 'object' || typeof a === 'function';
  }

  var src_url_equal_anchor;

  function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement('a');
    }

    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
  }

  function is_empty(obj) {
    return Object.keys(obj).length === 0;
  }

  function compute_slots(slots) {
    var result = {};

    for (var key in slots) {
      result[key] = true;
    }

    return result;
  }

  var is_client = typeof window !== 'undefined';
  var now = is_client ? function () {
    return window.performance.now();
  } : function () {
    return Date.now();
  };
  var raf = is_client ? function (cb) {
    return requestAnimationFrame(cb);
  } : noop; // used internally for testing

  var tasks = new Set();

  function run_tasks(now) {
    tasks.forEach(function (task) {
      if (!task.c(now)) {
        tasks.delete(task);
        task.f();
      }
    });
    if (tasks.size !== 0) raf(run_tasks);
  }
  /**
   * Creates a new task that runs on each raf frame
   * until it returns a falsy value or is aborted
   */


  function loop(callback) {
    var task;
    if (tasks.size === 0) raf(run_tasks);
    return {
      promise: new Promise(function (fulfill) {
        tasks.add(task = {
          c: callback,
          f: fulfill
        });
      }),
      abort: function abort() {
        tasks.delete(task);
      }
    };
  } // Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM

  function append(target, node) {
    target.appendChild(node);
  }

  function get_root_for_style(node) {
    if (!node) return document;
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;

    if (root && root.host) {
      return root;
    }

    return node.ownerDocument;
  }

  function append_empty_stylesheet(node) {
    var style_element = element('style');
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
  }

  function append_stylesheet(node, style) {
    append(node.head || node, style);
    return style.sheet;
  }

  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
  }

  function detach(node) {
    node.parentNode.removeChild(node);
  }

  function destroy_each(iterations, detaching) {
    for (var i = 0; i < iterations.length; i += 1) {
      if (iterations[i]) iterations[i].d(detaching);
    }
  }

  function element(name) {
    return document.createElement(name);
  }

  function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
  }

  function text(data) {
    return document.createTextNode(data);
  }

  function space() {
    return text(' ');
  }

  function empty() {
    return text('');
  }

  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return function () {
      return node.removeEventListener(event, handler, options);
    };
  }

  function prevent_default(fn) {
    return function (event) {
      event.preventDefault(); // @ts-ignore

      return fn.call(this, event);
    };
  }

  function attr(node, attribute, value) {
    if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
  }

  function set_attributes(node, attributes) {
    // @ts-ignore
    var descriptors = Object.getOwnPropertyDescriptors(node.__proto__);

    for (var key in attributes) {
      if (attributes[key] == null) {
        node.removeAttribute(key);
      } else if (key === 'style') {
        node.style.cssText = attributes[key];
      } else if (key === '__value') {
        node.value = node[key] = attributes[key];
      } else if (descriptors[key] && descriptors[key].set) {
        node[key] = attributes[key];
      } else {
        attr(node, key, attributes[key]);
      }
    }
  }

  function children(element) {
    return Array.from(element.childNodes);
  }

  function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
  }

  function custom_event(type, detail) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$bubbles = _ref.bubbles,
        bubbles = _ref$bubbles === void 0 ? false : _ref$bubbles,
        _ref$cancelable = _ref.cancelable,
        cancelable = _ref$cancelable === void 0 ? false : _ref$cancelable;

    var e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, cancelable, detail);
    return e;
  }

  var HtmlTag = /*#__PURE__*/function () {
    function HtmlTag() {
      var is_svg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _classCallCheck(this, HtmlTag);

      this.is_svg = false;
      this.is_svg = is_svg;
      this.e = this.n = null;
    }

    _createClass(HtmlTag, [{
      key: "c",
      value: function c(html) {
        this.h(html);
      }
    }, {
      key: "m",
      value: function m(html, target) {
        var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        if (!this.e) {
          if (this.is_svg) this.e = svg_element(target.nodeName);else this.e = element(target.nodeName);
          this.t = target;
          this.c(html);
        }

        this.i(anchor);
      }
    }, {
      key: "h",
      value: function h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
      }
    }, {
      key: "i",
      value: function i(anchor) {
        for (var i = 0; i < this.n.length; i += 1) {
          insert(this.t, this.n[i], anchor);
        }
      }
    }, {
      key: "p",
      value: function p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
      }
    }, {
      key: "d",
      value: function d() {
        this.n.forEach(detach);
      }
    }]);

    return HtmlTag;
  }();

  function attribute_to_object(attributes) {
    var result = {};

    var _iterator2 = _createForOfIteratorHelper(attributes),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var attribute = _step2.value;
        result[attribute.name] = attribute.value;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return result;
  }

  function get_custom_elements_slots(element) {
    var result = {};
    element.childNodes.forEach(function (node) {
      result[node.slot || 'default'] = true;
    });
    return result;
  } // we need to store the information for multiple documents because a Svelte application could also contain iframes
  // https://github.com/sveltejs/svelte/issues/3624


  var managed_styles = new Map();
  var active = 0; // https://github.com/darkskyapp/string-hash/blob/master/index.js

  function hash(str) {
    var hash = 5381;
    var i = str.length;

    while (i--) {
      hash = (hash << 5) - hash ^ str.charCodeAt(i);
    }

    return hash >>> 0;
  }

  function create_style_information(doc, node) {
    var info = {
      stylesheet: append_empty_stylesheet(node),
      rules: {}
    };
    managed_styles.set(doc, info);
    return info;
  }

  function create_rule(node, a, b, duration, delay, ease, fn) {
    var uid = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
    var step = 16.666 / duration;
    var keyframes = '{\n';

    for (var p = 0; p <= 1; p += step) {
      var t = a + (b - a) * ease(p);
      keyframes += p * 100 + "%{".concat(fn(t, 1 - t), "}\n");
    }

    var rule = keyframes + "100% {".concat(fn(b, 1 - b), "}\n}");
    var name = "__svelte_".concat(hash(rule), "_").concat(uid);
    var doc = get_root_for_style(node);

    var _ref2 = managed_styles.get(doc) || create_style_information(doc, node),
        stylesheet = _ref2.stylesheet,
        rules = _ref2.rules;

    if (!rules[name]) {
      rules[name] = true;
      stylesheet.insertRule("@keyframes ".concat(name, " ").concat(rule), stylesheet.cssRules.length);
    }

    var animation = node.style.animation || '';
    node.style.animation = "".concat(animation ? "".concat(animation, ", ") : '').concat(name, " ").concat(duration, "ms linear ").concat(delay, "ms 1 both");
    active += 1;
    return name;
  }

  function delete_rule(node, name) {
    var previous = (node.style.animation || '').split(', ');
    var next = previous.filter(name ? function (anim) {
      return anim.indexOf(name) < 0;
    } // remove specific animation
    : function (anim) {
      return anim.indexOf('__svelte') === -1;
    } // remove all Svelte animations
    );
    var deleted = previous.length - next.length;

    if (deleted) {
      node.style.animation = next.join(', ');
      active -= deleted;
      if (!active) clear_rules();
    }
  }

  function clear_rules() {
    raf(function () {
      if (active) return;
      managed_styles.forEach(function (info) {
        var ownerNode = info.stylesheet.ownerNode; // there is no ownerNode if it runs on jsdom.

        if (ownerNode) detach(ownerNode);
      });
      managed_styles.clear();
    });
  }

  var current_component;

  function set_current_component(component) {
    current_component = component;
  }

  function get_current_component() {
    if (!current_component) throw new Error('Function called outside component initialization');
    return current_component;
  }

  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
  }

  var dirty_components = [];
  var binding_callbacks = [];
  var render_callbacks = [];
  var flush_callbacks = [];
  var resolved_promise = Promise.resolve();
  var update_scheduled = false;

  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true;
      resolved_promise.then(flush);
    }
  }

  function add_render_callback(fn) {
    render_callbacks.push(fn);
  }
  // 1. All beforeUpdate callbacks, in order: parents before children
  // 2. All bind:this callbacks, in reverse order: children before parents.
  // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
  //    for afterUpdates called during the initial onMount, which are called in
  //    reverse order: children before parents.
  // Since callbacks might update component values, which could trigger another
  // call to flush(), the following steps guard against this:
  // 1. During beforeUpdate, any updated components will be added to the
  //    dirty_components array and will cause a reentrant call to flush(). Because
  //    the flush index is kept outside the function, the reentrant call will pick
  //    up where the earlier call left off and go through all dirty components. The
  //    current_component value is saved and restored so that the reentrant call will
  //    not interfere with the "parent" flush() call.
  // 2. bind:this callbacks cannot trigger new flush() calls.
  // 3. During afterUpdate, any updated components will NOT have their afterUpdate
  //    callback called a second time; the seen_callbacks set, outside the flush()
  //    function, guarantees this behavior.


  var seen_callbacks = new Set();
  var flushidx = 0; // Do *not* move this inside the flush() function

  function flush() {
    var saved_component = current_component;

    do {
      // first, call beforeUpdate functions
      // and update components
      while (flushidx < dirty_components.length) {
        var component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }

      set_current_component(null);
      dirty_components.length = 0;
      flushidx = 0;

      while (binding_callbacks.length) {
        binding_callbacks.pop()();
      } // then, once components are updated, call
      // afterUpdate functions. This may cause
      // subsequent updates...


      for (var i = 0; i < render_callbacks.length; i += 1) {
        var callback = render_callbacks[i];

        if (!seen_callbacks.has(callback)) {
          // ...so guard against infinite loops
          seen_callbacks.add(callback);
          callback();
        }
      }

      render_callbacks.length = 0;
    } while (dirty_components.length);

    while (flush_callbacks.length) {
      flush_callbacks.pop()();
    }

    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
  }

  function update($$) {
    if ($$.fragment !== null) {
      $$.update();
      run_all($$.before_update);
      var dirty = $$.dirty;
      $$.dirty = [-1];
      $$.fragment && $$.fragment.p($$.ctx, dirty);
      $$.after_update.forEach(add_render_callback);
    }
  }

  var promise;

  function wait() {
    if (!promise) {
      promise = Promise.resolve();
      promise.then(function () {
        promise = null;
      });
    }

    return promise;
  }

  function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event("".concat(direction ? 'intro' : 'outro').concat(kind)));
  }

  var outroing = new Set();
  var outros;

  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros // parent group

    };
  }

  function check_outros() {
    if (!outros.r) {
      run_all(outros.c);
    }

    outros = outros.p;
  }

  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block);
      block.i(local);
    }
  }

  function transition_out(block, local, detach, callback) {
    if (block && block.o) {
      if (outroing.has(block)) return;
      outroing.add(block);
      outros.c.push(function () {
        outroing.delete(block);

        if (callback) {
          if (detach) block.d(1);
          callback();
        }
      });
      block.o(local);
    } else if (callback) {
      callback();
    }
  }

  var null_transition = {
    duration: 0
  };

  function create_in_transition(node, fn, params) {
    var config = fn(node, params);
    var running = false;
    var animation_name;
    var task;
    var uid = 0;

    function cleanup() {
      if (animation_name) delete_rule(node, animation_name);
    }

    function go() {
      var _ref4 = config || null_transition,
          _ref4$delay = _ref4.delay,
          delay = _ref4$delay === void 0 ? 0 : _ref4$delay,
          _ref4$duration = _ref4.duration,
          duration = _ref4$duration === void 0 ? 300 : _ref4$duration,
          _ref4$easing = _ref4.easing,
          easing = _ref4$easing === void 0 ? identity : _ref4$easing,
          _ref4$tick = _ref4.tick,
          tick = _ref4$tick === void 0 ? noop : _ref4$tick,
          css = _ref4.css;

      if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
      tick(0, 1);
      var start_time = now() + delay;
      var end_time = start_time + duration;
      if (task) task.abort();
      running = true;
      add_render_callback(function () {
        return dispatch(node, true, 'start');
      });
      task = loop(function (now) {
        if (running) {
          if (now >= end_time) {
            tick(1, 0);
            dispatch(node, true, 'end');
            cleanup();
            return running = false;
          }

          if (now >= start_time) {
            var t = easing((now - start_time) / duration);
            tick(t, 1 - t);
          }
        }

        return running;
      });
    }

    var started = false;
    return {
      start: function start() {
        if (started) return;
        started = true;
        delete_rule(node);

        if (is_function(config)) {
          config = config();
          wait().then(go);
        } else {
          go();
        }
      },
      invalidate: function invalidate() {
        started = false;
      },
      end: function end() {
        if (running) {
          cleanup();
          running = false;
        }
      }
    };
  }

  function create_out_transition(node, fn, params) {
    var config = fn(node, params);
    var running = true;
    var animation_name;
    var group = outros;
    group.r += 1;

    function go() {
      var _ref5 = config || null_transition,
          _ref5$delay = _ref5.delay,
          delay = _ref5$delay === void 0 ? 0 : _ref5$delay,
          _ref5$duration = _ref5.duration,
          duration = _ref5$duration === void 0 ? 300 : _ref5$duration,
          _ref5$easing = _ref5.easing,
          easing = _ref5$easing === void 0 ? identity : _ref5$easing,
          _ref5$tick = _ref5.tick,
          tick = _ref5$tick === void 0 ? noop : _ref5$tick,
          css = _ref5.css;

      if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
      var start_time = now() + delay;
      var end_time = start_time + duration;
      add_render_callback(function () {
        return dispatch(node, false, 'start');
      });
      loop(function (now) {
        if (running) {
          if (now >= end_time) {
            tick(0, 1);
            dispatch(node, false, 'end');

            if (! --group.r) {
              // this will result in `end()` being called,
              // so we don't need to clean up here
              run_all(group.c);
            }

            return false;
          }

          if (now >= start_time) {
            var t = easing((now - start_time) / duration);
            tick(1 - t, t);
          }
        }

        return running;
      });
    }

    if (is_function(config)) {
      wait().then(function () {
        // @ts-ignore
        config = config();
        go();
      });
    } else {
      go();
    }

    return {
      end: function end(reset) {
        if (reset && config.tick) {
          config.tick(1, 0);
        }

        if (running) {
          if (animation_name) delete_rule(node, animation_name);
          running = false;
        }
      }
    };
  }

  function create_bidirectional_transition(node, fn, params, intro) {
    var config = fn(node, params);
    var t = intro ? 0 : 1;
    var running_program = null;
    var pending_program = null;
    var animation_name = null;

    function clear_animation() {
      if (animation_name) delete_rule(node, animation_name);
    }

    function init(program, duration) {
      var d = program.b - t;
      duration *= Math.abs(d);
      return {
        a: t,
        b: program.b,
        d: d,
        duration: duration,
        start: program.start,
        end: program.start + duration,
        group: program.group
      };
    }

    function go(b) {
      var _ref6 = config || null_transition,
          _ref6$delay = _ref6.delay,
          delay = _ref6$delay === void 0 ? 0 : _ref6$delay,
          _ref6$duration = _ref6.duration,
          duration = _ref6$duration === void 0 ? 300 : _ref6$duration,
          _ref6$easing = _ref6.easing,
          easing = _ref6$easing === void 0 ? identity : _ref6$easing,
          _ref6$tick = _ref6.tick,
          tick = _ref6$tick === void 0 ? noop : _ref6$tick,
          css = _ref6.css;

      var program = {
        start: now() + delay,
        b: b
      };

      if (!b) {
        // @ts-ignore todo: improve typings
        program.group = outros;
        outros.r += 1;
      }

      if (running_program || pending_program) {
        pending_program = program;
      } else {
        // if this is an intro, and there's a delay, we need to do
        // an initial tick and/or apply CSS animation immediately
        if (css) {
          clear_animation();
          animation_name = create_rule(node, t, b, duration, delay, easing, css);
        }

        if (b) tick(0, 1);
        running_program = init(program, duration);
        add_render_callback(function () {
          return dispatch(node, b, 'start');
        });
        loop(function (now) {
          if (pending_program && now > pending_program.start) {
            running_program = init(pending_program, duration);
            pending_program = null;
            dispatch(node, running_program.b, 'start');

            if (css) {
              clear_animation();
              animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
            }
          }

          if (running_program) {
            if (now >= running_program.end) {
              tick(t = running_program.b, 1 - t);
              dispatch(node, running_program.b, 'end');

              if (!pending_program) {
                // we're done
                if (running_program.b) {
                  // intro — we can tidy up immediately
                  clear_animation();
                } else {
                  // outro — needs to be coordinated
                  if (! --running_program.group.r) run_all(running_program.group.c);
                }
              }

              running_program = null;
            } else if (now >= running_program.start) {
              var p = now - running_program.start;
              t = running_program.a + running_program.d * easing(p / running_program.duration);
              tick(t, 1 - t);
            }
          }

          return !!(running_program || pending_program);
        });
      }
    }

    return {
      run: function run(b) {
        if (is_function(config)) {
          wait().then(function () {
            // @ts-ignore
            config = config();
            go(b);
          });
        } else {
          go(b);
        }
      },
      end: function end() {
        clear_animation();
        running_program = pending_program = null;
      }
    };
  }

  var globals = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : global;

  function get_spread_update(levels, updates) {
    var update = {};
    var to_null_out = {};
    var accounted_for = {
      $$scope: 1
    };
    var i = levels.length;

    while (i--) {
      var o = levels[i];
      var n = updates[i];

      if (n) {
        for (var key in o) {
          if (!(key in n)) to_null_out[key] = 1;
        }

        for (var _key3 in n) {
          if (!accounted_for[_key3]) {
            update[_key3] = n[_key3];
            accounted_for[_key3] = 1;
          }
        }

        levels[i] = n;
      } else {
        for (var _key4 in o) {
          accounted_for[_key4] = 1;
        }
      }
    }

    for (var _key5 in to_null_out) {
      if (!(_key5 in update)) update[_key5] = undefined;
    }

    return update;
  }
  /** regex of all html void element names */

  var void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;

  function is_void(name) {
    return void_element_names.test(name) || name.toLowerCase() === '!doctype';
  }

  function mount_component(component, target, anchor, customElement) {
    var _component$$$ = component.$$,
        fragment = _component$$$.fragment,
        on_mount = _component$$$.on_mount,
        on_destroy = _component$$$.on_destroy,
        after_update = _component$$$.after_update;
    fragment && fragment.m(target, anchor);

    if (!customElement) {
      // onMount happens before the initial afterUpdate
      add_render_callback(function () {
        var new_on_destroy = on_mount.map(run).filter(is_function);

        if (on_destroy) {
          on_destroy.push.apply(on_destroy, _toConsumableArray(new_on_destroy));
        } else {
          // Edge case - component was destroyed immediately,
          // most likely as a result of a binding initialising
          run_all(new_on_destroy);
        }

        component.$$.on_mount = [];
      });
    }

    after_update.forEach(add_render_callback);
  }

  function destroy_component(component, detaching) {
    var $$ = component.$$;

    if ($$.fragment !== null) {
      run_all($$.on_destroy);
      $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
      // preserve final state?)

      $$.on_destroy = $$.fragment = null;
      $$.ctx = [];
    }
  }

  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component);
      schedule_update();
      component.$$.dirty.fill(0);
    }

    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
  }

  function init(component, options, instance, create_fragment, not_equal, props, append_styles) {
    var dirty = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [-1];
    var parent_component = current_component;
    set_current_component(component);
    var $$ = component.$$ = {
      fragment: null,
      ctx: null,
      // state
      props: props,
      update: noop,
      not_equal: not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
      // everything else
      callbacks: blank_object(),
      dirty: dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    var ready = false;
    $$.ctx = instance ? instance(component, options.props || {}, function (i, ret) {
      var value = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : ret;

      if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
        if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
        if (ready) make_dirty(component, i);
      }

      return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update); // `false` as a special case of no DOM component

    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

    if (options.target) {
      if (options.hydrate) {
        var nodes = children(options.target); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

        $$.fragment && $$.fragment.l(nodes);
        nodes.forEach(detach);
      } else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.c();
      }

      if (options.intro) transition_in(component.$$.fragment);
      mount_component(component, options.target, options.anchor, options.customElement);
      flush();
    }

    set_current_component(parent_component);
  }

  var SvelteElement;

  if (typeof HTMLElement === 'function') {
    SvelteElement = /*#__PURE__*/function (_HTMLElement) {
      _inherits(SvelteElement, _HTMLElement);

      var _super2 = _createSuper$e(SvelteElement);

      function SvelteElement() {
        var _this3;

        _classCallCheck(this, SvelteElement);

        _this3 = _super2.call(this);

        _this3.attachShadow({
          mode: 'open'
        });

        return _this3;
      }

      _createClass(SvelteElement, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          var on_mount = this.$$.on_mount;
          this.$$.on_disconnect = on_mount.map(run).filter(is_function); // @ts-ignore todo: improve typings

          for (var key in this.$$.slotted) {
            // @ts-ignore todo: improve typings
            this.appendChild(this.$$.slotted[key]);
          }
        }
      }, {
        key: "attributeChangedCallback",
        value: function attributeChangedCallback(attr, _oldValue, newValue) {
          this[attr] = newValue;
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          run_all(this.$$.on_disconnect);
        }
      }, {
        key: "$destroy",
        value: function $destroy() {
          destroy_component(this, 1);
          this.$destroy = noop;
        }
      }, {
        key: "$on",
        value: function $on(type, callback) {
          // TODO should this delegate to addEventListener?
          var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
          callbacks.push(callback);
          return function () {
            var index = callbacks.indexOf(callback);
            if (index !== -1) callbacks.splice(index, 1);
          };
        }
      }, {
        key: "$set",
        value: function $set($$props) {
          if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
          }
        }
      }]);

      return SvelteElement;
    }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
  }

  function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({
      version: '3.50.1'
    }, detail), {
      bubbles: true
    }));
  }

  function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', {
      target: target,
      node: node
    });
    append(target, node);
  }

  function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', {
      target: target,
      node: node,
      anchor: anchor
    });
    insert(target, node, anchor);
  }

  function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', {
      node: node
    });
    detach(node);
  }

  function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    var modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default) modifiers.push('preventDefault');
    if (has_stop_propagation) modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', {
      node: node,
      event: event,
      handler: handler,
      modifiers: modifiers
    });
    var dispose = listen(node, event, handler, options);
    return function () {
      dispatch_dev('SvelteDOMRemoveEventListener', {
        node: node,
        event: event,
        handler: handler,
        modifiers: modifiers
      });
      dispose();
    };
  }

  function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null) dispatch_dev('SvelteDOMRemoveAttribute', {
      node: node,
      attribute: attribute
    });else dispatch_dev('SvelteDOMSetAttribute', {
      node: node,
      attribute: attribute,
      value: value
    });
  }

  function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', {
      node: node,
      property: property,
      value: value
    });
  }

  function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data) return;
    dispatch_dev('SvelteDOMSetData', {
      node: text,
      data: data
    });
    text.data = data;
  }

  function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && _typeof(arg) === 'object' && 'length' in arg)) {
      var msg = '{#each} only iterates over array-like objects.';

      if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
        msg += ' You can use a spread to convert this iterable into an array.';
      }

      throw new Error(msg);
    }
  }

  function validate_slots(name, slot, keys) {
    for (var _i4 = 0, _Object$keys = Object.keys(slot); _i4 < _Object$keys.length; _i4++) {
      var slot_key = _Object$keys[_i4];

      if (!~keys.indexOf(slot_key)) {
        console.warn("<".concat(name, "> received an unexpected slot \"").concat(slot_key, "\"."));
      }
    }
  }

  function validate_dynamic_element(tag) {
    var is_string = typeof tag === 'string';

    if (tag && !is_string) {
      throw new Error('<svelte:element> expects "this" attribute to be a string.');
    }
  }

  function validate_void_dynamic_element(tag) {
    if (tag && is_void(tag)) {
      throw new Error("<svelte:element this=\"".concat(tag, "\"> is self-closing and cannot have content."));
    }
  }

  function cubicOut(t) {
    var f = t - 1.0;
    return f * f * f + 1.0;
  }

  function fade(node) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$delay = _ref2.delay,
        delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
        _ref2$duration = _ref2.duration,
        duration = _ref2$duration === void 0 ? 400 : _ref2$duration,
        _ref2$easing = _ref2.easing,
        easing = _ref2$easing === void 0 ? identity : _ref2$easing;

    var o = +getComputedStyle(node).opacity;
    return {
      delay: delay,
      duration: duration,
      easing: easing,
      css: function css(t) {
        return "opacity: ".concat(t * o);
      }
    };
  }

  function fly(node) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$delay = _ref3.delay,
        delay = _ref3$delay === void 0 ? 0 : _ref3$delay,
        _ref3$duration = _ref3.duration,
        duration = _ref3$duration === void 0 ? 400 : _ref3$duration,
        _ref3$easing = _ref3.easing,
        easing = _ref3$easing === void 0 ? cubicOut : _ref3$easing,
        _ref3$x = _ref3.x,
        x = _ref3$x === void 0 ? 0 : _ref3$x,
        _ref3$y = _ref3.y,
        y = _ref3$y === void 0 ? 0 : _ref3$y,
        _ref3$opacity = _ref3.opacity,
        opacity = _ref3$opacity === void 0 ? 0 : _ref3$opacity;

    var style = getComputedStyle(node);
    var target_opacity = +style.opacity;
    var transform = style.transform === 'none' ? '' : style.transform;
    var od = target_opacity * (1 - opacity);
    return {
      delay: delay,
      duration: duration,
      easing: easing,
      css: function css(t, u) {
        return "\n\t\t\ttransform: ".concat(transform, " translate(").concat((1 - t) * x, "px, ").concat((1 - t) * y, "px);\n\t\t\topacity: ").concat(target_opacity - od * u);
      }
    };
  }

  function slide(node) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$delay = _ref4.delay,
        delay = _ref4$delay === void 0 ? 0 : _ref4$delay,
        _ref4$duration = _ref4.duration,
        duration = _ref4$duration === void 0 ? 400 : _ref4$duration,
        _ref4$easing = _ref4.easing,
        easing = _ref4$easing === void 0 ? cubicOut : _ref4$easing;

    var style = getComputedStyle(node);
    var opacity = +style.opacity;
    var height = parseFloat(style.height);
    var padding_top = parseFloat(style.paddingTop);
    var padding_bottom = parseFloat(style.paddingBottom);
    var margin_top = parseFloat(style.marginTop);
    var margin_bottom = parseFloat(style.marginBottom);
    var border_top_width = parseFloat(style.borderTopWidth);
    var border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
      delay: delay,
      duration: duration,
      easing: easing,
      css: function css(t) {
        return 'overflow: hidden;' + "opacity: ".concat(Math.min(t * 20, 1) * opacity, ";") + "height: ".concat(t * height, "px;") + "padding-top: ".concat(t * padding_top, "px;") + "padding-bottom: ".concat(t * padding_bottom, "px;") + "margin-top: ".concat(t * margin_top, "px;") + "margin-bottom: ".concat(t * margin_bottom, "px;") + "border-top-width: ".concat(t * border_top_width, "px;") + "border-bottom-width: ".concat(t * border_bottom_width, "px;");
      }
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var Utils = /*#__PURE__*/function () {
    function Utils() {
      _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
      key: "conserverFocusElement",
      value: function conserverFocusElement(componentShadow, componentRoot) {
        var elementsFocusablesShadow = Array.from(this.obtenirElementsFocusables(componentShadow));
        var elementsFocusablesRoot = Array.from(this.obtenirElementsFocusables(componentRoot));
        var elementsFocusables = elementsFocusablesShadow.concat(elementsFocusablesRoot);
        var premierElementFocusable = elementsFocusables[0];
        var dernierElementFocusable = elementsFocusables[elementsFocusables.length - 1];
        var KEYCODE_TAB = 9;
        componentShadow.addEventListener('keydown', function (e) {
          var estToucheTab = e.key === 'Tab' || e.keyCode === KEYCODE_TAB;

          if (!estToucheTab) {
            return;
          }

          var elementActif = document.activeElement.shadowRoot ? document.activeElement.shadowRoot.activeElement : document.activeElement;

          if (e.shiftKey)
            /* shift + tab */
            {
              if (elementActif === premierElementFocusable) {
                dernierElementFocusable.focus();
                e.preventDefault();
              }
            } else
            /* tab */
            {
              if (elementsFocusables.length === 1 || elementActif === dernierElementFocusable) {
                premierElementFocusable.focus();
                e.preventDefault();
              }
            }
        });
      }
    }, {
      key: "obtenirElementsFocusables",
      value: function obtenirElementsFocusables(element) {
        return element.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input:not([type="hidden"]):not([disabled]), select:not([disabled])');
      }
      /**
       * Génère un id unique.
       * @returns L'id unique généré.
       */

    }, {
      key: "genererId",
      value: function genererId() {
        return Date.now().toString(36) + '-' + Math.random().toString(36).substr(2, 9);
      }
      /**
       * Créé un événement custom pour un webComponent.
       * @param {*} component Objet associé à notre composant (objet DOM).
       * @param {*} nomEvenement Nom de l'événement. 
       * @param {*} detailsEvenement Détails de l'événement.
       */

    }, {
      key: "estMobile",
      value: function estMobile() {
        return navigator.maxTouchPoints || 'ontouchstart' in document.documentElement;
      }
    }, {
      key: "ajusterInterfaceAvantAffichageModale",
      value: function ajusterInterfaceAvantAffichageModale(html, body) {
        if (!this.estMobile()) {
          var largeurScrollbarHtml = window.innerWidth - html.offsetWidth;

          if (largeurScrollbarHtml > 0) {
            html.style['padding-right'] = largeurScrollbarHtml + 'px';
          } else {
            var largeurScrollbarBody = window.innerWidth - body.offsetWidth;

            if (largeurScrollbarBody > 0) {
              body.style['padding-right'] = largeurScrollbarBody + 'px';
            }
          }
        }
        /* On s'assure que le scroll ne changera pas une fois le body modifié avec position fixe */


        var scrollY = window.scrollY;
        html.classList.add("utd-modale-ouverte");
        document.body.style.top = "-".concat(scrollY, "px");
      }
    }, {
      key: "ajusterInterfacePendantAffichageModale",
      value: function ajusterInterfacePendantAffichageModale(body, modale) {
        if (!this.estMobile()) {
          var largeurScrollbarModale = window.innerWidth - modale.offsetWidth;

          if (largeurScrollbarModale > 0) {
            body.style['padding-right'] = largeurScrollbarModale + 'px';
          }
        }
      }
    }, {
      key: "ajusterInterfaceApresFermetureModale",
      value: function ajusterInterfaceApresFermetureModale(html, body) {
        html.style.removeProperty('padding-right');
        body.style.removeProperty('padding-right');
        html.classList.remove("utd-modale-ouverte");
        /* Repositionner l'écran où il était avant l'affichage de la modale. */

        var scrollY = document.body.style.top;
        document.body.style.position = '';
        document.body.style.top = '';
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
      }
    }, {
      key: "slotExiste",
      value: function slotExiste(slots, nomSlot) {
        return slots.some(function (s) {
          return s.slot === nomSlot;
        });
      }
    }, {
      key: "obtenirSlot",
      value: function obtenirSlot(slots, nomSlot) {
        return slots.find(function (s) {
          return s.slot === nomSlot;
        });
      }
    }, {
      key: "obtenirTextesDefaut",
      value: function obtenirTextesDefaut() {
        var textes = {
          texteSrOuvertureNouvelOnglet: this.obtenirLanguePage() === 'fr' ? ". Ce lien sera ouvert dans un nouvel onglet." : ". This link will open in a new tab."
        };
        return textes;
      }
      /**
       * Obtient la langue de la page courante.
       * @returns {string} Code de langue de la page courante (fr/en).
       */

    }, {
      key: "obtenirLanguePage",
      value: function obtenirLanguePage() {
        return document.getElementsByTagName("html")[0].getAttribute("lang") || "fr";
      }
    }]);

    return Utils;
  }();

  _defineProperty(Utils, "relativeBasePath", document.currentScript.getAttribute('relative-base-path') || '/');

  _defineProperty(Utils, "cssRelativePath", "".concat(Utils.relativeBasePath, "/css/").replace('//', '/'));

  _defineProperty(Utils, "imagesRelativePath", "".concat(Utils.relativeBasePath, "/images/").replace('//', '/'));

  _defineProperty(Utils, "cssFullPath", "".concat(Utils.cssRelativePath, "utd-webcomponents.min.css?v=1.7.7"));

  _defineProperty(Utils, "dispatchWcEvent", function (component, nomEvenement, detailsEvenement) {
    component.dispatchEvent(new CustomEvent(nomEvenement, {
      detail: detailsEvenement,
      composed: true // propage l'événement à travers le shadow DOM (Remonte au document)

    }));
  });

  function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$d = "src\\components\\accordeon.svelte"; // (29:10) {#if titre}


  function create_if_block_2$5(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text(
        /*titre*/
        ctx[1]);
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titre*/
        2) set_data_dev(t,
        /*titre*/
        ctx[1]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$5.name,
      type: "if",
      source: "(29:10) {#if titre}",
      ctx: ctx
    });
    return block;
  } // (26:4) <svelte:element this={tagTitre} class="titre">


  function create_dynamic_element$1(ctx) {
    var svelte_element;
    var button;
    var span0;
    var t0;
    var slot;
    var t1;
    var span1;
    var span1_class_value;
    var button_aria_expanded_value;
    var mounted;
    var dispose;
    var if_block =
    /*titre*/
    ctx[1] && create_if_block_2$5(ctx);
    var svelte_element_levels = [{
      class: "titre"
    }];
    var svelte_element_data = {};

    for (var i = 0; i < svelte_element_levels.length; i += 1) {
      svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
    }

    var block = {
      c: function create() {
        svelte_element = element(
        /*tagTitre*/
        ctx[3]);
        button = element("button");
        span0 = element("span");
        if (if_block) if_block.c();
        t0 = space();
        slot = element("slot");
        t1 = space();
        span1 = element("span");
        attr_dev(slot, "name", "titre");
        add_location(slot, file$d, 31, 10, 1014);
        attr_dev(span0, "class", "titre");
        add_location(span0, file$d, 27, 8, 921);
        attr_dev(span1, "class", span1_class_value = "utd-icone-svg " + (
        /*reduit*/
        ctx[0] === 'false' ? 'moins' : 'plus'));
        add_location(span1, file$d, 33, 8, 1068);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "");
        attr_dev(button, "aria-controls",
        /*idContenu*/
        ctx[4]);
        attr_dev(button, "aria-expanded", button_aria_expanded_value =
        /*reduit*/
        ctx[0] === 'false');
        add_location(button, file$d, 26, 6, 781);
        set_attributes(svelte_element, svelte_element_data);
        add_location(svelte_element, file$d, 25, 4, 726);
      },
      m: function mount(target, anchor) {
        insert_dev(target, svelte_element, anchor);
        append_dev(svelte_element, button);
        append_dev(button, span0);
        if (if_block) if_block.m(span0, null);
        append_dev(span0, t0);
        append_dev(span0, slot);
        append_dev(button, t1);
        append_dev(button, span1);

        if (!mounted) {
          dispose = listen_dev(button, "click",
          /*toggleAffichageContenu*/
          ctx[5], false, false, false);
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (
        /*titre*/
        ctx[1]) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block_2$5(ctx);
            if_block.c();
            if_block.m(span0, t0);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty &
        /*reduit*/
        1 && span1_class_value !== (span1_class_value = "utd-icone-svg " + (
        /*reduit*/
        ctx[0] === 'false' ? 'moins' : 'plus'))) {
          attr_dev(span1, "class", span1_class_value);
        }

        if (dirty &
        /*reduit*/
        1 && button_aria_expanded_value !== (button_aria_expanded_value =
        /*reduit*/
        ctx[0] === 'false')) {
          attr_dev(button, "aria-expanded", button_aria_expanded_value);
        }

        set_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [{
          class: "titre"
        }]));
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(svelte_element);
        if (if_block) if_block.d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_dynamic_element$1.name,
      type: "child_dynamic_element",
      source: "(26:4) <svelte:element this={tagTitre} class=\\\"titre\\\">",
      ctx: ctx
    });
    return block;
  } // (40:6) {#if reduit === 'false'}


  function create_if_block$a(ctx) {
    var div;
    var div_transition;
    var current;

    function select_block_type(ctx, dirty) {
      if (
      /*contenu*/
      ctx[2]) return create_if_block_1$6;
      return create_else_block$3;
    }

    var current_block_type = select_block_type(ctx);
    var if_block = current_block_type(ctx);
    var block = {
      c: function create() {
        div = element("div");
        if_block.c();
        attr_dev(div, "class", "conteneur");
        add_location(div, file$d, 40, 8, 1289);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        if_block.m(div, null);
        current = true;
      },
      p: function update(ctx, dirty) {
        if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(div, null);
          }
        }
      },
      i: function intro(local) {
        if (current) return;
        add_render_callback(function () {
          if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
            duration: 250
          }, true);
          div_transition.run(1);
        });
        current = true;
      },
      o: function outro(local) {
        if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
          duration: 250
        }, false);
        div_transition.run(0);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if_block.d();
        if (detaching && div_transition) div_transition.end();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$a.name,
      type: "if",
      source: "(40:6) {#if reduit === 'false'}",
      ctx: ctx
    });
    return block;
  } // (44:10) {:else}


  function create_else_block$3(ctx) {
    var slot0;
    var t;
    var slot1;
    var block = {
      c: function create() {
        slot0 = element("slot");
        t = space();
        slot1 = element("slot");
        add_location(slot0, file$d, 44, 12, 1435);
        attr_dev(slot1, "name", "contenu");
        add_location(slot1, file$d, 45, 12, 1458);
      },
      m: function mount(target, anchor) {
        insert_dev(target, slot0, anchor);
        insert_dev(target, t, anchor);
        insert_dev(target, slot1, anchor);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(slot0);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(slot1);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block$3.name,
      type: "else",
      source: "(44:10) {:else}",
      ctx: ctx
    });
    return block;
  } // (42:10) {#if contenu}


  function create_if_block_1$6(ctx) {
    var html_tag;
    var html_anchor;
    var block = {
      c: function create() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m: function mount(target, anchor) {
        html_tag.m(
        /*contenu*/
        ctx[2], target, anchor);
        insert_dev(target, html_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*contenu*/
        4) html_tag.p(
        /*contenu*/
        ctx[2]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(html_anchor);
        if (detaching) html_tag.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$6.name,
      type: "if",
      source: "(42:10) {#if contenu}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$d(ctx) {
    var div2;
    var div0;
    var previous_tag =
    /*tagTitre*/
    ctx[3];
    var t2;
    var div1;
    var div2_class_value;
    var t3;
    var link;
    var current;
    validate_dynamic_element(
    /*tagTitre*/
    ctx[3]);
    validate_void_dynamic_element(
    /*tagTitre*/
    ctx[3]);
    var svelte_element =
    /*tagTitre*/
    ctx[3] && create_dynamic_element$1(ctx);
    var if_block1 =
    /*reduit*/
    ctx[0] === 'false' && create_if_block$a(ctx);
    var block = {
      c: function create() {
        div2 = element("div");
        div0 = element("div");
        if (svelte_element) svelte_element.c();
        t2 = space();
        div1 = element("div");
        if (if_block1) if_block1.c();
        t3 = space();
        link = element("link");
        this.c = noop;
        attr_dev(div0, "class", "entete");
        add_location(div0, file$d, 24, 2, 700);
        attr_dev(div1, "id",
        /*idContenu*/
        ctx[4]);
        attr_dev(div1, "class", "contenu");
        add_location(div1, file$d, 38, 4, 1208);
        attr_dev(div2, "class", div2_class_value = "utd-component utd-accordeon " + (
        /*reduit*/
        ctx[0] === 'false' ? 'ouvert' : ''));
        add_location(div2, file$d, 23, 0, 617);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$d, 53, 0, 1553);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div2, anchor);
        append_dev(div2, div0);
        if (svelte_element) svelte_element.m(div0, null);
        append_dev(div2, t2);
        append_dev(div2, div1);
        if (if_block1) if_block1.m(div1, null);
        insert_dev(target, t3, anchor);
        insert_dev(target, link, anchor);
        current = true;
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (
        /*tagTitre*/
        ctx[3]) {
          if (!previous_tag) {
            svelte_element = create_dynamic_element$1(ctx);
            svelte_element.c();
            svelte_element.m(div0, null);
          } else if (safe_not_equal(previous_tag,
          /*tagTitre*/
          ctx[3])) {
            svelte_element.d(1);
            validate_dynamic_element(
            /*tagTitre*/
            ctx[3]);
            validate_void_dynamic_element(
            /*tagTitre*/
            ctx[3]);
            svelte_element = create_dynamic_element$1(ctx);
            svelte_element.c();
            svelte_element.m(div0, null);
          } else {
            svelte_element.p(ctx, dirty);
          }
        } else if (previous_tag) {
          svelte_element.d(1);
          svelte_element = null;
        }

        previous_tag =
        /*tagTitre*/
        ctx[3];

        if (
        /*reduit*/
        ctx[0] === 'false') {
          if (if_block1) {
            if_block1.p(ctx, dirty);

            if (dirty &
            /*reduit*/
            1) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block$a(ctx);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, function () {
            if_block1 = null;
          });
          check_outros();
        }

        if (!current || dirty &
        /*reduit*/
        1 && div2_class_value !== (div2_class_value = "utd-component utd-accordeon " + (
        /*reduit*/
        ctx[0] === 'false' ? 'ouvert' : ''))) {
          attr_dev(div2, "class", div2_class_value);
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block1);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block1);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div2);
        if (svelte_element) svelte_element.d(detaching);
        if (if_block1) if_block1.d();
        if (detaching) detach_dev(t3);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$d.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$d($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-accordeon', slots, []);
    var _$$props$reduit = $$props.reduit,
        reduit = _$$props$reduit === void 0 ? "true" : _$$props$reduit;
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? "" : _$$props$titre;
    var _$$props$contenu = $$props.contenu,
        contenu = _$$props$contenu === void 0 ? "" : _$$props$contenu;
    var _$$props$tagTitre = $$props.tagTitre,
        tagTitre = _$$props$tagTitre === void 0 ? "h2" : _$$props$tagTitre;
    var idEntete = Utils.genererId();
    var idContenu = 'corps' + idEntete;

    function toggleAffichageContenu() {
      $$invalidate(0, reduit = reduit === 'true' ? 'false' : 'true');
    }

    var writable_props = ['reduit', 'titre', 'contenu', 'tagTitre'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-accordeon> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('reduit' in $$props) $$invalidate(0, reduit = $$props.reduit);
      if ('titre' in $$props) $$invalidate(1, titre = $$props.titre);
      if ('contenu' in $$props) $$invalidate(2, contenu = $$props.contenu);
      if ('tagTitre' in $$props) $$invalidate(3, tagTitre = $$props.tagTitre);
    };

    $$self.$capture_state = function () {
      return {
        slide: slide,
        Utils: Utils,
        reduit: reduit,
        titre: titre,
        contenu: contenu,
        tagTitre: tagTitre,
        idEntete: idEntete,
        idContenu: idContenu,
        toggleAffichageContenu: toggleAffichageContenu
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('reduit' in $$props) $$invalidate(0, reduit = $$props.reduit);
      if ('titre' in $$props) $$invalidate(1, titre = $$props.titre);
      if ('contenu' in $$props) $$invalidate(2, contenu = $$props.contenu);
      if ('tagTitre' in $$props) $$invalidate(3, tagTitre = $$props.tagTitre);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [reduit, titre, contenu, tagTitre, idContenu, toggleAffichageContenu];
  }

  var Accordeon = /*#__PURE__*/function (_SvelteElement) {
    _inherits(Accordeon, _SvelteElement);

    var _super = _createSuper$d(Accordeon);

    function Accordeon(options) {
      var _this;

      _classCallCheck(this, Accordeon);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$d, create_fragment$d, safe_not_equal, {
        reduit: 0,
        titre: 1,
        contenu: 2,
        tagTitre: 3
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(Accordeon, [{
      key: "reduit",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(reduit) {
        this.$$set({
          reduit: reduit
        });
        flush();
      }
    }, {
      key: "titre",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "contenu",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(contenu) {
        this.$$set({
          contenu: contenu
        });
        flush();
      }
    }, {
      key: "tagTitre",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(tagTitre) {
        this.$$set({
          tagTitre: tagTitre
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["reduit", "titre", "contenu", "tagTitre"];
      }
    }]);

    return Accordeon;
  }(SvelteElement);

  customElements.define("utd-accordeon", Accordeon);

  function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$c = "src\\components\\avis.svelte"; // (22:6) {#if contenu}

  function create_if_block$9(ctx) {
    var html_tag;
    var html_anchor;
    var block = {
      c: function create() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m: function mount(target, anchor) {
        html_tag.m(
        /*contenu*/
        ctx[2], target, anchor);
        insert_dev(target, html_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*contenu*/
        4) html_tag.p(
        /*contenu*/
        ctx[2]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(html_anchor);
        if (detaching) html_tag.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$9.name,
      type: "if",
      source: "(22:6) {#if contenu}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$c(ctx) {
    var div4;
    var div1;
    var div0;
    var div0_class_value;
    var t0;
    var div3;
    var h2;
    var t1;
    var t2;
    var div2;
    var t3;
    var slot0;
    var t4;
    var slot1;
    var div4_class_value;
    var t5;
    var link;
    var if_block =
    /*contenu*/
    ctx[2] && create_if_block$9(ctx);
    var block = {
      c: function create() {
        div4 = element("div");
        div1 = element("div");
        div0 = element("div");
        t0 = space();
        div3 = element("div");
        h2 = element("h2");
        t1 = text(
        /*titre*/
        ctx[0]);
        t2 = space();
        div2 = element("div");
        if (if_block) if_block.c();
        t3 = space();
        slot0 = element("slot");
        t4 = space();
        slot1 = element("slot");
        t5 = space();
        link = element("link");
        this.c = noop;
        attr_dev(div0, "aria-hidden", "true");
        attr_dev(div0, "class", div0_class_value = "utd-icone-svg " +
        /*type*/
        ctx[1]);
        add_location(div0, file$c, 14, 4, 383);
        attr_dev(div1, "class", "zone-icone");
        add_location(div1, file$c, 13, 2, 353);
        attr_dev(h2, "class", "titre");
        add_location(h2, file$c, 17, 4, 493);
        add_location(slot0, file$c, 24, 6, 635);
        attr_dev(slot1, "name", "contenu");
        add_location(slot1, file$c, 25, 6, 651);
        attr_dev(div2, "class", "texte");
        add_location(div2, file$c, 20, 4, 543);
        attr_dev(div3, "class", "contenu zone-html");
        add_location(div3, file$c, 16, 2, 456);
        attr_dev(div4, "class", div4_class_value = "utd-component utd-avis " +
        /*type*/
        ctx[1]);
        attr_dev(div4, "tabindex", "0");
        add_location(div4, file$c, 12, 0, 293);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$c, 30, 0, 708);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div4, anchor);
        append_dev(div4, div1);
        append_dev(div1, div0);
        append_dev(div4, t0);
        append_dev(div4, div3);
        append_dev(div3, h2);
        append_dev(h2, t1);
        append_dev(div3, t2);
        append_dev(div3, div2);
        if (if_block) if_block.m(div2, null);
        append_dev(div2, t3);
        append_dev(div2, slot0);
        append_dev(div2, t4);
        append_dev(div2, slot1);
        insert_dev(target, t5, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (dirty &
        /*type*/
        2 && div0_class_value !== (div0_class_value = "utd-icone-svg " +
        /*type*/
        ctx[1])) {
          attr_dev(div0, "class", div0_class_value);
        }

        if (dirty &
        /*titre*/
        1) set_data_dev(t1,
        /*titre*/
        ctx[0]);

        if (
        /*contenu*/
        ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block$9(ctx);
            if_block.c();
            if_block.m(div2, t3);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty &
        /*type*/
        2 && div4_class_value !== (div4_class_value = "utd-component utd-avis " +
        /*type*/
        ctx[1])) {
          attr_dev(div4, "class", div4_class_value);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div4);
        if (if_block) if_block.d();
        if (detaching) detach_dev(t5);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$c.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$c($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-avis', slots, []);
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? "" : _$$props$titre;
    var _$$props$type = $$props.type,
        type = _$$props$type === void 0 ? "information" : _$$props$type;
    var _$$props$contenu = $$props.contenu,
        contenu = _$$props$contenu === void 0 ? "" : _$$props$contenu;
    var writable_props = ['titre', 'type', 'contenu'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-avis> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('type' in $$props) $$invalidate(1, type = $$props.type);
      if ('contenu' in $$props) $$invalidate(2, contenu = $$props.contenu);
    };

    $$self.$capture_state = function () {
      return {
        Utils: Utils,
        titre: titre,
        type: type,
        contenu: contenu
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('type' in $$props) $$invalidate(1, type = $$props.type);
      if ('contenu' in $$props) $$invalidate(2, contenu = $$props.contenu);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [titre, type, contenu];
  }

  var Avis = /*#__PURE__*/function (_SvelteElement) {
    _inherits(Avis, _SvelteElement);

    var _super = _createSuper$c(Avis);

    function Avis(options) {
      var _this;

      _classCallCheck(this, Avis);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$c, create_fragment$c, safe_not_equal, {
        titre: 0,
        type: 1,
        contenu: 2
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(Avis, [{
      key: "titre",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "type",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(type) {
        this.$$set({
          type: type
        });
        flush();
      }
    }, {
      key: "contenu",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(contenu) {
        this.$$set({
          contenu: contenu
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["titre", "type", "contenu"];
      }
    }]);

    return Avis;
  }(SvelteElement);

  customElements.define("utd-avis", Avis);

  function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$b = "src\\components\\champForm.svelte";

  function create_fragment$b(ctx) {
    var slot;
    var t;
    var link;
    var block = {
      c: function create() {
        slot = element("slot");
        t = space();
        link = element("link");
        this.c = noop;
        add_location(slot, file$b, 389, 0, 11642);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$b, 391, 0, 11653);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, slot, anchor);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);
      },
      p: noop,
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(slot);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$b.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$b($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-champ-form', slots, []);
    var _$$props$obligatoire = $$props.obligatoire,
        obligatoire = _$$props$obligatoire === void 0 ? "false" : _$$props$obligatoire;
    var _$$props$invalide = $$props.invalide,
        invalide = _$$props$invalide === void 0 ? "false" : _$$props$invalide;
    var _$$props$format = $$props.format,
        format = _$$props$format === void 0 ? null : _$$props$format;
    var _$$props$libelle = $$props.libelle,
        libelle = _$$props$libelle === void 0 ? "" : _$$props$libelle;
    var _$$props$precision = $$props.precision,
        precision = _$$props$precision === void 0 ? "" : _$$props$precision;
    var _$$props$messageErreu = $$props.messageErreur,
        messageErreur = _$$props$messageErreu === void 0 ? "" : _$$props$messageErreu;
    var mounted = false;
    var typeChamp = null;
    var elementLabel = null;
    var elementWrapper = null;
    var elementIndicateurObligatoire = null;
    var elementObligatoireTexte = null;
    var elementChamp = null;
    var elementPrecision = null;
    var elementErreur = null;
    var idElementErreur = null;
    var idChamp = Utils.genererId();
    var idParentUtd = Utils.genererId();
    var idLabelInitial = Utils.genererId();
    var idPrecisionInitial = Utils.genererId();
    var idErreurInitial = Utils.genererId();
    var thisComponent = get_current_component();
    var texteSrChampObligatoire = Utils.obtenirLanguePage() === 'fr' ? ' obligatoire ' : ' required ';
    /* ===========================================================================================
     RÉFÉRENCES
    
     - Liste de boutons radio et checkbox
       https://blog.tenon.io/accessible-validation-of-checkbox-and-radiobutton-groups/
    
    =============================================================================================*/

    onMount(function () {
      typeChamp = obtenirTypeChamp();
      mounted = true;

      if (typeChamp) {
        wrapperControles();
        gererChamp();
        gererLabel();
        gererChampObligatoire();

        if (typeChamp !== 'checkbox-seul') {
          gererPrecision();
        }

        gererErreur();
      }
    });

    function wrapperControles() {
      elementWrapper = document.createElement('div');
      var classeType = typeChamp === 'checkbox-seul' ? 'checkbox' : typeChamp;
      elementWrapper.classList.add('utd-form-group', classeType);
      thisComponent.childNodes.forEach(function (element) {
        elementWrapper.append(element);

        if (typeChamp === 'radio') {
          elementWrapper.setAttribute('role', 'radiogroup');
        }

        if (typeChamp === 'checkbox') {
          elementWrapper.setAttribute('role', 'group');
        }
      });

      if (format) {
        elementWrapper.classList.add(format);
      }

      thisComponent.prepend(elementWrapper);
    }

    function gererChamp() {
      elementChamp.id = elementChamp.id || idChamp;
      var idUtd = thisComponent.id || idParentUtd;
      elementChamp.setAttribute('idutd', idUtd);
      thisComponent.id = idUtd;

      if (typeChamp === 'standard' || typeChamp === 'select' || typeChamp === 'textarea') {
        elementChamp.classList.add('utd-form-control');

        if (format) {
          elementChamp.classList.add(format);
        }
      }
    }

    function obtenirTypeChamp() {
      var input = thisComponent.querySelector("input");

      if (input) {
        elementChamp = input;
        var type = input.getAttribute("type");

        if (type === 'radio') {
          return type;
        } else if (type === 'checkbox') {
          return thisComponent.querySelectorAll("input").length > 1 ? 'checkbox' : 'checkbox-seul';
        } else if (type === 'button' || type === 'submit') {
          return null;
        } else {
          return 'standard';
        }
      } else if (thisComponent.querySelector("textarea")) {
        elementChamp = thisComponent.querySelector("textarea");
        return 'standard';
      } else if (thisComponent.querySelector("select")) {
        elementChamp = thisComponent.querySelector("select");
        return 'select';
      } else {
        return null;
      }
    }

    function gererLabel() {
      if (!mounted) {
        return;
      }

      if (estGroupeControles()) {
        elementLabel = thisComponent.querySelector(".label");
      } else {
        elementLabel = thisComponent.querySelector("label");
      }

      if (elementLabel) {
        //Le label existe déjà. On s'assure qu'il est bien lié au champ.
        if (estGroupeControles()) {
          if (!elementLabel.id) {
            elementLabel.id = idLabelInitial;
          }

          ajusterChampAriaDescribedBy('ajout', elementLabel.id);
        } else {
          elementLabel.setAttribute('for', elementChamp.id);
        }

        if (libelle) {
          elementLabel.innerText = libelle;
        }
      } else if (libelle) {
        //Le contrôle label n'existe pas      
        var _element;

        if (estGroupeControles()) {
          _element = document.createElement('span');

          _element.classList.add('label');

          _element.id = idLabelInitial;
          ajusterChampAriaDescribedBy('ajout', _element.id, typeChamp === 'radio' ? 'aria-labelledby' : null);
        } else {
          _element = document.createElement('label');

          _element.setAttribute('for', elementChamp.id);
        }

        _element.innerText = libelle;
        elementWrapper.prepend(_element);
        elementLabel = _element;
      }
    }

    function gererPrecision() {
      if (!mounted) {
        return;
      }

      if (elementLabel) {
        elementPrecision = thisComponent.querySelector(".utd-precision");

        if (precision) {
          if (elementPrecision) {
            elementPrecision.id = elementPrecision.id || idPrecisionInitial;
          } else {
            var span = document.createElement('span');
            span.classList.add("utd-precision");
            span.id = idPrecisionInitial;
            elementPrecision = span;
            elementLabel.after(elementPrecision);
          }

          elementPrecision.innerText = precision;
          ajusterChampAriaDescribedBy('ajout', elementPrecision.id);
        } else {
          //Pas de précision en paramètre
          if (elementPrecision) {
            //Contrôle précision dans le HTML
            elementPrecision.id = elementPrecision.id || idPrecisionInitial;
            ajusterChampAriaDescribedBy('ajout', elementPrecision.id);
          } else {
            //Pas de contrôle de précision dans le html, on retire la précision du aria-describedby
            ajusterChampAriaDescribedBy('retrait', idPrecisionInitial);
          }
        }
      }
    }

    function ajusterChampAriaDescribedBy() {
      var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ajout';
      var valeur = arguments.length > 1 ? arguments[1] : undefined;
      var aria = arguments.length > 2 ? arguments[2] : undefined;
      var attribut;

      if (aria) {
        attribut = aria;
      } else {
        attribut = typeChamp === 'checkbox' ? 'aria-labelledby' : 'aria-describedby';
      }

      var controle = elementChamp;

      if (estGroupeControles()) {
        controle = elementWrapper;
      }

      var valeurActuelle = controle.getAttribute(attribut) || '';
      var nouvelleValeur = '';

      if (operation === 'ajout') {
        nouvelleValeur = valeurActuelle + (valeurActuelle.indexOf(valeur) >= 0 ? '' : ' ' + valeur);
      } else {
        nouvelleValeur = valeurActuelle.replace(valeur, '');
      }

      if (nouvelleValeur.trim()) {
        controle.setAttribute(attribut, nouvelleValeur.trim());
      } else {
        controle.removeAttribute(attribut);
      }
    }

    function gererChampObligatoire() {
      if (!mounted) {
        return;
      }

      if (elementLabel) {
        elementIndicateurObligatoire = thisComponent.querySelector(".utd-icone-champ-requis");
        elementObligatoireTexte = thisComponent.querySelector(".texte-obligatoire");

        if (obligatoire === 'true') {
          if (typeChamp === 'checkbox') {
            //Pour les listes de checkbox, on doit ajouter un texte hors écran afin d'indiquer que le champ est obligatoire (aria-required ne fonctionne pas pour ces types de champs).
            elementObligatoireTexte = thisComponent.querySelector(".texte-obligatoire");

            if (!elementObligatoireTexte) {
              elementObligatoireTexte = document.createElement('span');
              elementObligatoireTexte.classList.add("texte-obligatoire", "utd-sr-only");
              elementObligatoireTexte.innerHTML = texteSrChampObligatoire;
              elementLabel.append(elementObligatoireTexte);
            }
          }

          if (!elementIndicateurObligatoire) {
            elementIndicateurObligatoire = document.createElement('span');
            elementIndicateurObligatoire.classList.add("utd-icone-champ-requis");
            elementIndicateurObligatoire.innerHTML = "*";
            elementLabel.append(elementIndicateurObligatoire);
          }

          elementIndicateurObligatoire.setAttribute('aria-hidden', 'true');
        } else {
          if (elementIndicateurObligatoire) {
            elementIndicateurObligatoire.remove();
          }

          if (elementObligatoireTexte) {
            elementObligatoireTexte.remove();
          }
        }
      }

      if (obligatoire === 'true' && typeChamp !== 'checkbox') {
        if (typeChamp === 'radio') {
          elementWrapper.setAttribute('aria-required', 'true');
        } else {
          elementChamp.setAttribute('aria-required', 'true');
        }
      } else {
        if (typeChamp === 'radio') {
          elementWrapper.removeAttribute('aria-required');
        } else {
          elementChamp.removeAttribute('aria-required');
        }
      }
    }

    function gererErreur() {
      if (!mounted) {
        return;
      }

      var controle = elementChamp;

      if (estGroupeControles()) {
        controle = elementWrapper;
      }

      elementErreur = thisComponent.querySelector(".utd-erreur-champ");

      if (invalide === 'true') {
        if (elementErreur) {
          elementErreur.id = elementErreur.id || idErreurInitial;
        } else {
          var span = document.createElement('span');
          span.classList.add("utd-erreur-champ");
          span.id = idErreurInitial;
          elementErreur = span;

          if (typeChamp === 'checkbox-seul') {
            elementLabel.after(elementErreur);
          } else {
            if (estGroupeControles()) {
              elementWrapper.append(elementErreur);
            } else {
              var listeDeroulante = thisComponent.querySelector("utd-liste-deroulante");

              if (listeDeroulante) {
                listeDeroulante.after(elementErreur);
              } else {
                elementChamp.after(elementErreur);
              }
            }
          }
        }

        if (messageErreur) {
          elementErreur.innerText = messageErreur;
        }

        idElementErreur = elementErreur.id;
        var attribut = typeChamp === 'checkbox' ? 'aria-labelledby' : 'aria-describedby';
        var descByAvant = controle.getAttribute(attribut);
        controle.setAttribute(attribut, elementErreur.id);

        if (typeChamp !== 'checkbox') {
          controle.setAttribute('aria-invalid', 'true');
        } //setTimeout nécessaire pour lecteur écran


        if (descByAvant) {
          setTimeout(function () {
            controle.setAttribute(attribut, "".concat(descByAvant, " ").concat(idElementErreur));
          }, 100);
        }

        elementErreur.classList.remove('utd-d-none');
      } else {
        controle.removeAttribute('aria-invalid');

        if (elementErreur) {
          elementErreur.classList.add('utd-d-none');

          if (messageErreur) {
            elementErreur.innerText = messageErreur;
          }
        }

        if (idElementErreur) {
          setTimeout(function () {
            ajusterChampAriaDescribedBy('retrait', idElementErreur);
          }, 100);
        }
      }
    }

    function estGroupeControles() {
      return typeChamp === 'checkbox' || typeChamp === 'radio';
    }

    var writable_props = ['obligatoire', 'invalide', 'format', 'libelle', 'precision', 'messageErreur'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-champ-form> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('obligatoire' in $$props) $$invalidate(0, obligatoire = $$props.obligatoire);
      if ('invalide' in $$props) $$invalidate(1, invalide = $$props.invalide);
      if ('format' in $$props) $$invalidate(2, format = $$props.format);
      if ('libelle' in $$props) $$invalidate(3, libelle = $$props.libelle);
      if ('precision' in $$props) $$invalidate(4, precision = $$props.precision);
      if ('messageErreur' in $$props) $$invalidate(5, messageErreur = $$props.messageErreur);
    };

    $$self.$capture_state = function () {
      return {
        Utils: Utils,
        get_current_component: get_current_component,
        onMount: onMount,
        obligatoire: obligatoire,
        invalide: invalide,
        format: format,
        libelle: libelle,
        precision: precision,
        messageErreur: messageErreur,
        mounted: mounted,
        typeChamp: typeChamp,
        elementLabel: elementLabel,
        elementWrapper: elementWrapper,
        elementIndicateurObligatoire: elementIndicateurObligatoire,
        elementObligatoireTexte: elementObligatoireTexte,
        elementChamp: elementChamp,
        elementPrecision: elementPrecision,
        elementErreur: elementErreur,
        idElementErreur: idElementErreur,
        idChamp: idChamp,
        idParentUtd: idParentUtd,
        idLabelInitial: idLabelInitial,
        idPrecisionInitial: idPrecisionInitial,
        idErreurInitial: idErreurInitial,
        thisComponent: thisComponent,
        texteSrChampObligatoire: texteSrChampObligatoire,
        wrapperControles: wrapperControles,
        gererChamp: gererChamp,
        obtenirTypeChamp: obtenirTypeChamp,
        gererLabel: gererLabel,
        gererPrecision: gererPrecision,
        ajusterChampAriaDescribedBy: ajusterChampAriaDescribedBy,
        gererChampObligatoire: gererChampObligatoire,
        gererErreur: gererErreur,
        estGroupeControles: estGroupeControles
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('obligatoire' in $$props) $$invalidate(0, obligatoire = $$props.obligatoire);
      if ('invalide' in $$props) $$invalidate(1, invalide = $$props.invalide);
      if ('format' in $$props) $$invalidate(2, format = $$props.format);
      if ('libelle' in $$props) $$invalidate(3, libelle = $$props.libelle);
      if ('precision' in $$props) $$invalidate(4, precision = $$props.precision);
      if ('messageErreur' in $$props) $$invalidate(5, messageErreur = $$props.messageErreur);
      if ('mounted' in $$props) mounted = $$props.mounted;
      if ('typeChamp' in $$props) typeChamp = $$props.typeChamp;
      if ('elementLabel' in $$props) elementLabel = $$props.elementLabel;
      if ('elementWrapper' in $$props) elementWrapper = $$props.elementWrapper;
      if ('elementIndicateurObligatoire' in $$props) elementIndicateurObligatoire = $$props.elementIndicateurObligatoire;
      if ('elementObligatoireTexte' in $$props) elementObligatoireTexte = $$props.elementObligatoireTexte;
      if ('elementChamp' in $$props) elementChamp = $$props.elementChamp;
      if ('elementPrecision' in $$props) elementPrecision = $$props.elementPrecision;
      if ('elementErreur' in $$props) elementErreur = $$props.elementErreur;
      if ('idElementErreur' in $$props) idElementErreur = $$props.idElementErreur;
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    $$self.$$.update = function () {
      if ($$self.$$.dirty[0] &
      /*libelle*/
      8) {
        gererLabel();
      }

      if ($$self.$$.dirty[0] &
      /*obligatoire*/
      1) {
        gererChampObligatoire();
      }

      if ($$self.$$.dirty[0] &
      /*precision*/
      16) {
        gererPrecision();
      }

      if ($$self.$$.dirty[0] &
      /*messageErreur*/
      32) {
        gererErreur();
      }

      if ($$self.$$.dirty[0] &
      /*invalide*/
      2) {
        gererErreur();
      }
    };

    return [obligatoire, invalide, format, libelle, precision, messageErreur];
  }

  var ChampForm = /*#__PURE__*/function (_SvelteElement) {
    _inherits(ChampForm, _SvelteElement);

    var _super = _createSuper$b(ChampForm);

    function ChampForm(options) {
      var _this;

      _classCallCheck(this, ChampForm);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$b, create_fragment$b, safe_not_equal, {
        obligatoire: 0,
        invalide: 1,
        format: 2,
        libelle: 3,
        precision: 4,
        messageErreur: 5
      }, null, [-1, -1]);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(ChampForm, [{
      key: "obligatoire",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(obligatoire) {
        this.$$set({
          obligatoire: obligatoire
        });
        flush();
      }
    }, {
      key: "invalide",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(invalide) {
        this.$$set({
          invalide: invalide
        });
        flush();
      }
    }, {
      key: "format",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(format) {
        this.$$set({
          format: format
        });
        flush();
      }
    }, {
      key: "libelle",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(libelle) {
        this.$$set({
          libelle: libelle
        });
        flush();
      }
    }, {
      key: "precision",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(precision) {
        this.$$set({
          precision: precision
        });
        flush();
      }
    }, {
      key: "messageErreur",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(messageErreur) {
        this.$$set({
          messageErreur: messageErreur
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["obligatoire", "invalide", "format", "libelle", "precision", "messageErreur"];
      }
    }]);

    return ChampForm;
  }(SvelteElement);

  customElements.define("utd-champ-form", ChampForm);

  function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$a = "src\\components\\dialogueModal.svelte"; // (171:0) {#if estModaleAffichee}

  function create_if_block$8(ctx) {
    var div0;
    var t0;
    var div5;
    var div4;
    var button;
    var span;
    var t1;
    var div3;
    var div1;
    var t2;
    var h1;
    var t3;
    var div1_class_value;
    var t4;
    var div2;
    var slot0;
    var t5;
    var slot1;
    var t6;
    var show_if = Utils.slotExiste(
    /*slots*/
    ctx[8], 'pied');
    var div5_aria_describedby_value;
    var div5_class_value;
    var div5_intro;
    var div5_outro;
    var current;
    var mounted;
    var dispose;
    var if_block0 =
    /*type*/
    ctx[1] && create_if_block_2$4(ctx);
    var if_block1 = show_if && create_if_block_1$5(ctx);
    var block = {
      c: function create() {
        div0 = element("div");
        t0 = space();
        div5 = element("div");
        div4 = element("div");
        button = element("button");
        span = element("span");
        t1 = space();
        div3 = element("div");
        div1 = element("div");
        if (if_block0) if_block0.c();
        t2 = space();
        h1 = element("h1");
        t3 = text(
        /*titre*/
        ctx[2]);
        t4 = space();
        div2 = element("div");
        slot0 = element("slot");
        t5 = space();
        slot1 = element("slot");
        t6 = space();
        if (if_block1) if_block1.c();
        attr_dev(div0, "class", "utd-backdrop");
        add_location(div0, file$a, 171, 2, 6200);
        attr_dev(span, "aria-hidden", "true");
        attr_dev(span, "class", "utd-icone-svg x-fermer-bleu");
        add_location(span, file$a, 195, 8, 7186);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "close");
        attr_dev(button, "aria-label",
        /*srBoutonFermer*/
        ctx[3]);
        add_location(button, file$a, 189, 8, 7021);
        attr_dev(h1, "id",
        /*idEntete*/
        ctx[10]);
        attr_dev(h1, "class", "titre-dialog");
        add_location(h1, file$a, 205, 10, 7513);
        attr_dev(div1, "class", div1_class_value = "entete " + (
        /*type*/
        ctx[1] ? 'avec-type' : ''));
        add_location(div1, file$a, 201, 8, 7338);
        add_location(slot0, file$a, 210, 10, 7661);
        attr_dev(slot1, "name", "contenu");
        add_location(slot1, file$a, 211, 10, 7680);
        attr_dev(div2, "class", "corps");
        attr_dev(div2, "id",
        /*idCorps*/
        ctx[11]);
        add_location(div2, file$a, 209, 8, 7617);
        attr_dev(div3, "class", "principal");
        add_location(div3, file$a, 200, 6, 7305);
        attr_dev(div4, "class", "conteneur");
        add_location(div4, file$a, 188, 4, 6988);
        attr_dev(div5, "aria-labelledby",
        /*idEntete*/
        ctx[10]);
        attr_dev(div5, "aria-describedby", div5_aria_describedby_value =
        /*estfenetremessage*/
        ctx[0] === 'true' ?
        /*idCorps*/
        ctx[11] : null);
        attr_dev(div5, "class", div5_class_value = "utd-component utd-dialog " + (
        /*estfenetremessage*/
        ctx[0] === 'true' ? 'fenetre-message' : '') + " " + (
        /*boutonsTexteLong*/
        ctx[4] === 'true' ? 'boutons-texte-long' : '') + " " + (
        /*affichageLateral*/
        ctx[6] === 'true' ? 'affichage-lateral' : '') + " " + (
        /*forcerBoutonsInline*/
        ctx[5] === 'true' ? 'boutons-inline' : ''));
        attr_dev(div5, "id",
        /*idModale*/
        ctx[9]);
        attr_dev(div5, "aria-modal", "true");
        attr_dev(div5, "role", "dialog");
        add_location(div5, file$a, 172, 2, 6280);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div0, anchor);
        insert_dev(target, t0, anchor);
        insert_dev(target, div5, anchor);
        append_dev(div5, div4);
        append_dev(div4, button);
        append_dev(button, span);
        append_dev(div4, t1);
        append_dev(div4, div3);
        append_dev(div3, div1);
        if (if_block0) if_block0.m(div1, null);
        append_dev(div1, t2);
        append_dev(div1, h1);
        append_dev(h1, t3);
        append_dev(div3, t4);
        append_dev(div3, div2);
        append_dev(div2, slot0);
        append_dev(div2, t5);
        append_dev(div2, slot1);
        append_dev(div3, t6);
        if (if_block1) if_block1.m(div3, null);
        current = true;

        if (!mounted) {
          dispose = [listen_dev(div0, "click",
          /*click_handler*/
          ctx[24], false, false, false), listen_dev(button, "click",
          /*click_handler_1*/
          ctx[25], false, false, false), listen_dev(div5, "click",
          /*clickModale*/
          ctx[16], false, false, false), listen_dev(div5, "keydown",
          /*keydown*/
          ctx[15], false, false, false), listen_dev(div5, "introstart",
          /*ajusterModaleDebutAffichage*/
          ctx[18], false, false, false), listen_dev(div5, "introend",
          /*ajusterModaleFinAffichage*/
          ctx[19], false, false, false), listen_dev(div5, "outroend",
          /*finAnimationFermeture*/
          ctx[17], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (!current || dirty[0] &
        /*srBoutonFermer*/
        8) {
          attr_dev(button, "aria-label",
          /*srBoutonFermer*/
          ctx[3]);
        }

        if (
        /*type*/
        ctx[1]) {
          if (if_block0) {
            if_block0.p(ctx, dirty);
          } else {
            if_block0 = create_if_block_2$4(ctx);
            if_block0.c();
            if_block0.m(div1, t2);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (!current || dirty[0] &
        /*titre*/
        4) set_data_dev(t3,
        /*titre*/
        ctx[2]);

        if (!current || dirty[0] &
        /*type*/
        2 && div1_class_value !== (div1_class_value = "entete " + (
        /*type*/
        ctx[1] ? 'avec-type' : ''))) {
          attr_dev(div1, "class", div1_class_value);
        }

        if (dirty[0] &
        /*slots*/
        256) show_if = Utils.slotExiste(
        /*slots*/
        ctx[8], 'pied');

        if (show_if) {
          if (if_block1) ; else {
            if_block1 = create_if_block_1$5(ctx);
            if_block1.c();
            if_block1.m(div3, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }

        if (!current || dirty[0] &
        /*estfenetremessage*/
        1 && div5_aria_describedby_value !== (div5_aria_describedby_value =
        /*estfenetremessage*/
        ctx[0] === 'true' ?
        /*idCorps*/
        ctx[11] : null)) {
          attr_dev(div5, "aria-describedby", div5_aria_describedby_value);
        }

        if (!current || dirty[0] &
        /*estfenetremessage, boutonsTexteLong, affichageLateral, forcerBoutonsInline*/
        113 && div5_class_value !== (div5_class_value = "utd-component utd-dialog " + (
        /*estfenetremessage*/
        ctx[0] === 'true' ? 'fenetre-message' : '') + " " + (
        /*boutonsTexteLong*/
        ctx[4] === 'true' ? 'boutons-texte-long' : '') + " " + (
        /*affichageLateral*/
        ctx[6] === 'true' ? 'affichage-lateral' : '') + " " + (
        /*forcerBoutonsInline*/
        ctx[5] === 'true' ? 'boutons-inline' : ''))) {
          attr_dev(div5, "class", div5_class_value);
        }
      },
      i: function intro(local) {
        if (current) return;
        add_render_callback(function () {
          if (div5_outro) div5_outro.end(1);
          div5_intro = create_in_transition(div5,
          /*animationAffichageOuverture*/
          ctx[13], {});
          div5_intro.start();
        });
        current = true;
      },
      o: function outro(local) {
        if (div5_intro) div5_intro.invalidate();
        div5_outro = create_out_transition(div5,
        /*animationAffichageFermeture*/
        ctx[14], {});
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div0);
        if (detaching) detach_dev(t0);
        if (detaching) detach_dev(div5);
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
        if (detaching && div5_outro) div5_outro.end();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$8.name,
      type: "if",
      source: "(171:0) {#if estModaleAffichee}",
      ctx: ctx
    });
    return block;
  } // (203:10) {#if type}


  function create_if_block_2$4(ctx) {
    var span;
    var span_class_value;
    var block = {
      c: function create() {
        span = element("span");
        attr_dev(span, "class", span_class_value = "utd-icone-svg " +
        /*type*/
        ctx[1]);
        attr_dev(span, "aria-hidden", "true");
        add_location(span, file$a, 203, 12, 7420);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*type*/
        2 && span_class_value !== (span_class_value = "utd-icone-svg " +
        /*type*/
        ctx[1])) {
          attr_dev(span, "class", span_class_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$4.name,
      type: "if",
      source: "(203:10) {#if type}",
      ctx: ctx
    });
    return block;
  } // (214:8) {#if Utils.slotExiste(slots, 'pied')}


  function create_if_block_1$5(ctx) {
    var div;
    var slot;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        attr_dev(slot, "name", "pied");
        add_location(slot, file$a, 215, 12, 7810);
        attr_dev(div, "class", "pied");
        add_location(div, file$a, 214, 10, 7778);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$5.name,
      type: "if",
      source: "(214:8) {#if Utils.slotExiste(slots, 'pied')}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$a(ctx) {
    var t;
    var link;
    var current;
    var if_block =
    /*estModaleAffichee*/
    ctx[7] && create_if_block$8(ctx);
    var block = {
      c: function create() {
        if (if_block) if_block.c();
        t = space();
        link = element("link");
        this.c = noop;
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$a, 223, 0, 7920);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        if (if_block) if_block.m(target, anchor);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);
        current = true;
      },
      p: function update(ctx, dirty) {
        if (
        /*estModaleAffichee*/
        ctx[7]) {
          if (if_block) {
            if_block.p(ctx, dirty);

            if (dirty[0] &
            /*estModaleAffichee*/
            128) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block$8(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(t.parentNode, t);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, function () {
            if_block = null;
          });
          check_outros();
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (if_block) if_block.d(detaching);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$a.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function estBouton(element) {
    var tag = element.tagName.toLowerCase();
    return tag === 'button' || element.getAttribute('type') === 'submit';
  }

  function instance$a($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots$1 = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-dialog', slots$1, []);
    var _$$props$afficher = $$props.afficher,
        afficher = _$$props$afficher === void 0 ? 'false' : _$$props$afficher;
    var _$$props$type = $$props.type,
        type = _$$props$type === void 0 ? '' : _$$props$type;
    var _$$props$estfenetreme = $$props.estfenetremessage,
        estfenetremessage = _$$props$estfenetreme === void 0 ? 'false' : _$$props$estfenetreme; //Privée (utilisée dans notre plugin message)

    var _$$props$raisonFermet = $$props.raisonFermeture,
        raisonFermeture = _$$props$raisonFermet === void 0 ? '' : _$$props$raisonFermet; //Privée (utilisée dans notre plugin message)

    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? '' : _$$props$titre;
    var _$$props$srBoutonFerm = $$props.srBoutonFermer,
        srBoutonFermer = _$$props$srBoutonFerm === void 0 ? Utils.obtenirLanguePage() === "fr" ? "Fermer" : "Close" : _$$props$srBoutonFerm;
    var _$$props$idFocusOuver = $$props.idFocusOuverture,
        idFocusOuverture = _$$props$idFocusOuver === void 0 ? '' : _$$props$idFocusOuver;
    var _$$props$idFocusFerme = $$props.idFocusFermeture,
        idFocusFermeture = _$$props$idFocusFerme === void 0 ? '' : _$$props$idFocusFerme;
    var _$$props$boutonsTexte = $$props.boutonsTexteLong,
        boutonsTexteLong = _$$props$boutonsTexte === void 0 ? 'false' : _$$props$boutonsTexte;
    var _$$props$forcerBouton = $$props.forcerBoutonsInline,
        forcerBoutonsInline = _$$props$forcerBouton === void 0 ? 'false' : _$$props$forcerBouton;
    var _$$props$affichageLat = $$props.affichageLateral,
        affichageLateral = _$$props$affichageLat === void 0 ? 'false' : _$$props$affichageLat;
    var idModale = Utils.genererId();
    var idEntete = Utils.genererId();
    var idCorps = Utils.genererId();
    var estModaleAffichee = afficher === 'true';
    var thisComponent = get_current_component();
    var html;
    var body;
    var slots = [];
    var mounted = false;
    onMount(function () {
      html = thisComponent.getRootNode().getElementsByTagName("html")[0];
      body = thisComponent.getRootNode().getElementsByTagName("body")[0];
      $$invalidate(8, slots = Array.from(thisComponent.querySelectorAll('[slot]')));
      mounted = true;

      if (Utils.estMobile()) {
        html.classList.add("est-mobile");
      }
    });

    function masquerModale(raisonFermetureModale) {
      $$invalidate(7, estModaleAffichee = false);
      $$invalidate(20, afficher = 'false'); //Si une raison de fermeture est reçue en param, on l'utilise sinon on prend la raison de fermeture qui est sur la modale "raisonFermeture" qui va contenir une raison de fermeture externe à la modale (ex. clic sur bouton primaire ou secondaire)

      var raison = raisonFermetureModale || raisonFermeture; //On redonne le focus au contrôle spécifié (normalement celui qui a initié l'affichage de la fenêtre modale)

      var controleFocus = thisComponent.getRootNode().getElementById(idFocusFermeture);

      if (controleFocus) {
        controleFocus.focus();
      }

      Utils.dispatchWcEvent(thisComponent, "fermeture", {
        raisonFermeture: raison
      });
    }

    function animationAffichageOuverture(node) {
      return affichageLateral === 'false' ? fade(node, {
        duration: 250
      }) : fly(node, {
        x: 200,
        duration: 250
      });
    }

    function animationAffichageFermeture(node) {
      return affichageLateral === 'false' ? fade(node, {
        y: 200,
        duration: 250
      }) : fly(node, {
        x: 200,
        duration: 250
      });
    } // Exécuté lorsque la valeur de la prop "afficher" change


    function toggleAfficher() {
      if (mounted) {
        if (afficher === 'true') {
          $$invalidate(21, raisonFermeture = '');
          Utils.ajusterInterfaceAvantAffichageModale(html, body);
          $$invalidate(7, estModaleAffichee = true);
        } else {
          if (estModaleAffichee) {
            masquerModale();
          }
        }
      }
    }

    function keydown(e) {
      if (e.key === "Escape") {
        masquerModale('escape');
      }
    }

    function clickModale(e) {
      if (e.target === e.currentTarget) {
        masquerModale('clickBackdrop');
      }
    }

    function finAnimationFermeture(e) {
      Utils.ajusterInterfaceApresFermetureModale(html, body, thisComponent.shadowRoot.getElementById(idModale));
      Utils.dispatchWcEvent(thisComponent, "apresFermeture");
    }

    function ajusterModaleDebutAffichage(e) {
      var modale = thisComponent.shadowRoot.getElementById(idModale);
      donnerfocusPremierElementFocusable(modale);
      Utils.conserverFocusElement(modale, thisComponent);
    }

    function ajusterModaleFinAffichage(e) {
      var modale = thisComponent.shadowRoot.getElementById(idModale);
      Utils.ajusterInterfacePendantAffichageModale(body, modale); //On force un scrollTop ici car Android ne semble pas supporter le preventScroll de la méthode focus (mais selon la doc il devrait). SOLUTION EN ATTENDANT MIEUX.

      modale.scrollTop = 0;
    }

    function donnerfocusPremierElementFocusable(modale) {
      var premierElementFocusable = null;

      if (estfenetremessage === 'true') {
        premierElementFocusable = thisComponent.querySelector('.utd-btn.primaire');
      } else {
        if (idFocusOuverture) {
          var controleFocusOuverture = document.getElementById(idFocusOuverture);

          if (controleFocusOuverture) {
            premierElementFocusable = controleFocusOuverture;
          }
        }

        if (!premierElementFocusable) {
          var elementsFocusablesShadow = Array.from(Utils.obtenirElementsFocusables(modale));
          var elementsFocusablesRoot = Array.from(Utils.obtenirElementsFocusables(thisComponent));
          var elementsFocusables = elementsFocusablesRoot.concat(elementsFocusablesShadow);
          premierElementFocusable = elementsFocusables[0]; //On force le mode "fenêtre de message" si le premier élément focusable est un bouton de la slot "pied"

          if (estBouton(premierElementFocusable)) {
            var slotPied = Utils.obtenirSlot(slots, 'pied');

            if (slotPied) {
              var boutonsSlotPied = slotPied.querySelectorAll('button, input[type="submit"]');

              if (boutonsSlotPied.length) {
                for (var i = 0; i < boutonsSlotPied.length - 1; i++) {
                  if (boutonsSlotPied[i] === premierElementFocusable) {
                    premierElementFocusable = thisComponent.querySelector('.utd-btn.primaire') || premierElementFocusable;
                    $$invalidate(0, estfenetremessage = 'true');
                    break;
                  }
                }
              }
            }
          }
        }
      }

      premierElementFocusable.focus({
        preventScroll: true
      });
    } //premierElementFocusable.focus()    


    var writable_props = ['afficher', 'type', 'estfenetremessage', 'raisonFermeture', 'titre', 'srBoutonFermer', 'idFocusOuverture', 'idFocusFermeture', 'boutonsTexteLong', 'forcerBoutonsInline', 'affichageLateral'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-dialog> was created with unknown prop '".concat(key, "'"));
    });

    var click_handler = function click_handler() {
      return masquerModale('clickBackdrop');
    };

    var click_handler_1 = function click_handler_1() {
      return masquerModale('boutonFermer');
    };

    $$self.$$set = function ($$props) {
      if ('afficher' in $$props) $$invalidate(20, afficher = $$props.afficher);
      if ('type' in $$props) $$invalidate(1, type = $$props.type);
      if ('estfenetremessage' in $$props) $$invalidate(0, estfenetremessage = $$props.estfenetremessage);
      if ('raisonFermeture' in $$props) $$invalidate(21, raisonFermeture = $$props.raisonFermeture);
      if ('titre' in $$props) $$invalidate(2, titre = $$props.titre);
      if ('srBoutonFermer' in $$props) $$invalidate(3, srBoutonFermer = $$props.srBoutonFermer);
      if ('idFocusOuverture' in $$props) $$invalidate(22, idFocusOuverture = $$props.idFocusOuverture);
      if ('idFocusFermeture' in $$props) $$invalidate(23, idFocusFermeture = $$props.idFocusFermeture);
      if ('boutonsTexteLong' in $$props) $$invalidate(4, boutonsTexteLong = $$props.boutonsTexteLong);
      if ('forcerBoutonsInline' in $$props) $$invalidate(5, forcerBoutonsInline = $$props.forcerBoutonsInline);
      if ('affichageLateral' in $$props) $$invalidate(6, affichageLateral = $$props.affichageLateral);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        fly: fly,
        fade: fade,
        get_current_component: get_current_component,
        Utils: Utils,
        afficher: afficher,
        type: type,
        estfenetremessage: estfenetremessage,
        raisonFermeture: raisonFermeture,
        titre: titre,
        srBoutonFermer: srBoutonFermer,
        idFocusOuverture: idFocusOuverture,
        idFocusFermeture: idFocusFermeture,
        boutonsTexteLong: boutonsTexteLong,
        forcerBoutonsInline: forcerBoutonsInline,
        affichageLateral: affichageLateral,
        idModale: idModale,
        idEntete: idEntete,
        idCorps: idCorps,
        estModaleAffichee: estModaleAffichee,
        thisComponent: thisComponent,
        html: html,
        body: body,
        slots: slots,
        mounted: mounted,
        masquerModale: masquerModale,
        animationAffichageOuverture: animationAffichageOuverture,
        animationAffichageFermeture: animationAffichageFermeture,
        toggleAfficher: toggleAfficher,
        keydown: keydown,
        clickModale: clickModale,
        finAnimationFermeture: finAnimationFermeture,
        ajusterModaleDebutAffichage: ajusterModaleDebutAffichage,
        ajusterModaleFinAffichage: ajusterModaleFinAffichage,
        estBouton: estBouton,
        donnerfocusPremierElementFocusable: donnerfocusPremierElementFocusable
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('afficher' in $$props) $$invalidate(20, afficher = $$props.afficher);
      if ('type' in $$props) $$invalidate(1, type = $$props.type);
      if ('estfenetremessage' in $$props) $$invalidate(0, estfenetremessage = $$props.estfenetremessage);
      if ('raisonFermeture' in $$props) $$invalidate(21, raisonFermeture = $$props.raisonFermeture);
      if ('titre' in $$props) $$invalidate(2, titre = $$props.titre);
      if ('srBoutonFermer' in $$props) $$invalidate(3, srBoutonFermer = $$props.srBoutonFermer);
      if ('idFocusOuverture' in $$props) $$invalidate(22, idFocusOuverture = $$props.idFocusOuverture);
      if ('idFocusFermeture' in $$props) $$invalidate(23, idFocusFermeture = $$props.idFocusFermeture);
      if ('boutonsTexteLong' in $$props) $$invalidate(4, boutonsTexteLong = $$props.boutonsTexteLong);
      if ('forcerBoutonsInline' in $$props) $$invalidate(5, forcerBoutonsInline = $$props.forcerBoutonsInline);
      if ('affichageLateral' in $$props) $$invalidate(6, affichageLateral = $$props.affichageLateral);
      if ('estModaleAffichee' in $$props) $$invalidate(7, estModaleAffichee = $$props.estModaleAffichee);
      if ('html' in $$props) html = $$props.html;
      if ('body' in $$props) body = $$props.body;
      if ('slots' in $$props) $$invalidate(8, slots = $$props.slots);
      if ('mounted' in $$props) mounted = $$props.mounted;
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    $$self.$$.update = function () {
      if ($$self.$$.dirty[0] &
      /*afficher*/
      1048576) {
        // Watch sur la prop afficher
        toggleAfficher();
      }
    };

    return [estfenetremessage, type, titre, srBoutonFermer, boutonsTexteLong, forcerBoutonsInline, affichageLateral, estModaleAffichee, slots, idModale, idEntete, idCorps, masquerModale, animationAffichageOuverture, animationAffichageFermeture, keydown, clickModale, finAnimationFermeture, ajusterModaleDebutAffichage, ajusterModaleFinAffichage, afficher, raisonFermeture, idFocusOuverture, idFocusFermeture, click_handler, click_handler_1];
  }

  var DialogueModal = /*#__PURE__*/function (_SvelteElement) {
    _inherits(DialogueModal, _SvelteElement);

    var _super = _createSuper$a(DialogueModal);

    function DialogueModal(options) {
      var _this;

      _classCallCheck(this, DialogueModal);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$a, create_fragment$a, safe_not_equal, {
        afficher: 20,
        type: 1,
        estfenetremessage: 0,
        raisonFermeture: 21,
        titre: 2,
        srBoutonFermer: 3,
        idFocusOuverture: 22,
        idFocusFermeture: 23,
        boutonsTexteLong: 4,
        forcerBoutonsInline: 5,
        affichageLateral: 6
      }, null, [-1, -1]);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(DialogueModal, [{
      key: "afficher",
      get: function get() {
        return this.$$.ctx[20];
      },
      set: function set(afficher) {
        this.$$set({
          afficher: afficher
        });
        flush();
      }
    }, {
      key: "type",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(type) {
        this.$$set({
          type: type
        });
        flush();
      }
    }, {
      key: "estfenetremessage",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(estfenetremessage) {
        this.$$set({
          estfenetremessage: estfenetremessage
        });
        flush();
      }
    }, {
      key: "raisonFermeture",
      get: function get() {
        return this.$$.ctx[21];
      },
      set: function set(raisonFermeture) {
        this.$$set({
          raisonFermeture: raisonFermeture
        });
        flush();
      }
    }, {
      key: "titre",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "srBoutonFermer",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(srBoutonFermer) {
        this.$$set({
          srBoutonFermer: srBoutonFermer
        });
        flush();
      }
    }, {
      key: "idFocusOuverture",
      get: function get() {
        return this.$$.ctx[22];
      },
      set: function set(idFocusOuverture) {
        this.$$set({
          idFocusOuverture: idFocusOuverture
        });
        flush();
      }
    }, {
      key: "idFocusFermeture",
      get: function get() {
        return this.$$.ctx[23];
      },
      set: function set(idFocusFermeture) {
        this.$$set({
          idFocusFermeture: idFocusFermeture
        });
        flush();
      }
    }, {
      key: "boutonsTexteLong",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(boutonsTexteLong) {
        this.$$set({
          boutonsTexteLong: boutonsTexteLong
        });
        flush();
      }
    }, {
      key: "forcerBoutonsInline",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(forcerBoutonsInline) {
        this.$$set({
          forcerBoutonsInline: forcerBoutonsInline
        });
        flush();
      }
    }, {
      key: "affichageLateral",
      get: function get() {
        return this.$$.ctx[6];
      },
      set: function set(affichageLateral) {
        this.$$set({
          affichageLateral: affichageLateral
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["afficher", "type", "estfenetremessage", "raisonFermeture", "titre", "srBoutonFermer", "idFocusOuverture", "idFocusFermeture", "boutonsTexteLong", "forcerBoutonsInline", "affichageLateral"];
      }
    }]);

    return DialogueModal;
  }(SvelteElement);

  customElements.define("utd-dialog", DialogueModal);

  function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$9 = "src\\components\\hautPage.svelte";

  function create_fragment$9(ctx) {
    var div1;
    var button;
    var div0;
    var span;
    var t;
    var link;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        div1 = element("div");
        button = element("button");
        div0 = element("div");
        span = element("span");
        t = space();
        link = element("link");
        this.c = noop;
        attr_dev(span, "aria-hidden", "true");
        attr_dev(span, "class", "utd-icone-svg fleche-haut-blanche");
        add_location(span, file$9, 72, 6, 2143);
        attr_dev(div0, "class", "contenu");
        add_location(div0, file$9, 71, 4, 2114);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "utd-btn primaire");
        attr_dev(button, "title",
        /*title*/
        ctx[0]);
        add_location(button, file$9, 70, 2, 2017);
        attr_dev(div1, "class", "utd-component utd-hautpage");
        add_location(div1, file$9, 69, 0, 1973);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$9, 77, 0, 2257);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, button);
        append_dev(button, div0);
        append_dev(div0, span);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);

        if (!mounted) {
          dispose = listen_dev(button, "click", scrollerHautPage, false, false, false);
          mounted = true;
        }
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (dirty &
        /*title*/
        1) {
          attr_dev(button, "title",
          /*title*/
          ctx[0]);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$9.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function scrollerHautPage(e) {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }

  function instance$9($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-hautpage', slots, []);
    var _$$props$title = $$props.title,
        title = _$$props$title === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Retour en haut de page." : "Return to the top of the page." : _$$props$title;
    var _$$props$hauteurMinim = $$props.hauteurMinimaleSroll,
        hauteurMinimaleSroll = _$$props$hauteurMinim === void 0 ? 555 : _$$props$hauteurMinim;
    var thisComponent = get_current_component();
    var html;
    var controle;
    var ticking = false;
    onMount(function () {
      html = thisComponent.getRootNode().getElementsByTagName("html")[0];
      controle = thisComponent.shadowRoot.querySelector('.utd-hautpage');
      controle.classList.add("utd-d-none");
    });
    window.addEventListener('scroll', function (e) {
      if (!ticking) {
        window.requestAnimationFrame(function () {
          gererAffichageBouton();
          ticking = false;
        });
      }

      ticking = true;
    });

    function gererAffichageBouton() {
      var dureeAnimationMs = 500;

      if (html.classList.contains('utd-modale-ouverte')) {
        //Si une fenêtre modale est ouverte, on ne fait rien pour le bouton de retour haut de page
        return;
      }

      if (document.body.scrollTop > hauteurMinimaleSroll || document.documentElement.scrollTop > hauteurMinimaleSroll) {
        if (controle.classList.contains('utd-d-none')) {
          controle.classList.remove('utd-d-none');
          setTimeout(function () {
            html.setAttribute('retourhautpagevisible', 'true');
            controle.classList.add('visible');
          }, 10);
        }
      } else {
        if (controle.classList.contains("visible")) {
          setTimeout(function () {
            controle.classList.add('utd-d-none');
            html.setAttribute('retourhautpagevisible', 'false');
          }, dureeAnimationMs);
        }

        controle.classList.remove('visible');
      }
    }

    var writable_props = ['title', 'hauteurMinimaleSroll'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-hautpage> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('title' in $$props) $$invalidate(0, title = $$props.title);
      if ('hauteurMinimaleSroll' in $$props) $$invalidate(1, hauteurMinimaleSroll = $$props.hauteurMinimaleSroll);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        get_current_component: get_current_component,
        title: title,
        hauteurMinimaleSroll: hauteurMinimaleSroll,
        thisComponent: thisComponent,
        html: html,
        controle: controle,
        ticking: ticking,
        gererAffichageBouton: gererAffichageBouton,
        scrollerHautPage: scrollerHautPage
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('title' in $$props) $$invalidate(0, title = $$props.title);
      if ('hauteurMinimaleSroll' in $$props) $$invalidate(1, hauteurMinimaleSroll = $$props.hauteurMinimaleSroll);
      if ('html' in $$props) html = $$props.html;
      if ('controle' in $$props) controle = $$props.controle;
      if ('ticking' in $$props) ticking = $$props.ticking;
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [title, hauteurMinimaleSroll];
  }

  var HautPage = /*#__PURE__*/function (_SvelteElement) {
    _inherits(HautPage, _SvelteElement);

    var _super = _createSuper$9(HautPage);

    function HautPage(options) {
      var _this;

      _classCallCheck(this, HautPage);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$9, create_fragment$9, safe_not_equal, {
        title: 0,
        hauteurMinimaleSroll: 1
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(HautPage, [{
      key: "title",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(title) {
        this.$$set({
          title: title
        });
        flush();
      }
    }, {
      key: "hauteurMinimaleSroll",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(hauteurMinimaleSroll) {
        this.$$set({
          hauteurMinimaleSroll: hauteurMinimaleSroll
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["title", "hauteurMinimaleSroll"];
      }
    }]);

    return HautPage;
  }(SvelteElement);

  customElements.define("utd-hautpage", HautPage);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$8 = "src\\components\\infobulle.svelte"; // (98:2) {#if $$slots["texte-lie"]}

  function create_if_block_4$3(ctx) {
    var span;
    var slot;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        span = element("span");
        slot = element("slot");
        attr_dev(slot, "name", "texte-lie");
        add_location(slot, file$8, 98, 54, 3729);
        attr_dev(span, "class", "texte-lie");
        add_location(span, file$8, 98, 4, 3679);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, slot);

        if (!mounted) {
          dispose = listen_dev(span, "click",
          /*afficherModale*/
          ctx[13], false, false, false);
          mounted = true;
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4$3.name,
      type: "if",
      source: "(98:2) {#if $$slots[\\\"texte-lie\\\"]}",
      ctx: ctx
    });
    return block;
  } // (113:2) {#if afficher}


  function create_if_block$7(ctx) {
    var div;
    var t0;
    var span7;
    var span3;
    var h1;
    var span0;
    var t1;
    var span1;
    var t2;
    var button;
    var span2;
    var t3;
    var span6;
    var span4;
    var t4;
    var t5;
    var span5;
    var show_if;
    var span7_intro;
    var span7_outro;
    var current;
    var mounted;
    var dispose;
    var if_block0 =
    /*titre*/
    ctx[1] && create_if_block_3$2(ctx);

    function select_block_type(ctx, dirty) {
      if (dirty &
      /*slots*/
      128) show_if = null;
      if (show_if == null) show_if = !!Utils.slotExiste(
      /*slots*/
      ctx[7], 'contenu');
      if (show_if) return create_if_block_1$4;
      if (
      /*contenu*/
      ctx[6]) return create_if_block_2$3;
    }

    var current_block_type = select_block_type(ctx, -1);
    var if_block1 = current_block_type && current_block_type(ctx);
    var block = {
      c: function create() {
        div = element("div");
        t0 = space();
        span7 = element("span");
        span3 = element("span");
        h1 = element("h1");
        span0 = element("span");
        t1 = space();
        span1 = element("span");
        if (if_block0) if_block0.c();
        t2 = space();
        button = element("button");
        span2 = element("span");
        t3 = space();
        span6 = element("span");
        span4 = element("span");
        t4 = text(
        /*srPrefixeContenu*/
        ctx[3]);
        t5 = space();
        span5 = element("span");
        if (if_block1) if_block1.c();
        attr_dev(div, "class", "utd-backdrop");
        add_location(div, file$8, 113, 4, 4209);
        attr_dev(span0, "class", "utd-sr-only");
        add_location(span0, file$8, 128, 10, 4687);
        add_location(span1, file$8, 129, 10, 4747);
        attr_dev(h1, "id",
        /*idEntete*/
        ctx[11]);
        add_location(h1, file$8, 127, 8, 4657);
        attr_dev(span2, "aria-hidden", "true");
        attr_dev(span2, "class", "utd-icone-svg x-fermer-bleu");
        add_location(span2, file$8, 141, 10, 5019);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "close");
        attr_dev(button, "aria-label",
        /*srBoutonFermer*/
        ctx[5]);
        add_location(button, file$8, 135, 8, 4864);
        attr_dev(span3, "class", "utd-container entete");
        add_location(span3, file$8, 126, 6, 4612);
        attr_dev(span4, "class", "utd-sr-only");
        attr_dev(span4, "id",
        /*idPrefixeContenu*/
        ctx[12]);
        attr_dev(span4, "tabindex", "-1");
        add_location(span4, file$8, 148, 8, 5215);
        attr_dev(span5, "class", "corps");
        add_location(span5, file$8, 149, 8, 5314);
        attr_dev(span6, "class", "utd-container conteneur-corps");
        add_location(span6, file$8, 147, 6, 5161);
        attr_dev(span7, "aria-labelledby",
        /*idEntete*/
        ctx[11]);
        attr_dev(span7, "class", "modale");
        attr_dev(span7, "id",
        /*idModale*/
        ctx[10]);
        attr_dev(span7, "aria-modal", "true");
        attr_dev(span7, "role", "dialog");
        add_location(span7, file$8, 114, 4, 4268);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        insert_dev(target, t0, anchor);
        insert_dev(target, span7, anchor);
        append_dev(span7, span3);
        append_dev(span3, h1);
        append_dev(h1, span0);
        span0.innerHTML =
        /*srTitre*/
        ctx[2];
        append_dev(h1, t1);
        append_dev(h1, span1);
        if (if_block0) if_block0.m(span1, null);
        append_dev(span3, t2);
        append_dev(span3, button);
        append_dev(button, span2);
        append_dev(span7, t3);
        append_dev(span7, span6);
        append_dev(span6, span4);
        append_dev(span4, t4);
        append_dev(span6, t5);
        append_dev(span6, span5);
        if (if_block1) if_block1.m(span5, null);
        current = true;

        if (!mounted) {
          dispose = [listen_dev(div, "click",
          /*masquerModale*/
          ctx[14], false, false, false), listen_dev(button, "click",
          /*masquerModale*/
          ctx[14], false, false, false), listen_dev(span7, "keydown",
          /*keydown*/
          ctx[15], false, false, false), listen_dev(span7, "introend",
          /*conserverFocusInfobulle*/
          ctx[17], false, false, false), listen_dev(span7, "outroend",
          /*finAnimationFermeture*/
          ctx[16], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (!current || dirty &
        /*srTitre*/
        4) span0.innerHTML =
        /*srTitre*/
        ctx[2];

        if (
        /*titre*/
        ctx[1]) {
          if (if_block0) {
            if_block0.p(ctx, dirty);
          } else {
            if_block0 = create_if_block_3$2(ctx);
            if_block0.c();
            if_block0.m(span1, null);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (!current || dirty &
        /*srBoutonFermer*/
        32) {
          attr_dev(button, "aria-label",
          /*srBoutonFermer*/
          ctx[5]);
        }

        if (!current || dirty &
        /*srPrefixeContenu*/
        8) set_data_dev(t4,
        /*srPrefixeContenu*/
        ctx[3]);

        if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if (if_block1) if_block1.d(1);
          if_block1 = current_block_type && current_block_type(ctx);

          if (if_block1) {
            if_block1.c();
            if_block1.m(span5, null);
          }
        }
      },
      i: function intro(local) {
        if (current) return;
        add_render_callback(function () {
          if (span7_outro) span7_outro.end(1);
          span7_intro = create_in_transition(span7, fly, {
            y: 200,
            duration: 500
          });
          span7_intro.start();
        });
        current = true;
      },
      o: function outro(local) {
        if (span7_intro) span7_intro.invalidate();
        span7_outro = create_out_transition(span7, fly, {
          y: 200,
          duration: 250
        });
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if (detaching) detach_dev(t0);
        if (detaching) detach_dev(span7);
        if (if_block0) if_block0.d();

        if (if_block1) {
          if_block1.d();
        }

        if (detaching && span7_outro) span7_outro.end();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$7.name,
      type: "if",
      source: "(113:2) {#if afficher}",
      ctx: ctx
    });
    return block;
  } // (131:12) {#if titre}


  function create_if_block_3$2(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text(
        /*titre*/
        ctx[1]);
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titre*/
        2) set_data_dev(t,
        /*titre*/
        ctx[1]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3$2.name,
      type: "if",
      source: "(131:12) {#if titre}",
      ctx: ctx
    });
    return block;
  } // (157:14) {#if contenu}


  function create_if_block_2$3(ctx) {
    var html_tag;
    var html_anchor;
    var block = {
      c: function create() {
        html_tag = new HtmlTag(false);
        html_anchor = empty();
        html_tag.a = html_anchor;
      },
      m: function mount(target, anchor) {
        html_tag.m(
        /*contenu*/
        ctx[6], target, anchor);
        insert_dev(target, html_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*contenu*/
        64) html_tag.p(
        /*contenu*/
        ctx[6]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(html_anchor);
        if (detaching) html_tag.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$3.name,
      type: "if",
      source: "(157:14) {#if contenu}",
      ctx: ctx
    });
    return block;
  } // (151:12) {#if Utils.slotExiste(slots, 'contenu')}


  function create_if_block_1$4(ctx) {
    var slot;
    var t;
    var span;
    var block = {
      c: function create() {
        slot = element("slot");
        t = space();
        span = element("span");
        attr_dev(slot, "name", "contenu");
        attr_dev(slot, "class", "utd-d-none");
        add_location(slot, file$8, 151, 14, 5404);
        add_location(span, file$8, 152, 14, 5461);
      },
      m: function mount(target, anchor) {
        insert_dev(target, slot, anchor);
        insert_dev(target, t, anchor);
        insert_dev(target, span, anchor);
        span.innerHTML =
        /*htmlSlotContenu*/
        ctx[8];
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*htmlSlotContenu*/
        256) span.innerHTML =
        /*htmlSlotContenu*/
        ctx[8];
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(slot);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$4.name,
      type: "if",
      source: "(151:12) {#if Utils.slotExiste(slots, 'contenu')}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$8(ctx) {
    var span4;
    var t0;
    var span3;
    var t1;
    var button;
    var span2;
    var span1;
    var span0;
    var t2;
    var t3;
    var link;
    var current;
    var mounted;
    var dispose;
    var if_block0 =
    /*$$slots*/
    ctx[18]["texte-lie"] && create_if_block_4$3(ctx);
    var if_block1 =
    /*afficher*/
    ctx[0] && create_if_block$7(ctx);
    var block = {
      c: function create() {
        span4 = element("span");
        if (if_block0) if_block0.c();
        t0 = space();
        span3 = element("span");
        t1 = space();
        button = element("button");
        span2 = element("span");
        span1 = element("span");
        span0 = element("span");
        t2 = space();
        if (if_block1) if_block1.c();
        t3 = space();
        link = element("link");
        this.c = noop;
        attr_dev(span0, "aria-hidden", "true");
        attr_dev(span0, "class", "utd-icone-svg question");
        add_location(span0, file$8, 103, 10, 4030);
        attr_dev(span1, "aria-hidden", "true");
        attr_dev(span1, "class", "puce");
        add_location(span1, file$8, 102, 8, 3980);
        attr_dev(span2, "class", "conteneur-puce");
        add_location(span2, file$8, 101, 6, 3941);
        attr_dev(button, "type", "button");
        attr_dev(button, "id",
        /*idBoutonToggle*/
        ctx[9]);
        attr_dev(button, "aria-label",
        /*srBoutonOuvrir*/
        ctx[4]);
        attr_dev(button, "class", "tooltip-toggle");
        add_location(button, file$8, 100, 42, 3814);
        attr_dev(span3, "class", "conteneur-tooltip");
        add_location(span3, file$8, 100, 2, 3774);
        attr_dev(span4, "class", "utd-component utd-infobulle");
        add_location(span4, file$8, 96, 0, 3601);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$8, 166, 0, 5757);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, span4, anchor);
        if (if_block0) if_block0.m(span4, null);
        append_dev(span4, t0);
        append_dev(span4, span3);
        append_dev(span3, t1);
        append_dev(span3, button);
        append_dev(button, span2);
        append_dev(span2, span1);
        append_dev(span1, span0);
        append_dev(span4, t2);
        if (if_block1) if_block1.m(span4, null);
        insert_dev(target, t3, anchor);
        insert_dev(target, link, anchor);
        current = true;

        if (!mounted) {
          dispose = listen_dev(button, "click",
          /*afficherModale*/
          ctx[13], false, false, false);
          mounted = true;
        }
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (
        /*$$slots*/
        ctx[18]["texte-lie"]) {
          if (if_block0) {
            if_block0.p(ctx, dirty);
          } else {
            if_block0 = create_if_block_4$3(ctx);
            if_block0.c();
            if_block0.m(span4, t0);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (!current || dirty &
        /*srBoutonOuvrir*/
        16) {
          attr_dev(button, "aria-label",
          /*srBoutonOuvrir*/
          ctx[4]);
        }

        if (
        /*afficher*/
        ctx[0]) {
          if (if_block1) {
            if_block1.p(ctx, dirty);

            if (dirty &
            /*afficher*/
            1) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block$7(ctx);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(span4, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, function () {
            if_block1 = null;
          });
          check_outros();
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block1);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block1);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span4);
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
        if (detaching) detach_dev(t3);
        if (detaching) detach_dev(link);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$8.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$8($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots$1 = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-infobulle', slots$1, []);
    var $$slots = compute_slots(slots$1);
    var _$$props$afficher = $$props.afficher,
        afficher = _$$props$afficher === void 0 ? false : _$$props$afficher;
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? "" : _$$props$titre;
    var _$$props$srTitre = $$props.srTitre,
        srTitre = _$$props$srTitre === void 0 ? Utils.obtenirLanguePage() === "fr" ? "Aide concernant&nbsp;" : "Help concerning&nbsp;" : _$$props$srTitre;
    var _$$props$srPrefixeCon = $$props.srPrefixeContenu,
        srPrefixeContenu = _$$props$srPrefixeCon === void 0 ? Utils.obtenirLanguePage() === "fr" ? "Détails :" : "Details:" : _$$props$srPrefixeCon;
    var _$$props$srBoutonOuvr = $$props.srBoutonOuvrir,
        srBoutonOuvrir = _$$props$srBoutonOuvr === void 0 ? Utils.obtenirLanguePage() === "fr" ? "Afficher l'aide contextuelle" : "Show help about" : _$$props$srBoutonOuvr;
    var _$$props$srBoutonFerm = $$props.srBoutonFermer,
        srBoutonFermer = _$$props$srBoutonFerm === void 0 ? Utils.obtenirLanguePage() === "fr" ? "Fermer" : "Close" : _$$props$srBoutonFerm;
    var _$$props$contenu = $$props.contenu,
        contenu = _$$props$contenu === void 0 ? "" : _$$props$contenu;
    var idBoutonToggle = Utils.genererId();
    var idModale = Utils.genererId();
    var idEntete = Utils.genererId();
    var idPrefixeContenu = Utils.genererId();
    var thisComponent = get_current_component();
    var html;
    var body;
    var slots = [];
    var htmlSlotContenu;
    onMount(function () {
      html = thisComponent.getRootNode().getElementsByTagName("html")[0];
      body = thisComponent.getRootNode().getElementsByTagName("body")[0];
      $$invalidate(7, slots = Array.from(thisComponent.querySelectorAll('[slot]')));
      assignerHtmlSlotContenu();

      if (Utils.estMobile()) {
        html.classList.add("est-mobile");
      }
    });
    /**
    * Permet de pallier à un problème de perte de focus à l'intérieur de la modale. En effet, si on clique dans le contenu de la slot "contenu" et qu'on fait TAB, le focus
    * tombe dans la page en dessous car le keydown est sur le body de la page (probablement car nous sommes dans une slot).
    * Nous cachons donc le contenu de la slot, récupérons son html et l'assignons nous-même au contrôle. De cette façon nous allons nous réglons le problème et en bonus
    * nous nous assurons d'une conformité visuelle, puisque c'est le css de notre composant qui va s'appliquer et non celui de l'application.
    * NOTE. Le problème ne semble pas se produire avec le composant utd-dialog. On dirait que le fait que d'autres contrôles focusables sont présents empêche le problème. Je ne comprends pas vraiment.
    */

    function assignerHtmlSlotContenu() {
      if (slots.length) {
        var slotContenu = thisComponent.querySelector("[slot=contenu]");

        if (slotContenu) {
          var contenuHtml = thisComponent.querySelector("[slot=contenu]").innerHTML;

          if (contenuHtml) {
            $$invalidate(8, htmlSlotContenu = contenuHtml);
          }
        }
      }
    }

    function afficherModale(e) {
      Utils.ajusterInterfaceAvantAffichageModale(html, body);
      $$invalidate(0, afficher = true);
    }

    function masquerModale(e) {
      $$invalidate(0, afficher = false);
      redonnerFocusBoutonToggle();
    }

    function redonnerFocusBoutonToggle() {
      var controleFocus = thisComponent.shadowRoot.getElementById(idBoutonToggle);

      if (controleFocus) {
        //On redonne le focus au contrôle spécifié (normalement le bouton toggle de l'infobulle)
        controleFocus.focus();
      }
    }

    function keydown(e) {
      if (e.key === "Escape") {
        masquerModale();
      }
    }

    function finAnimationFermeture(e) {
      Utils.ajusterInterfaceApresFermetureModale(html, body);
    }

    function conserverFocusInfobulle(e) {
      thisComponent.shadowRoot.getElementById(idPrefixeContenu).focus();
      Utils.conserverFocusElement(thisComponent.shadowRoot.getElementById(idModale), thisComponent);
    }

    var writable_props = ['afficher', 'titre', 'srTitre', 'srPrefixeContenu', 'srBoutonOuvrir', 'srBoutonFermer', 'contenu'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-infobulle> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('afficher' in $$props) $$invalidate(0, afficher = $$props.afficher);
      if ('titre' in $$props) $$invalidate(1, titre = $$props.titre);
      if ('srTitre' in $$props) $$invalidate(2, srTitre = $$props.srTitre);
      if ('srPrefixeContenu' in $$props) $$invalidate(3, srPrefixeContenu = $$props.srPrefixeContenu);
      if ('srBoutonOuvrir' in $$props) $$invalidate(4, srBoutonOuvrir = $$props.srBoutonOuvrir);
      if ('srBoutonFermer' in $$props) $$invalidate(5, srBoutonFermer = $$props.srBoutonFermer);
      if ('contenu' in $$props) $$invalidate(6, contenu = $$props.contenu);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        fly: fly,
        get_current_component: get_current_component,
        Utils: Utils,
        afficher: afficher,
        titre: titre,
        srTitre: srTitre,
        srPrefixeContenu: srPrefixeContenu,
        srBoutonOuvrir: srBoutonOuvrir,
        srBoutonFermer: srBoutonFermer,
        contenu: contenu,
        idBoutonToggle: idBoutonToggle,
        idModale: idModale,
        idEntete: idEntete,
        idPrefixeContenu: idPrefixeContenu,
        thisComponent: thisComponent,
        html: html,
        body: body,
        slots: slots,
        htmlSlotContenu: htmlSlotContenu,
        assignerHtmlSlotContenu: assignerHtmlSlotContenu,
        afficherModale: afficherModale,
        masquerModale: masquerModale,
        redonnerFocusBoutonToggle: redonnerFocusBoutonToggle,
        keydown: keydown,
        finAnimationFermeture: finAnimationFermeture,
        conserverFocusInfobulle: conserverFocusInfobulle
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('afficher' in $$props) $$invalidate(0, afficher = $$props.afficher);
      if ('titre' in $$props) $$invalidate(1, titre = $$props.titre);
      if ('srTitre' in $$props) $$invalidate(2, srTitre = $$props.srTitre);
      if ('srPrefixeContenu' in $$props) $$invalidate(3, srPrefixeContenu = $$props.srPrefixeContenu);
      if ('srBoutonOuvrir' in $$props) $$invalidate(4, srBoutonOuvrir = $$props.srBoutonOuvrir);
      if ('srBoutonFermer' in $$props) $$invalidate(5, srBoutonFermer = $$props.srBoutonFermer);
      if ('contenu' in $$props) $$invalidate(6, contenu = $$props.contenu);
      if ('html' in $$props) html = $$props.html;
      if ('body' in $$props) body = $$props.body;
      if ('slots' in $$props) $$invalidate(7, slots = $$props.slots);
      if ('htmlSlotContenu' in $$props) $$invalidate(8, htmlSlotContenu = $$props.htmlSlotContenu);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [afficher, titre, srTitre, srPrefixeContenu, srBoutonOuvrir, srBoutonFermer, contenu, slots, htmlSlotContenu, idBoutonToggle, idModale, idEntete, idPrefixeContenu, afficherModale, masquerModale, keydown, finAnimationFermeture, conserverFocusInfobulle, $$slots];
  }

  var Infobulle = /*#__PURE__*/function (_SvelteElement) {
    _inherits(Infobulle, _SvelteElement);

    var _super = _createSuper$8(Infobulle);

    function Infobulle(options) {
      var _this;

      _classCallCheck(this, Infobulle);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: _objectSpread(_objectSpread({}, attribute_to_object(_this.attributes)), {}, {
          $$slots: get_custom_elements_slots(_assertThisInitialized(_this))
        }),
        customElement: true
      }, instance$8, create_fragment$8, safe_not_equal, {
        afficher: 0,
        titre: 1,
        srTitre: 2,
        srPrefixeContenu: 3,
        srBoutonOuvrir: 4,
        srBoutonFermer: 5,
        contenu: 6
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(Infobulle, [{
      key: "afficher",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(afficher) {
        this.$$set({
          afficher: afficher
        });
        flush();
      }
    }, {
      key: "titre",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "srTitre",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(srTitre) {
        this.$$set({
          srTitre: srTitre
        });
        flush();
      }
    }, {
      key: "srPrefixeContenu",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(srPrefixeContenu) {
        this.$$set({
          srPrefixeContenu: srPrefixeContenu
        });
        flush();
      }
    }, {
      key: "srBoutonOuvrir",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(srBoutonOuvrir) {
        this.$$set({
          srBoutonOuvrir: srBoutonOuvrir
        });
        flush();
      }
    }, {
      key: "srBoutonFermer",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(srBoutonFermer) {
        this.$$set({
          srBoutonFermer: srBoutonFermer
        });
        flush();
      }
    }, {
      key: "contenu",
      get: function get() {
        return this.$$.ctx[6];
      },
      set: function set(contenu) {
        this.$$set({
          contenu: contenu
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["afficher", "titre", "srTitre", "srPrefixeContenu", "srBoutonOuvrir", "srBoutonFermer", "contenu"];
      }
    }]);

    return Infobulle;
  }(SvelteElement);

  customElements.define("utd-infobulle", Infobulle);

  function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var console_1 = globals.console;
  var file$7 = "src\\components\\listederoulante.svelte";

  function get_each_context$1(ctx, list, i) {
    var child_ctx = ctx.slice();
    child_ctx[49] = list[i];
    child_ctx[51] = i;
    return child_ctx;
  }

  function get_each_context_1(ctx, list, i) {
    var child_ctx = ctx.slice();
    child_ctx[52] = list[i];
    child_ctx[51] = i;
    return child_ctx;
  } // (431:2) {#if recherchable === 'true' || multiple === 'true'}


  function create_if_block$6(ctx) {
    var p;
    var t0;
    var span0;
    var t1;
    var span4;
    var span2;
    var t2;
    var span1;
    var t3;
    var t4;
    var span3;
    var ul;
    var ul_aria_multiselectable_value;
    var span3_class_value;
    var span4_class_value;
    var span4_role_value;
    var span4_aria_expanded_value;
    var span4_aria_labelledby_value;
    var span4_aria_describedby_value;
    var span4_aria_owns_value;
    var span4_aria_activedescendant_value;
    var mounted;
    var dispose;

    function select_block_type(ctx, dirty) {
      if (
      /*multiple*/
      ctx[0] === 'false') return create_if_block_3$1;
      return create_else_block_1;
    }

    var current_block_type = select_block_type(ctx);
    var if_block0 = current_block_type(ctx);
    var if_block1 =
    /*recherchable*/
    ctx[1] === 'true' && create_if_block_2$2(ctx);
    var each_value =
    /*suggestions*/
    ctx[11];
    validate_each_argument(each_value);
    var each_blocks = [];

    for (var i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    }

    var block = {
      c: function create() {
        p = element("p");
        t0 = space();
        span0 = element("span");
        t1 = space();
        span4 = element("span");
        span2 = element("span");
        if_block0.c();
        t2 = space();
        span1 = element("span");
        t3 = space();
        if (if_block1) if_block1.c();
        t4 = space();
        span3 = element("span");
        ul = element("ul");

        for (var _i = 0; _i < each_blocks.length; _i += 1) {
          each_blocks[_i].c();
        }

        attr_dev(p, "aria-live", "polite");
        attr_dev(p, "class", "utd-sr-only");
        add_location(p, file$7, 431, 6, 12007);
        attr_dev(span0, "id",
        /*idLabelFake*/
        ctx[16]);
        attr_dev(span0, "class", "utd-sr-only");
        attr_dev(span0, "aria-hidden", "true");
        add_location(span0, file$7, 433, 6, 12063);
        attr_dev(span1, "class", "utd-icone-svg chevron-bleu-piv");
        add_location(span1, file$7, 457, 10, 13891);
        attr_dev(span2, "class", "selection select2-selection--multiple");
        add_location(span2, file$7, 437, 8, 12724);
        attr_dev(ul, "class", "suggestions");
        attr_dev(ul, "role", "listbox");
        attr_dev(ul, "aria-multiselectable", ul_aria_multiselectable_value =
        /*multiple*/
        ctx[0] === 'true' ? 'true' : null);
        attr_dev(ul, "id",
        /*idControleResultats*/
        ctx[15]);
        attr_dev(ul, "aria-expanded", "true");
        attr_dev(ul, "aria-hidden", "false");
        add_location(ul, file$7, 470, 12, 14967);
        attr_dev(span3, "class", span3_class_value = "resultats " + (!
        /*afficherOptions*/
        ctx[6] ? 'utd-d-none' : ''));
        attr_dev(span3, "dir", "ltr");
        add_location(span3, file$7, 469, 10, 14879);
        attr_dev(span4, "class", span4_class_value = "conteneur utd-form-control" + (
        /*afficherOptions*/
        ctx[6] ? ' ouvert' : ''));
        attr_dev(span4, "dir", "ltr");
        attr_dev(span4, "role", span4_role_value =
        /*recherchable*/
        ctx[1] === 'true' ? 'combobox' : 'listbox');
        attr_dev(span4, "aria-expanded", span4_aria_expanded_value =
        /*afficherOptions*/
        ctx[6] ? 'true' : 'false');
        attr_dev(span4, "tabindex", "0");
        attr_dev(span4, "aria-disabled", "false");
        attr_dev(span4, "aria-labelledby", span4_aria_labelledby_value =
        /*controleLabel*/
        ctx[8] ?
        /*idControleLabel*/
        ctx[9] : null);
        attr_dev(span4, "aria-describedby", span4_aria_describedby_value =
        /*controleLabel*/
        ctx[8] ?
        /*idControleLabel*/
        ctx[9] : null);
        attr_dev(span4, "aria-owns", span4_aria_owns_value =
        /*recherchable*/
        ctx[1] === 'false' ?
        /*idControleResultats*/
        ctx[15] : null);
        attr_dev(span4, "aria-activedescendant", span4_aria_activedescendant_value =
        /*recherchable*/
        ctx[1] === 'false' &&
        /*afficherOptions*/
        ctx[6] ?
        /*idActiveDescendant*/
        ctx[10] : null);
        add_location(span4, file$7, 435, 6, 12144);
      },
      m: function mount(target, anchor) {
        insert_dev(target, p, anchor);
        insert_dev(target, t0, anchor);
        insert_dev(target, span0, anchor);
        insert_dev(target, t1, anchor);
        insert_dev(target, span4, anchor);
        append_dev(span4, span2);
        if_block0.m(span2, null);
        append_dev(span2, t2);
        append_dev(span2, span1);
        append_dev(span4, t3);
        if (if_block1) if_block1.m(span4, null);
        append_dev(span4, t4);
        append_dev(span4, span3);
        append_dev(span3, ul);

        for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
          each_blocks[_i2].m(ul, null);
        }

        if (!mounted) {
          dispose = [listen_dev(span2, "click",
          /*clickSelection*/
          ctx[18], false, false, false), listen_dev(span2, "mousedown", selectionMouseDown, false, false, false), listen_dev(span4, "blur",
          /*blurConteneur*/
          ctx[20], false, false, false), listen_dev(span4, "keydown",
          /*onKeyDown*/
          ctx[17], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx);

          if (if_block0) {
            if_block0.c();
            if_block0.m(span2, t2);
          }
        }

        if (
        /*recherchable*/
        ctx[1] === 'true') {
          if (if_block1) {
            if_block1.p(ctx, dirty);
          } else {
            if_block1 = create_if_block_2$2(ctx);
            if_block1.c();
            if_block1.m(span4, t4);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }

        if (dirty[0] &
        /*indexeFocusOption, suggestions, clickOption, multiple*/
        4196481) {
          each_value =
          /*suggestions*/
          ctx[11];
          validate_each_argument(each_value);

          var _i3;

          for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
            var child_ctx = get_each_context$1(ctx, each_value, _i3);

            if (each_blocks[_i3]) {
              each_blocks[_i3].p(child_ctx, dirty);
            } else {
              each_blocks[_i3] = create_each_block$1(child_ctx);

              each_blocks[_i3].c();

              each_blocks[_i3].m(ul, null);
            }
          }

          for (; _i3 < each_blocks.length; _i3 += 1) {
            each_blocks[_i3].d(1);
          }

          each_blocks.length = each_value.length;
        }

        if (dirty[0] &
        /*multiple*/
        1 && ul_aria_multiselectable_value !== (ul_aria_multiselectable_value =
        /*multiple*/
        ctx[0] === 'true' ? 'true' : null)) {
          attr_dev(ul, "aria-multiselectable", ul_aria_multiselectable_value);
        }

        if (dirty[0] &
        /*afficherOptions*/
        64 && span3_class_value !== (span3_class_value = "resultats " + (!
        /*afficherOptions*/
        ctx[6] ? 'utd-d-none' : ''))) {
          attr_dev(span3, "class", span3_class_value);
        }

        if (dirty[0] &
        /*afficherOptions*/
        64 && span4_class_value !== (span4_class_value = "conteneur utd-form-control" + (
        /*afficherOptions*/
        ctx[6] ? ' ouvert' : ''))) {
          attr_dev(span4, "class", span4_class_value);
        }

        if (dirty[0] &
        /*recherchable*/
        2 && span4_role_value !== (span4_role_value =
        /*recherchable*/
        ctx[1] === 'true' ? 'combobox' : 'listbox')) {
          attr_dev(span4, "role", span4_role_value);
        }

        if (dirty[0] &
        /*afficherOptions*/
        64 && span4_aria_expanded_value !== (span4_aria_expanded_value =
        /*afficherOptions*/
        ctx[6] ? 'true' : 'false')) {
          attr_dev(span4, "aria-expanded", span4_aria_expanded_value);
        }

        if (dirty[0] &
        /*controleLabel, idControleLabel*/
        768 && span4_aria_labelledby_value !== (span4_aria_labelledby_value =
        /*controleLabel*/
        ctx[8] ?
        /*idControleLabel*/
        ctx[9] : null)) {
          attr_dev(span4, "aria-labelledby", span4_aria_labelledby_value);
        }

        if (dirty[0] &
        /*controleLabel, idControleLabel*/
        768 && span4_aria_describedby_value !== (span4_aria_describedby_value =
        /*controleLabel*/
        ctx[8] ?
        /*idControleLabel*/
        ctx[9] : null)) {
          attr_dev(span4, "aria-describedby", span4_aria_describedby_value);
        }

        if (dirty[0] &
        /*recherchable*/
        2 && span4_aria_owns_value !== (span4_aria_owns_value =
        /*recherchable*/
        ctx[1] === 'false' ?
        /*idControleResultats*/
        ctx[15] : null)) {
          attr_dev(span4, "aria-owns", span4_aria_owns_value);
        }

        if (dirty[0] &
        /*recherchable, afficherOptions, idActiveDescendant*/
        1090 && span4_aria_activedescendant_value !== (span4_aria_activedescendant_value =
        /*recherchable*/
        ctx[1] === 'false' &&
        /*afficherOptions*/
        ctx[6] ?
        /*idActiveDescendant*/
        ctx[10] : null)) {
          attr_dev(span4, "aria-activedescendant", span4_aria_activedescendant_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(p);
        if (detaching) detach_dev(t0);
        if (detaching) detach_dev(span0);
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(span4);
        if_block0.d();
        if (if_block1) if_block1.d();
        destroy_each(each_blocks, detaching);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$6.name,
      type: "if",
      source: "(431:2) {#if recherchable === 'true' || multiple === 'true'}",
      ctx: ctx
    });
    return block;
  } // (446:10) {:else}


  function create_else_block_1(ctx) {
    var ul;
    var each_value_1 =
    /*optionsSelectionnees*/
    ctx[12];
    validate_each_argument(each_value_1);
    var each_blocks = [];

    for (var i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    }

    var block = {
      c: function create() {
        ul = element("ul");

        for (var _i4 = 0; _i4 < each_blocks.length; _i4 += 1) {
          each_blocks[_i4].c();
        }

        attr_dev(ul, "class", "select2-selection__rendered");
        attr_dev(ul, "id", "select2-2cnb-container");
        add_location(ul, file$7, 446, 14, 13148);
      },
      m: function mount(target, anchor) {
        insert_dev(target, ul, anchor);

        for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
          each_blocks[_i5].m(ul, null);
        }
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*optionsSelectionnees*/
        4096) {
          each_value_1 =
          /*optionsSelectionnees*/
          ctx[12];
          validate_each_argument(each_value_1);

          var _i6;

          for (_i6 = 0; _i6 < each_value_1.length; _i6 += 1) {
            var child_ctx = get_each_context_1(ctx, each_value_1, _i6);

            if (each_blocks[_i6]) {
              each_blocks[_i6].p(child_ctx, dirty);
            } else {
              each_blocks[_i6] = create_each_block_1(child_ctx);

              each_blocks[_i6].c();

              each_blocks[_i6].m(ul, null);
            }
          }

          for (; _i6 < each_blocks.length; _i6 += 1) {
            each_blocks[_i6].d(1);
          }

          each_blocks.length = each_value_1.length;
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(ul);
        destroy_each(each_blocks, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block_1.name,
      type: "else",
      source: "(446:10) {:else}",
      ctx: ctx
    });
    return block;
  } // (439:10) {#if multiple === 'false'}


  function create_if_block_3$1(ctx) {
    var if_block_anchor;

    function select_block_type_1(ctx, dirty) {
      if (
      /*optionsSelectionnees*/
      ctx[12].length === 0) return create_if_block_4$2;
      return create_else_block$2;
    }

    var current_block_type = select_block_type_1(ctx);
    var if_block = current_block_type(ctx);
    var block = {
      c: function create() {
        if_block.c();
        if_block_anchor = empty();
      },
      m: function mount(target, anchor) {
        if_block.m(target, anchor);
        insert_dev(target, if_block_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block.d(1);
          if_block = current_block_type(ctx);

          if (if_block) {
            if_block.c();
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        }
      },
      d: function destroy(detaching) {
        if_block.d(detaching);
        if (detaching) detach_dev(if_block_anchor);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3$1.name,
      type: "if",
      source: "(439:10) {#if multiple === 'false'}",
      ctx: ctx
    });
    return block;
  } // (448:16) {#each optionsSelectionnees as optionSelectionnee, i}


  function create_each_block_1(ctx) {
    var li;
    var button;
    var span0;
    var t1;
    var span1;
    var t2_value =
    /*optionSelectionnee*/
    ctx[52].texte + "";
    var t2;
    var t3;
    var block = {
      c: function create() {
        li = element("li");
        button = element("button");
        span0 = element("span");
        span0.textContent = "×";
        t1 = space();
        span1 = element("span");
        t2 = text(t2_value);
        t3 = space();
        attr_dev(span0, "aria-hidden", "true");
        add_location(span0, file$7, 450, 22, 13572);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "select2-selection__choice__remove");
        attr_dev(button, "title", "Remove item");
        attr_dev(button, "aria-describedby", "select2-2cnb-container-choice-s29e-HI");
        add_location(button, file$7, 449, 20, 13407);
        attr_dev(span1, "class", "select2-selection__choice__display");
        attr_dev(span1, "id", "select2-2cnb-container-choice-s29e-HI");
        add_location(span1, file$7, 452, 20, 13658);
        attr_dev(li, "class", "select2-selection__choice");
        attr_dev(li, "data-select2-id", "select2-data-247-9kw9");
        add_location(li, file$7, 448, 18, 13307);
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor);
        append_dev(li, button);
        append_dev(button, span0);
        append_dev(li, t1);
        append_dev(li, span1);
        append_dev(span1, t2);
        append_dev(li, t3);
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*optionsSelectionnees*/
        4096 && t2_value !== (t2_value =
        /*optionSelectionnee*/
        ctx[52].texte + "")) set_data_dev(t2, t2_value);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_each_block_1.name,
      type: "each",
      source: "(448:16) {#each optionsSelectionnees as optionSelectionnee, i}",
      ctx: ctx
    });
    return block;
  } // (442:12) {:else}


  function create_else_block$2(ctx) {
    var span;
    var t_value =
    /*optionsSelectionnees*/
    ctx[12][0].texte + "";
    var t;
    var block = {
      c: function create() {
        span = element("span");
        t = text(t_value);
        add_location(span, file$7, 442, 14, 13030);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, t);
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*optionsSelectionnees*/
        4096 && t_value !== (t_value =
        /*optionsSelectionnees*/
        ctx[12][0].texte + "")) set_data_dev(t, t_value);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block$2.name,
      type: "else",
      source: "(442:12) {:else}",
      ctx: ctx
    });
    return block;
  } // (440:12) {#if optionsSelectionnees.length === 0}


  function create_if_block_4$2(ctx) {
    var span;
    var t;
    var block = {
      c: function create() {
        span = element("span");
        t = text(
        /*placeholder*/
        ctx[4]);
        attr_dev(span, "class", "utd-placeholder");
        add_location(span, file$7, 440, 14, 12943);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, t);
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*placeholder*/
        16) set_data_dev(t,
        /*placeholder*/
        ctx[4]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4$2.name,
      type: "if",
      source: "(440:12) {#if optionsSelectionnees.length === 0}",
      ctx: ctx
    });
    return block;
  } // (462:10) {#if recherchable === 'true'}


  function create_if_block_2$2(ctx) {
    var span1;
    var span0;
    var t0;
    var t1;
    var label;
    var t2;
    var t3;
    var input;
    var input_aria_multiselectable_value;
    var input_aria_activedescendant_value;
    var span1_class_value;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        span1 = element("span");
        span0 = element("span");
        t0 = text(
        /*texteAideUtilisation*/
        ctx[3]);
        t1 = space();
        label = element("label");
        t2 = text(
        /*placeholderRecherche*/
        ctx[5]);
        t3 = space();
        input = element("input");
        attr_dev(span0, "id",
        /*idTexteUtilisation*/
        ctx[13]);
        attr_dev(span0, "class", "utd-sr-only");
        add_location(span0, file$7, 463, 14, 14112);
        attr_dev(label, "for",
        /*idControleRecherche*/
        ctx[14]);
        attr_dev(label, "class", "utd-sr-only");
        add_location(label, file$7, 464, 14, 14209);
        attr_dev(input, "type", "text");
        attr_dev(input, "id",
        /*idControleRecherche*/
        ctx[14]);
        attr_dev(input, "class", "utd-form-control recherche");
        attr_dev(input, "role", "combobox");
        attr_dev(input, "aria-multiselectable", input_aria_multiselectable_value =
        /*multiple*/
        ctx[0] === 'true' ? 'true' : null);
        attr_dev(input, "aria-expanded", "true");
        attr_dev(input, "aria-haspopup", "listbox");
        attr_dev(input, "autocomplete", "off");
        attr_dev(input, "autocapitalize", "off");
        attr_dev(input, "spellcheck", "false");
        attr_dev(input, "placeholder",
        /*placeholderRecherche*/
        ctx[5]);
        attr_dev(input, "aria-describedby",
        /*idTexteUtilisation*/
        ctx[13]);
        attr_dev(input, "aria-controls",
        /*idControleResultats*/
        ctx[15]);
        attr_dev(input, "aria-activedescendant", input_aria_activedescendant_value =
        /*afficherOptions*/
        ctx[6] ?
        /*idActiveDescendant*/
        ctx[10] : null);
        add_location(input, file$7, 465, 14, 14310);
        attr_dev(span1, "class", span1_class_value = "conteneur-recherche " + (!
        /*afficherOptions*/
        ctx[6] ? 'utd-d-none' : ''));
        add_location(span1, file$7, 462, 12, 14023);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span1, anchor);
        append_dev(span1, span0);
        append_dev(span0, t0);
        append_dev(span1, t1);
        append_dev(span1, label);
        append_dev(label, t2);
        append_dev(span1, t3);
        append_dev(span1, input);

        if (!mounted) {
          dispose = [listen_dev(input, "input",
          /*traiterSaisieRecherche*/
          ctx[19], false, false, false), listen_dev(input, "blur",
          /*blurRecherche*/
          ctx[21], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (dirty[0] &
        /*texteAideUtilisation*/
        8) set_data_dev(t0,
        /*texteAideUtilisation*/
        ctx[3]);
        if (dirty[0] &
        /*placeholderRecherche*/
        32) set_data_dev(t2,
        /*placeholderRecherche*/
        ctx[5]);

        if (dirty[0] &
        /*multiple*/
        1 && input_aria_multiselectable_value !== (input_aria_multiselectable_value =
        /*multiple*/
        ctx[0] === 'true' ? 'true' : null)) {
          attr_dev(input, "aria-multiselectable", input_aria_multiselectable_value);
        }

        if (dirty[0] &
        /*placeholderRecherche*/
        32) {
          attr_dev(input, "placeholder",
          /*placeholderRecherche*/
          ctx[5]);
        }

        if (dirty[0] &
        /*afficherOptions, idActiveDescendant*/
        1088 && input_aria_activedescendant_value !== (input_aria_activedescendant_value =
        /*afficherOptions*/
        ctx[6] ?
        /*idActiveDescendant*/
        ctx[10] : null)) {
          attr_dev(input, "aria-activedescendant", input_aria_activedescendant_value);
        }

        if (dirty[0] &
        /*afficherOptions*/
        64 && span1_class_value !== (span1_class_value = "conteneur-recherche " + (!
        /*afficherOptions*/
        ctx[6] ? 'utd-d-none' : ''))) {
          attr_dev(span1, "class", span1_class_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span1);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$2.name,
      type: "if",
      source: "(462:10) {#if recherchable === 'true'}",
      ctx: ctx
    });
    return block;
  } // (474:18) {#if multiple === 'true'}


  function create_if_block_1$3(ctx) {
    var span;
    var block = {
      c: function create() {
        span = element("span");
        attr_dev(span, "class", "utd-checkbox");
        attr_dev(span, "aria-hidden", "true");
        add_location(span, file$7, 474, 20, 15556);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$3.name,
      type: "if",
      source: "(474:18) {#if multiple === 'true'}",
      ctx: ctx
    });
    return block;
  } // (472:14) {#each suggestions as suggestion, i}


  function create_each_block$1(ctx) {
    var li;
    var t0;
    var span;
    var t1_value =
    /*suggestion*/
    ctx[49].texte + "";
    var t1;
    var t2;
    var li_class_value;
    var li_id_value;
    var li_value_value;
    var li_indexeoption_value;
    var li_aria_selected_value;
    var mounted;
    var dispose;
    var if_block =
    /*multiple*/
    ctx[0] === 'true' && create_if_block_1$3(ctx);
    var block = {
      c: function create() {
        li = element("li");
        if (if_block) if_block.c();
        t0 = space();
        span = element("span");
        t1 = text(t1_value);
        t2 = space();
        attr_dev(span, "class", "texte-option");
        add_location(span, file$7, 476, 18, 15682);
        attr_dev(li, "class", li_class_value =
        /*i*/
        ctx[51] ===
        /*indexeFocusOption*/
        ctx[7] ? 'focus' : '');
        attr_dev(li, "role", "option");
        attr_dev(li, "id", li_id_value =
        /*suggestion*/
        ctx[49].id);
        li.value = li_value_value =
        /*suggestion*/
        ctx[49].value;
        attr_dev(li, "indexesuggestion", /*i*/
        ctx[51]);
        attr_dev(li, "indexeoption", li_indexeoption_value =
        /*suggestion*/
        ctx[49].indexe);
        attr_dev(li, "aria-selected", li_aria_selected_value =
        /*suggestion*/
        ctx[49].selected ? 'true' : 'false');
        add_location(li, file$7, 472, 16, 15205);
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor);
        if (if_block) if_block.m(li, null);
        append_dev(li, t0);
        append_dev(li, span);
        append_dev(span, t1);
        append_dev(li, t2);

        if (!mounted) {
          dispose = [listen_dev(li, "click",
          /*clickOption*/
          ctx[22], false, false, false), listen_dev(li, "mousedown", optionMouseDown, false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (
        /*multiple*/
        ctx[0] === 'true') {
          if (if_block) ; else {
            if_block = create_if_block_1$3(ctx);
            if_block.c();
            if_block.m(li, t0);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty[0] &
        /*suggestions*/
        2048 && t1_value !== (t1_value =
        /*suggestion*/
        ctx[49].texte + "")) set_data_dev(t1, t1_value);

        if (dirty[0] &
        /*indexeFocusOption*/
        128 && li_class_value !== (li_class_value =
        /*i*/
        ctx[51] ===
        /*indexeFocusOption*/
        ctx[7] ? 'focus' : '')) {
          attr_dev(li, "class", li_class_value);
        }

        if (dirty[0] &
        /*suggestions*/
        2048 && li_id_value !== (li_id_value =
        /*suggestion*/
        ctx[49].id)) {
          attr_dev(li, "id", li_id_value);
        }

        if (dirty[0] &
        /*suggestions*/
        2048 && li_value_value !== (li_value_value =
        /*suggestion*/
        ctx[49].value)) {
          prop_dev(li, "value", li_value_value);
        }

        if (dirty[0] &
        /*suggestions*/
        2048 && li_indexeoption_value !== (li_indexeoption_value =
        /*suggestion*/
        ctx[49].indexe)) {
          attr_dev(li, "indexeoption", li_indexeoption_value);
        }

        if (dirty[0] &
        /*suggestions*/
        2048 && li_aria_selected_value !== (li_aria_selected_value =
        /*suggestion*/
        ctx[49].selected ? 'true' : 'false')) {
          attr_dev(li, "aria-selected", li_aria_selected_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li);
        if (if_block) if_block.d();
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_each_block$1.name,
      type: "each",
      source: "(472:14) {#each suggestions as suggestion, i}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$7(ctx) {
    var div;
    var slot;
    var t0;
    var div_class_value;
    var t1;
    var link;
    var if_block = (
    /*recherchable*/
    ctx[1] === 'true' ||
    /*multiple*/
    ctx[0] === 'true') && create_if_block$6(ctx);
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        t0 = space();
        if (if_block) if_block.c();
        t1 = space();
        link = element("link");
        this.c = noop;
        add_location(slot, file$7, 428, 2, 11928);
        attr_dev(div, "class", div_class_value = "utd-component utd-liste-deroulante " +
        /*largeur*/
        ctx[2] + (
        /*multiple*/
        ctx[0] === 'true' ? ' multiple' : ''));
        add_location(div, file$7, 427, 0, 11826);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$7, 489, 0, 15880);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
        append_dev(div, t0);
        if (if_block) if_block.m(div, null);
        insert_dev(target, t1, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, dirty) {
        if (
        /*recherchable*/
        ctx[1] === 'true' ||
        /*multiple*/
        ctx[0] === 'true') {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block$6(ctx);
            if_block.c();
            if_block.m(div, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty[0] &
        /*largeur, multiple*/
        5 && div_class_value !== (div_class_value = "utd-component utd-liste-deroulante " +
        /*largeur*/
        ctx[2] + (
        /*multiple*/
        ctx[0] === 'true' ? ' multiple' : ''))) {
          attr_dev(div, "class", div_class_value);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if (if_block) if_block.d();
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$7.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function selectionMouseDown(e) {
    //Petite twist afin de ne pas provoquer de blur si on click sur le contrôle de sélection à partir d'un autre contrôle. (Évite la loop de fermeture/ouverture du dropdown)
    e.preventDefault();
  }

  function optionMouseDown(e) {
    //Petite twist afin de ne pas provoquer de blur si on click sur un contrôle d'option à partir d'un autre contrôle. (Évite la fermeture du dropdown via l'événement blur du contrôle de recherche)
    e.preventDefault();
  }

  function instance$7($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-liste-deroulante', slots, []);
    var _$$props$multiple = $$props.multiple,
        multiple = _$$props$multiple === void 0 ? "false" : _$$props$multiple;
    var _$$props$recherchable = $$props.recherchable,
        recherchable = _$$props$recherchable === void 0 ? "false" : _$$props$recherchable;
    var _$$props$largeur = $$props.largeur,
        largeur = _$$props$largeur === void 0 ? "md" : _$$props$largeur; //Valeurs possible sm, md, lg

    var _$$props$texteAideUti = $$props.texteAideUtilisation,
        texteAideUtilisation = _$$props$texteAideUti === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Utilisez la tabulation (ou les touches flèches) pour naviguer dans la liste des suggestions." : "(en)Utilisez la tabulation (ou les touches flèches) pour naviguer dans la liste des suggestions." : _$$props$texteAideUti;
    var _$$props$placeholder = $$props.placeholder,
        placeholder = _$$props$placeholder === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Sélectionner une valeur" : "(en)Sélectionner une valeur" : _$$props$placeholder;
    var _$$props$placeholderR = $$props.placeholderRecherche,
        placeholderRecherche = _$$props$placeholderR === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Rechercher dans la liste" : "(en)Rechercher dans la liste" : _$$props$placeholderR;
    var _$$props$noResult = $$props.noResult,
        noResult = _$$props$noResult === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Aucun résultat" : "(en)Aucun résultat" : _$$props$noResult;
    var _$$props$results = $$props.results,
        results = _$$props$results === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "{x} suggestion(s) disponibles" : "(en){x} suggestion(s) disponibles" : _$$props$results;
    var _$$props$deleteItem = $$props.deleteItem,
        deleteItem = _$$props$deleteItem === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Supprimer {t}" : "(en)Supprimer {t}" : _$$props$deleteItem;
    var _$$props$supprimer = $$props.supprimer,
        supprimer = _$$props$supprimer === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Supprimer" : "(en)Supprimer" : _$$props$supprimer;
    var thisComponent = get_current_component();
    var idTexteUtilisation = Utils.genererId();
    var idControleRecherche = Utils.genererId();
    var idControleResultats = Utils.genererId();
    var idLabelFake = Utils.genererId();
    var idControleSuggestions = Utils.genererId();
    var mounted = false;
    var html;
    var controle;
    var controleConteneur;
    var controleLabel;
    var libelle;
    var description;
    var idControleLabel = "";
    var controleRecherche;
    var controleSelect;
    var afficherOptions = false;
    var indexeFocusOption = null;
    var idActiveDescendant = null;
    var options = [];
    var suggestions = [];
    var optionsSelectionnees = [];
    var texteRecherche = "";
    onMount(function () {
      mounted = true;
      html = thisComponent.getRootNode().getElementsByTagName("html")[0];
      controle = thisComponent.shadowRoot.querySelector('.utd-liste-deroulante');
      controleConteneur = thisComponent.shadowRoot.querySelector('.conteneur');
      controleRecherche = thisComponent.shadowRoot.getElementById(idControleRecherche);

      if (multiple === 'true' || recherchable === 'true') {
        ajusterControleSelectOriginal();
        options = obtenirOptions();
        definirSuggestions();
        definirOptionsSelectionnes();
        observerAttributsSelectOrignal();
        controleSelect.addEventListener('click', function (event) {
          clickSelection(event);
        });
      }
    });

    function observerAttributsSelectOrignal() {
      var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          var nomAttribut = mutation.attributeName;
          var nouvelleValeur = mutation.target.getAttribute(nomAttribut);

          if (nouvelleValeur) {
            controleConteneur.setAttribute(nomAttribut, nouvelleValeur);
          } else {
            controleConteneur.removeAttribute(nomAttribut);
          }

          console.log("attributes changed");
        });
      });
      observer.observe(controleSelect, {
        attributeFilter: ['aria-describedby', 'aria-required', 'aria-invalid'] //configure it to listen to attribute changes

      });
    }

    function obtenirOptions() {
      var options = [];

      for (var i = 0; i < controleSelect.options.length; i++) {
        var option = controleSelect.options[i];
        var texte = option.label || option.value; //    const texteFormatte = texte.toLowerCase()

        var opt = {
          id: Utils.genererId(),
          texte: texte,
          valeur: option.value,
          texteFormatte: texte.toLowerCase(),
          indexe: i,
          selected: option.selected
        };
        options.push(opt);
      }

      return options;
    }

    function definirSuggestions() {
      var nouvellesSuggestions = []; //ICI la recherche

      for (var i = 0; i < options.length; i++) {
        var suggestion = options[i]; //    suggestions.push(options[i])

        if (texteRecherche === "" || suggestion.texteFormatte.indexOf(texteRecherche) >= 0) {
          suggestion.selected = controleSelect[i].selected;
          nouvellesSuggestions.push(suggestion);
        }
      }

      $$invalidate(11, suggestions = nouvellesSuggestions);
    }

    function ajusterControleSelectOriginal() {
      $$invalidate(8, controleLabel = thisComponent.querySelector("label")); //Si le contrôle label n'a pas d'id on lui en assigne un

      if (!controleLabel) {
        $$invalidate(8, controleLabel = thisComponent.parentElement.querySelector('label'));
      }

      if (controleLabel) {
        if (!controleLabel.getAttribute("id")) {
          controleLabel.setAttribute("id", Utils.genererId());
        }

        $$invalidate(9, idControleLabel = controleLabel.getAttribute("id"));
      }

      var fakeLabel = thisComponent.shadowRoot.getElementById(idLabelFake);

      if (fakeLabel) {
        fakeLabel.append(controleLabel.cloneNode(true));
      }

      controleSelect = thisComponent.querySelector("select");

      if (!controleSelect) {
        return;
      } //  controleSelect.classList.add('utd-sr-only')


      controleSelect.setAttribute("tabindex", "0");

      if (multiple === 'true') {
        controleSelect.setAttribute("multiple", "");
      }
    }

    function selectionnerOption(indexeSuggestion, indexeOption) {
      if (indexeOption !== null) {
        var indexeSelectionPrecedente = controleSelect.selectedIndex || null;
        majValeurListeOriginale(indexeOption);
        definirOptionsSelectionnes();

        if (multiple === 'false') {
          if (indexeSelectionPrecedente) {
            var indexePrecedent = suggestions.findIndex(function (element) {
              return element.indexe === indexeSelectionPrecedente;
            });

            if (indexePrecedent >= 0) {
              $$invalidate(11, suggestions[indexePrecedent].selected = false, suggestions);
            }
          }

          $$invalidate(11, suggestions[indexeSuggestion].selected = true, suggestions);
        } else {
          $$invalidate(11, suggestions[indexeSuggestion].selected = optionsSelectionnees.findIndex(function (element) {
            return element.indexe === indexeOption;
          }) >= 0, suggestions);
        }

        if (multiple === 'false') {
          $$invalidate(6, afficherOptions = false);
          controleConteneur.focus();
        } else {
          $$invalidate(7, indexeFocusOption = indexeSuggestion);
        }
      }
    }

    function majValeurListeOriginale(indexe) {
      if (multiple === 'false') {
        controleSelect.selectedIndex = indexe;
      } else {
        controleSelect.options[indexe].selected = !controleSelect.options[indexe].selected;
      }
    }

    function definirOptionsSelectionnes() {
      $$invalidate(12, optionsSelectionnees = []);

      for (var i = 0; i < controleSelect.options.length; i++) {
        var option = controleSelect.options[i];

        if (option.selected) {
          optionsSelectionnees.push(options[i]);
        }
      }
    }

    function onKeyDown(e) {
      console.log(e.key);

      switch (e.key) {
        case "Enter":
        case " ":
          e.preventDefault();

          if (indexeFocusOption !== null) {
            selectionnerOption(indexeFocusOption, suggestions[indexeFocusOption].indexe);
          } else {
            $$invalidate(6, afficherOptions = !afficherOptions);

            if (suggestions.length && recherchable === 'false') {
              $$invalidate(7, indexeFocusOption = 0);
            }
          }

          break;

        case "Tab":
          //Si contrôle courant est textbox recherche on ne fait rien
          if (e.target.classList.contains('recherche')) {
            break;
          }

          e.stopPropagation();
          $$invalidate(6, afficherOptions = false);
          break;

        case "Escape":
          $$invalidate(6, afficherOptions = false);
          controleConteneur.focus();
          break;

        case "ArrowDown":
          e.preventDefault(); //Affiche les options si ne sont pas visibles actuellement

          if (!afficherOptions) {
            $$invalidate(6, afficherOptions = true);

            if (suggestions.length && recherchable === 'false') {
              $$invalidate(7, indexeFocusOption = 0);
            }
          } else {
            if (indexeFocusOption !== null) {
              modifierIndexeOptionCourante(1);
            } else {
              $$invalidate(7, indexeFocusOption = indexeFocusOption || 0);
            }
          }

          break;

        case "ArrowUp":
          e.preventDefault();

          if (!afficherOptions) {
            $$invalidate(6, afficherOptions = true);

            if (suggestions.length && recherchable === 'false') {
              $$invalidate(7, indexeFocusOption = suggestions.length - 1);
            }
          } else {
            if (indexeFocusOption !== null) {
              modifierIndexeOptionCourante(-1);
            } else {
              $$invalidate(7, indexeFocusOption = indexeFocusOption || suggestions.length - 1);
            }
          }

          break;
      }
    }

    function clickSelection(e) {
      e.preventDefault();
      console.log('click selection');
      $$invalidate(6, afficherOptions = !afficherOptions);
      controleConteneur.focus();
    }

    function majActiveDescendant() {
      if (indexeFocusOption !== null) {
        $$invalidate(10, idActiveDescendant = suggestions[indexeFocusOption].id);
      } else {
        $$invalidate(10, idActiveDescendant = null);
      }
    }

    function toggleAfficherOptions() {
      if (!mounted) {
        return;
      }

      if (afficherOptions) {


        if (recherchable === 'true') {
          controleRecherche.value = '';
          texteRecherche = '';
          definirSuggestions();
          setTimeout(function () {
            controleRecherche.focus();
          });
        } else {
          controleConteneur.focus();
        }
      } else {
        $$invalidate(7, indexeFocusOption = null);
      }
    }

    function modifierIndexeOptionCourante(step) {
      if (!step) {
        $$invalidate(7, indexeFocusOption = null);
        return;
      }

      var prochainIndexe = indexeFocusOption + step;
      var indexeDerniereOption = suggestions.length - 1;

      if (prochainIndexe > indexeDerniereOption) {
        $$invalidate(7, indexeFocusOption = 0);
      } else if (prochainIndexe < 0) {
        $$invalidate(7, indexeFocusOption = indexeDerniereOption);
      } else {
        $$invalidate(7, indexeFocusOption = prochainIndexe);
      }
    }

    function traiterSaisieRecherche() {
      // Empêche le traitement si simplement un focus ou un blur (l'événement input est lancé sur focus et blur)

      /*  if( texteRecherche === controleRecherche.value ){
        return;
      } */
      console.log('input');
      texteRecherche = controleRecherche.value;
      definirSuggestions();
      $$invalidate(7, indexeFocusOption = 0);
    }

    function blurConteneur() {
      console.log('blurConteneur');

      if (recherchable === 'false') {
        $$invalidate(6, afficherOptions = false);
      }
    }

    function blurRecherche(e) {
      console.log('blurRecherche'); //TODO concorder avec les touches ici afin de redonner focus au textbox (event du dropdown ENTER, Escape)

      $$invalidate(6, afficherOptions = false);
    } //  }


    function clickOption(e) {
      console.log('clickOption');
      e.stopPropagation();
      var indexeOption = e.currentTarget.getAttribute('indexeOption');
      var indexeSuggestion = e.currentTarget.getAttribute('indexeSuggestion');

      if (indexeOption && indexeSuggestion) {
        selectionnerOption(parseInt(indexeSuggestion), parseInt(indexeOption));
      }
    }

    var writable_props = ['multiple', 'recherchable', 'largeur', 'texteAideUtilisation', 'placeholder', 'placeholderRecherche', 'noResult', 'results', 'deleteItem', 'supprimer'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn("<utd-liste-deroulante> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('multiple' in $$props) $$invalidate(0, multiple = $$props.multiple);
      if ('recherchable' in $$props) $$invalidate(1, recherchable = $$props.recherchable);
      if ('largeur' in $$props) $$invalidate(2, largeur = $$props.largeur);
      if ('texteAideUtilisation' in $$props) $$invalidate(3, texteAideUtilisation = $$props.texteAideUtilisation);
      if ('placeholder' in $$props) $$invalidate(4, placeholder = $$props.placeholder);
      if ('placeholderRecherche' in $$props) $$invalidate(5, placeholderRecherche = $$props.placeholderRecherche);
      if ('noResult' in $$props) $$invalidate(23, noResult = $$props.noResult);
      if ('results' in $$props) $$invalidate(24, results = $$props.results);
      if ('deleteItem' in $$props) $$invalidate(25, deleteItem = $$props.deleteItem);
      if ('supprimer' in $$props) $$invalidate(26, supprimer = $$props.supprimer);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        get_current_component: get_current_component,
        multiple: multiple,
        recherchable: recherchable,
        largeur: largeur,
        texteAideUtilisation: texteAideUtilisation,
        placeholder: placeholder,
        placeholderRecherche: placeholderRecherche,
        noResult: noResult,
        results: results,
        deleteItem: deleteItem,
        supprimer: supprimer,
        thisComponent: thisComponent,
        idTexteUtilisation: idTexteUtilisation,
        idControleRecherche: idControleRecherche,
        idControleResultats: idControleResultats,
        idLabelFake: idLabelFake,
        idControleSuggestions: idControleSuggestions,
        mounted: mounted,
        html: html,
        controle: controle,
        controleConteneur: controleConteneur,
        controleLabel: controleLabel,
        libelle: libelle,
        description: description,
        idControleLabel: idControleLabel,
        controleRecherche: controleRecherche,
        controleSelect: controleSelect,
        afficherOptions: afficherOptions,
        indexeFocusOption: indexeFocusOption,
        idActiveDescendant: idActiveDescendant,
        options: options,
        suggestions: suggestions,
        optionsSelectionnees: optionsSelectionnees,
        texteRecherche: texteRecherche,
        observerAttributsSelectOrignal: observerAttributsSelectOrignal,
        obtenirOptions: obtenirOptions,
        definirSuggestions: definirSuggestions,
        ajusterControleSelectOriginal: ajusterControleSelectOriginal,
        selectionnerOption: selectionnerOption,
        majValeurListeOriginale: majValeurListeOriginale,
        definirOptionsSelectionnes: definirOptionsSelectionnes,
        onKeyDown: onKeyDown,
        clickSelection: clickSelection,
        selectionMouseDown: selectionMouseDown,
        optionMouseDown: optionMouseDown,
        majActiveDescendant: majActiveDescendant,
        toggleAfficherOptions: toggleAfficherOptions,
        modifierIndexeOptionCourante: modifierIndexeOptionCourante,
        traiterSaisieRecherche: traiterSaisieRecherche,
        blurConteneur: blurConteneur,
        blurRecherche: blurRecherche,
        clickOption: clickOption
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('multiple' in $$props) $$invalidate(0, multiple = $$props.multiple);
      if ('recherchable' in $$props) $$invalidate(1, recherchable = $$props.recherchable);
      if ('largeur' in $$props) $$invalidate(2, largeur = $$props.largeur);
      if ('texteAideUtilisation' in $$props) $$invalidate(3, texteAideUtilisation = $$props.texteAideUtilisation);
      if ('placeholder' in $$props) $$invalidate(4, placeholder = $$props.placeholder);
      if ('placeholderRecherche' in $$props) $$invalidate(5, placeholderRecherche = $$props.placeholderRecherche);
      if ('noResult' in $$props) $$invalidate(23, noResult = $$props.noResult);
      if ('results' in $$props) $$invalidate(24, results = $$props.results);
      if ('deleteItem' in $$props) $$invalidate(25, deleteItem = $$props.deleteItem);
      if ('supprimer' in $$props) $$invalidate(26, supprimer = $$props.supprimer);
      if ('mounted' in $$props) mounted = $$props.mounted;
      if ('html' in $$props) html = $$props.html;
      if ('controle' in $$props) controle = $$props.controle;
      if ('controleConteneur' in $$props) controleConteneur = $$props.controleConteneur;
      if ('controleLabel' in $$props) $$invalidate(8, controleLabel = $$props.controleLabel);
      if ('libelle' in $$props) libelle = $$props.libelle;
      if ('description' in $$props) description = $$props.description;
      if ('idControleLabel' in $$props) $$invalidate(9, idControleLabel = $$props.idControleLabel);
      if ('controleRecherche' in $$props) controleRecherche = $$props.controleRecherche;
      if ('controleSelect' in $$props) controleSelect = $$props.controleSelect;
      if ('afficherOptions' in $$props) $$invalidate(6, afficherOptions = $$props.afficherOptions);
      if ('indexeFocusOption' in $$props) $$invalidate(7, indexeFocusOption = $$props.indexeFocusOption);
      if ('idActiveDescendant' in $$props) $$invalidate(10, idActiveDescendant = $$props.idActiveDescendant);
      if ('options' in $$props) options = $$props.options;
      if ('suggestions' in $$props) $$invalidate(11, suggestions = $$props.suggestions);
      if ('optionsSelectionnees' in $$props) $$invalidate(12, optionsSelectionnees = $$props.optionsSelectionnees);
      if ('texteRecherche' in $$props) texteRecherche = $$props.texteRecherche;
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    $$self.$$.update = function () {
      if ($$self.$$.dirty[0] &
      /*afficherOptions*/
      64) {
        // Watches
        toggleAfficherOptions();
      }

      if ($$self.$$.dirty[0] &
      /*indexeFocusOption*/
      128) {
        majActiveDescendant();
      }
    };

    return [multiple, recherchable, largeur, texteAideUtilisation, placeholder, placeholderRecherche, afficherOptions, indexeFocusOption, controleLabel, idControleLabel, idActiveDescendant, suggestions, optionsSelectionnees, idTexteUtilisation, idControleRecherche, idControleResultats, idLabelFake, onKeyDown, clickSelection, traiterSaisieRecherche, blurConteneur, blurRecherche, clickOption, noResult, results, deleteItem, supprimer];
  }

  var Listederoulante = /*#__PURE__*/function (_SvelteElement) {
    _inherits(Listederoulante, _SvelteElement);

    var _super = _createSuper$7(Listederoulante);

    function Listederoulante(options) {
      var _this;

      _classCallCheck(this, Listederoulante);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$7, create_fragment$7, safe_not_equal, {
        multiple: 0,
        recherchable: 1,
        largeur: 2,
        texteAideUtilisation: 3,
        placeholder: 4,
        placeholderRecherche: 5,
        noResult: 23,
        results: 24,
        deleteItem: 25,
        supprimer: 26
      }, null, [-1, -1]);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(Listederoulante, [{
      key: "multiple",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(multiple) {
        this.$$set({
          multiple: multiple
        });
        flush();
      }
    }, {
      key: "recherchable",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(recherchable) {
        this.$$set({
          recherchable: recherchable
        });
        flush();
      }
    }, {
      key: "largeur",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(largeur) {
        this.$$set({
          largeur: largeur
        });
        flush();
      }
    }, {
      key: "texteAideUtilisation",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(texteAideUtilisation) {
        this.$$set({
          texteAideUtilisation: texteAideUtilisation
        });
        flush();
      }
    }, {
      key: "placeholder",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(placeholder) {
        this.$$set({
          placeholder: placeholder
        });
        flush();
      }
    }, {
      key: "placeholderRecherche",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(placeholderRecherche) {
        this.$$set({
          placeholderRecherche: placeholderRecherche
        });
        flush();
      }
    }, {
      key: "noResult",
      get: function get() {
        return this.$$.ctx[23];
      },
      set: function set(noResult) {
        this.$$set({
          noResult: noResult
        });
        flush();
      }
    }, {
      key: "results",
      get: function get() {
        return this.$$.ctx[24];
      },
      set: function set(results) {
        this.$$set({
          results: results
        });
        flush();
      }
    }, {
      key: "deleteItem",
      get: function get() {
        return this.$$.ctx[25];
      },
      set: function set(deleteItem) {
        this.$$set({
          deleteItem: deleteItem
        });
        flush();
      }
    }, {
      key: "supprimer",
      get: function get() {
        return this.$$.ctx[26];
      },
      set: function set(supprimer) {
        this.$$set({
          supprimer: supprimer
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["multiple", "recherchable", "largeur", "texteAideUtilisation", "placeholder", "placeholderRecherche", "noResult", "results", "deleteItem", "supprimer"];
      }
    }]);

    return Listederoulante;
  }(SvelteElement);

  customElements.define("utd-liste-deroulante", Listederoulante);

  function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$6 = "src\\components\\menuVertical.svelte";

  function create_fragment$6(ctx) {
    var nav;
    var a;
    var span0;
    var t0;
    var t1;
    var span1;
    var t2;
    var span2;
    var t4;
    var span3;
    var t5;
    var span3_class_value;
    var t6;
    var div;
    var slot;
    var t7;
    var link;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        nav = element("nav");
        a = element("a");
        span0 = element("span");
        t0 = text(
        /*titre*/
        ctx[0]);
        t1 = space();
        span1 = element("span");
        t2 = space();
        span2 = element("span");
        span2.textContent = "".concat(
        /*srTexteSortirMenu*/
        ctx[5]);
        t4 = space();
        span3 = element("span");
        t5 = text(
        /*titre*/
        ctx[0]);
        t6 = space();
        div = element("div");
        slot = element("slot");
        t7 = space();
        link = element("link");
        this.c = noop;
        add_location(span0, file$6, 26, 4, 1142);
        attr_dev(span1, "aria-hidden", "true");
        attr_dev(span1, "class", "utd-icone-svg chevron-bleu-piv");
        add_location(span1, file$6, 27, 4, 1168);
        attr_dev(span2, "class", "utd-sr-only");
        add_location(span2, file$6, 28, 4, 1239);
        attr_dev(a, "role", "button");
        attr_dev(a, "href", "#" +
        /*idMenu*/
        ctx[3]);
        attr_dev(a, "class", "toggle");
        attr_dev(a, "aria-controls",
        /*idMenu*/
        ctx[3]);
        add_location(a, file$6, 25, 2, 1021);
        attr_dev(span3, "class", span3_class_value = "titre " + (
        /*titreVisible*/
        ctx[1] === 'true' ? '' : 'utd-sr-only'));
        attr_dev(span3, "id",
        /*idTitreMenu*/
        ctx[4]);
        add_location(span3, file$6, 33, 2, 1321);
        add_location(slot, file$6, 35, 4, 1498);
        attr_dev(div, "id",
        /*idMenu*/
        ctx[3]);
        attr_dev(div, "role", "menu");
        attr_dev(div, "class", "menu");
        toggle_class(div, "visible",
        /*afficher*/
        ctx[2]);
        add_location(div, file$6, 34, 2, 1425);
        attr_dev(nav, "class", "utd-menu-vertical");
        attr_dev(nav, "aria-labelledby",
        /*idTitreMenu*/
        ctx[4]);
        toggle_class(nav, "visible",
        /*afficher*/
        ctx[2]);
        add_location(nav, file$6, 24, 0, 929);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$6, 38, 0, 1533);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, nav, anchor);
        append_dev(nav, a);
        append_dev(a, span0);
        append_dev(span0, t0);
        append_dev(a, t1);
        append_dev(a, span1);
        append_dev(a, t2);
        append_dev(a, span2);
        append_dev(nav, t4);
        append_dev(nav, span3);
        append_dev(span3, t5);
        append_dev(nav, t6);
        append_dev(nav, div);
        append_dev(div, slot);
        insert_dev(target, t7, anchor);
        insert_dev(target, link, anchor);

        if (!mounted) {
          dispose = listen_dev(a, "click", prevent_default(
          /*toggleAfficher*/
          ctx[6]), false, true, false);
          mounted = true;
        }
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (dirty &
        /*titre*/
        1) set_data_dev(t0,
        /*titre*/
        ctx[0]);
        if (dirty &
        /*titre*/
        1) set_data_dev(t5,
        /*titre*/
        ctx[0]);

        if (dirty &
        /*titreVisible*/
        2 && span3_class_value !== (span3_class_value = "titre " + (
        /*titreVisible*/
        ctx[1] === 'true' ? '' : 'utd-sr-only'))) {
          attr_dev(span3, "class", span3_class_value);
        }

        if (dirty &
        /*afficher*/
        4) {
          toggle_class(div, "visible",
          /*afficher*/
          ctx[2]);
        }

        if (dirty &
        /*afficher*/
        4) {
          toggle_class(nav, "visible",
          /*afficher*/
          ctx[2]);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(nav);
        if (detaching) detach_dev(t7);
        if (detaching) detach_dev(link);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$6.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$6($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-menu-vertical', slots, []);
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? Utils.obtenirLanguePage() === 'en' ? 'Secondary menu' : 'Menu secondaire' : _$$props$titre;
    var _$$props$titreVisible = $$props.titreVisible,
        titreVisible = _$$props$titreVisible === void 0 ? "true" : _$$props$titreVisible;
    var afficher = false;
    var idMenu = Utils.genererId();
    var idTitreMenu = Utils.genererId();
    var srTexteSortirMenu = Utils.obtenirLanguePage() === "en" ? "Press ESC key to exit menu." : "Appuyez sur la touche Échappe pour sortir du menu."; //TODO implémnenter gestion langue (aller chercher dans balise html? lang=?)
    // Références pour accessibilité
    // https://www.w3.org/WAI/ARIA/apg/example-index/menubar/menubar-navigation, https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/menu_role et https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability

    function toggleAfficher() {
      $$invalidate(2, afficher = !afficher);
    }

    var writable_props = ['titre', 'titreVisible'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-menu-vertical> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('titreVisible' in $$props) $$invalidate(1, titreVisible = $$props.titreVisible);
    };

    $$self.$capture_state = function () {
      return {
        Utils: Utils,
        titre: titre,
        titreVisible: titreVisible,
        afficher: afficher,
        idMenu: idMenu,
        idTitreMenu: idTitreMenu,
        srTexteSortirMenu: srTexteSortirMenu,
        toggleAfficher: toggleAfficher
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('titreVisible' in $$props) $$invalidate(1, titreVisible = $$props.titreVisible);
      if ('afficher' in $$props) $$invalidate(2, afficher = $$props.afficher);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [titre, titreVisible, afficher, idMenu, idTitreMenu, srTexteSortirMenu, toggleAfficher];
  }

  var MenuVertical = /*#__PURE__*/function (_SvelteElement) {
    _inherits(MenuVertical, _SvelteElement);

    var _super = _createSuper$6(MenuVertical);

    function MenuVertical(options) {
      var _this;

      _classCallCheck(this, MenuVertical);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$6, create_fragment$6, safe_not_equal, {
        titre: 0,
        titreVisible: 1
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(MenuVertical, [{
      key: "titre",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "titreVisible",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(titreVisible) {
        this.$$set({
          titreVisible: titreVisible
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["titre", "titreVisible"];
      }
    }]);

    return MenuVertical;
  }(SvelteElement);

  customElements.define("utd-menu-vertical", MenuVertical);

  function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$5 = "src\\components\\menuVerticalItem.svelte"; // (207:2) {:else}

  function create_else_block$1(ctx) {
    var a;
    var span;
    var t;
    var a_aria_current_value;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        a = element("a");
        span = element("span");
        t = text(
        /*libelle*/
        ctx[2]);
        add_location(span, file$5, 208, 6, 6438);
        attr_dev(a, "href",
        /*href*/
        ctx[3]);
        attr_dev(a, "role", "menuitem");
        attr_dev(a, "aria-current", a_aria_current_value =
        /*actif*/
        ctx[1] === 'true' ? 'page' : null);
        attr_dev(a, "tabindex",
        /*indextab*/
        ctx[4]);
        add_location(a, file$5, 207, 4, 6283);
      },
      m: function mount(target, anchor) {
        insert_dev(target, a, anchor);
        append_dev(a, span);
        append_dev(span, t);

        if (!mounted) {
          dispose = [listen_dev(a, "keydown",
          /*onKeyDown*/
          ctx[10], false, false, false), listen_dev(a, "focus",
          /*onFocus*/
          ctx[11], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*libelle*/
        4) set_data_dev(t,
        /*libelle*/
        ctx[2]);

        if (dirty &
        /*href*/
        8) {
          attr_dev(a, "href",
          /*href*/
          ctx[3]);
        }

        if (dirty &
        /*actif*/
        2 && a_aria_current_value !== (a_aria_current_value =
        /*actif*/
        ctx[1] === 'true' ? 'page' : null)) {
          attr_dev(a, "aria-current", a_aria_current_value);
        }

        if (dirty &
        /*indextab*/
        16) {
          attr_dev(a, "tabindex",
          /*indextab*/
          ctx[4]);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(a);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block$1.name,
      type: "else",
      source: "(207:2) {:else}",
      ctx: ctx
    });
    return block;
  } // (197:2) {#if possedeEnfants}


  function create_if_block$5(ctx) {
    var a;
    var span0;
    var t0;
    var t1;
    var span1;
    var t2;
    var if_block_anchor;
    var current;
    var mounted;
    var dispose;
    var if_block =
    /*afficher*/
    ctx[0] === 'true' && create_if_block_1$2(ctx);
    var block = {
      c: function create() {
        a = element("a");
        span0 = element("span");
        t0 = text(
        /*libelle*/
        ctx[2]);
        t1 = space();
        span1 = element("span");
        t2 = space();
        if (if_block) if_block.c();
        if_block_anchor = empty();
        add_location(span0, file$5, 198, 6, 5962);
        attr_dev(span1, "aria-hidden", "true");
        attr_dev(span1, "class", "utd-icone-svg chevron-bleu-piv");
        add_location(span1, file$5, 199, 6, 5992);
        attr_dev(a, "role", "menuitem");
        attr_dev(a, "href",
        /*href*/
        ctx[3]);
        attr_dev(a, "aria-expanded",
        /*afficher*/
        ctx[0]);
        attr_dev(a, "aria-haspopup", "menu");
        attr_dev(a, "aria-controls",
        /*idSousMenu*/
        ctx[8]);
        attr_dev(a, "tabindex",
        /*indextab*/
        ctx[4]);
        add_location(a, file$5, 197, 4, 5739);
      },
      m: function mount(target, anchor) {
        insert_dev(target, a, anchor);
        append_dev(a, span0);
        append_dev(span0, t0);
        append_dev(a, t1);
        append_dev(a, span1);
        insert_dev(target, t2, anchor);
        if (if_block) if_block.m(target, anchor);
        insert_dev(target, if_block_anchor, anchor);
        current = true;

        if (!mounted) {
          dispose = [listen_dev(a, "click", prevent_default(
          /*toggleAfficher*/
          ctx[9]), false, true, false), listen_dev(a, "keydown",
          /*onKeyDown*/
          ctx[10], false, false, false), listen_dev(a, "focus",
          /*onFocus*/
          ctx[11], false, false, false)];
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (!current || dirty &
        /*libelle*/
        4) set_data_dev(t0,
        /*libelle*/
        ctx[2]);

        if (!current || dirty &
        /*href*/
        8) {
          attr_dev(a, "href",
          /*href*/
          ctx[3]);
        }

        if (!current || dirty &
        /*afficher*/
        1) {
          attr_dev(a, "aria-expanded",
          /*afficher*/
          ctx[0]);
        }

        if (!current || dirty &
        /*indextab*/
        16) {
          attr_dev(a, "tabindex",
          /*indextab*/
          ctx[4]);
        }

        if (
        /*afficher*/
        ctx[0] === 'true') {
          if (if_block) {
            if_block.p(ctx, dirty);

            if (dirty &
            /*afficher*/
            1) {
              transition_in(if_block, 1);
            }
          } else {
            if_block = create_if_block_1$2(ctx);
            if_block.c();
            transition_in(if_block, 1);
            if_block.m(if_block_anchor.parentNode, if_block_anchor);
          }
        } else if (if_block) {
          group_outros();
          transition_out(if_block, 1, 1, function () {
            if_block = null;
          });
          check_outros();
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(a);
        if (detaching) detach_dev(t2);
        if (if_block) if_block.d(detaching);
        if (detaching) detach_dev(if_block_anchor);
        mounted = false;
        run_all(dispose);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$5.name,
      type: "if",
      source: "(197:2) {#if possedeEnfants}",
      ctx: ctx
    });
    return block;
  } // (202:4) {#if afficher === 'true'}


  function create_if_block_1$2(ctx) {
    var div;
    var slot;
    var div_transition;
    var current;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        add_location(slot, file$5, 203, 8, 6228);
        attr_dev(div, "id",
        /*idSousMenu*/
        ctx[8]);
        attr_dev(div, "role", "menu");
        attr_dev(div, "class", "sous-menu");
        add_location(div, file$5, 202, 6, 6106);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
        current = true;
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx;
      },
      i: function intro(local) {
        if (current) return;
        add_render_callback(function () {
          if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
            duration:
            /*animer*/
            ctx[5] === 'true' ? 250 : 0
          }, true);
          div_transition.run(1);
        });
        current = true;
      },
      o: function outro(local) {
        if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
          duration:
          /*animer*/
          ctx[5] === 'true' ? 250 : 0
        }, false);
        div_transition.run(0);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if (detaching && div_transition) div_transition.end();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$2.name,
      type: "if",
      source: "(202:4) {#if afficher === 'true'}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$5(ctx) {
    var div;
    var current_block_type_index;
    var if_block;
    var div_class_value;
    var t;
    var link;
    var current;
    var if_block_creators = [create_if_block$5, create_else_block$1];
    var if_blocks = [];

    function select_block_type(ctx, dirty) {
      if (
      /*possedeEnfants*/
      ctx[6]) return 0;
      return 1;
    }

    current_block_type_index = select_block_type(ctx);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    var block = {
      c: function create() {
        div = element("div");
        if_block.c();
        t = space();
        link = element("link");
        this.c = noop;
        attr_dev(div, "class", div_class_value = "utd-menu-vertical-item niv" +
        /*niveau*/
        ctx[7] + " " + (
        /*afficher*/
        ctx[0] === 'true' ? 'visible' : '') + " " + (
        /*actif*/
        ctx[1] === 'true' ? 'active' : ''));
        add_location(div, file$5, 195, 0, 5583);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$5, 212, 0, 6505);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        if_blocks[current_block_type_index].m(div, null);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);
        current = true;
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        var previous_block_index = current_block_type_index;
        current_block_type_index = select_block_type(ctx);

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty);
        } else {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, function () {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
          if_block = if_blocks[current_block_type_index];

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
            if_block.c();
          } else {
            if_block.p(ctx, dirty);
          }

          transition_in(if_block, 1);
          if_block.m(div, null);
        }

        if (!current || dirty &
        /*niveau, afficher, actif*/
        131 && div_class_value !== (div_class_value = "utd-menu-vertical-item niv" +
        /*niveau*/
        ctx[7] + " " + (
        /*afficher*/
        ctx[0] === 'true' ? 'visible' : '') + " " + (
        /*actif*/
        ctx[1] === 'true' ? 'active' : ''))) {
          attr_dev(div, "class", div_class_value);
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if_blocks[current_block_type_index].d();
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$5.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function estMenuItem(element) {
    return element && element.tagName.toLowerCase() === 'utd-menu-vertical-item';
  }

  function instance$5($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-menu-vertical-item', slots, []);
    var _$$props$libelle = $$props.libelle,
        libelle = _$$props$libelle === void 0 ? '' : _$$props$libelle;
    var _$$props$href = $$props.href,
        href = _$$props$href === void 0 ? '' : _$$props$href;
    var _$$props$afficher = $$props.afficher,
        afficher = _$$props$afficher === void 0 ? 'false' : _$$props$afficher;
    var _$$props$indextab = $$props.indextab,
        indextab = _$$props$indextab === void 0 ? '0' : _$$props$indextab;
    var _$$props$animer = $$props.animer,
        animer = _$$props$animer === void 0 ? 'true' : _$$props$animer;
    var _$$props$focus = $$props.focus,
        focus = _$$props$focus === void 0 ? 'false' : _$$props$focus;
    var _$$props$actif = $$props.actif,
        actif = _$$props$actif === void 0 ? 'false' : _$$props$actif;
    var possedeEnfants = false;
    var niveau = 1;
    var thisComponent = get_current_component();
    var idSousMenu = Utils.genererId();
    onMount(function () {
      $$invalidate(1, actif = estElementActif());
      $$invalidate(7, niveau = obtenirNiveau());
      $$invalidate(6, possedeEnfants = !!thisComponent.querySelector('utd-menu-vertical-item'));
    });

    function toggleFocus() {
      if (focus === 'true') {
        thisComponent.shadowRoot.querySelector('a').focus();
        $$invalidate(12, focus = 'false');
      }
    }

    function toggleAfficher() {
      $$invalidate(0, afficher = afficher === 'true' ? 'false' : 'true');
    }

    function estElementActif() {
      if (href) {
        return (window.location.pathname === href).toString();
      }
    }

    function obtenirNiveau() {
      var niveau = 1;
      var elementParent = thisComponent.parentElement;

      while (elementParent.tagName.toLowerCase() === 'utd-menu-vertical-item') {
        ++niveau;

        if (actif === 'true') {
          elementParent.setAttribute('actif', 'true');
          elementParent.setAttribute('animer', 'false');
          elementParent.setAttribute('afficher', 'true');
          elementParent.setAttribute('animer', 'true');
        }

        elementParent = elementParent.parentElement;
      }

      return niveau;
    }

    function obtenirMenuVertical() {
      var elementParent = thisComponent.parentElement;

      while (elementParent.tagName.toLowerCase() !== 'utd-menu-vertical') {
        elementParent = elementParent.parentElement;
      }

      return elementParent;
    }

    function onKeyDown(e) {
      var parent = thisComponent.parentElement;

      switch (e.key) {
        case "Escape":
          if (estMenuItem(parent)) {
            parent.setAttribute('afficher', 'false');
            parent.setAttribute('focus', 'true');
          }

          e.preventDefault();
          break;

        case "Enter":
        case " ":
          if (possedeEnfants) {
            if (afficher === 'false') {
              $$invalidate(0, afficher = 'true');
              thisComponent.querySelector('utd-menu-vertical-item').setAttribute('focus', 'true');
            }

            e.preventDefault();
          }

          break;

        case "ArrowLeft":
          accederMenuPrecedent();
          e.preventDefault();
          break;

        case "ArrowUp":
          accederMenuPrecedent(true);
          e.preventDefault();
          break;

        case "ArrowRight":
          if (possedeEnfants) {
            if (afficher === 'false') {
              $$invalidate(0, afficher = 'true');
              thisComponent.querySelector('utd-menu-vertical-item').setAttribute('focus', 'true');
            } else {
              accederMenuSuivant();
            }
          } else {
            accederMenuSuivant();
          }

          e.preventDefault();
          break;

        case "ArrowDown":
          accederMenuSuivant(true);
          e.preventDefault();
          break;
      }
    }

    function accederMenuSuivant(doitBoucler) {
      var parent = thisComponent.parentElement;
      var prochainMenu;
      $$invalidate(0, afficher = 'false');

      if (!doitBoucler && estMenuItem(parent)) {
        parent.setAttribute('afficher', 'false');
        prochainMenu = parent.nextElementSibling;
      } else {
        prochainMenu = thisComponent.nextElementSibling;
      }

      if (estMenuItem(prochainMenu)) {
        prochainMenu.setAttribute('focus', 'true');
      } else {
        if (doitBoucler) {
          parent.querySelector('utd-menu-vertical-item').setAttribute('focus', 'true');
        } else {
          parent.parentElement.querySelector('utd-menu-vertical-item').setAttribute('focus', 'true');
        }
      }
    }

    function accederMenuPrecedent(doitBoucler) {
      var parent = thisComponent.parentElement;
      var menuPrecedent;
      $$invalidate(0, afficher = 'false');

      if (!doitBoucler && estMenuItem(parent)) {
        parent.setAttribute('afficher', 'false');
        parent.setAttribute('focus', 'true');
      } else {
        menuPrecedent = thisComponent.previousElementSibling;
      }

      if (estMenuItem(menuPrecedent)) {
        menuPrecedent.setAttribute('focus', 'true');
      } else {
        var elements = parent.children;
        elements[elements.length - 1].setAttribute('focus', 'true');
      }
    }

    function onFocus() {
      // Tab roving!!! On gère le tabindex des éléments du menu afin que seul l'élément actif puisse être focusable (via tab) de sorte qu'on gère le focus via les flèches du clavier et 
      // un TAB provoque la sortie du menu.
      retirerPossibiliteFocusElementsMenu();
      thisComponent.setAttribute('indextab', '0');
    }

    function retirerPossibiliteFocusElementsMenu() {
      var menuVertical = obtenirMenuVertical();
      var elements = menuVertical.querySelectorAll('utd-menu-vertical-item');
      elements.forEach(function (element) {
        element.setAttribute('indextab', '-1');
      });
    }

    var writable_props = ['libelle', 'href', 'afficher', 'indextab', 'animer', 'focus', 'actif'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-menu-vertical-item> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('libelle' in $$props) $$invalidate(2, libelle = $$props.libelle);
      if ('href' in $$props) $$invalidate(3, href = $$props.href);
      if ('afficher' in $$props) $$invalidate(0, afficher = $$props.afficher);
      if ('indextab' in $$props) $$invalidate(4, indextab = $$props.indextab);
      if ('animer' in $$props) $$invalidate(5, animer = $$props.animer);
      if ('focus' in $$props) $$invalidate(12, focus = $$props.focus);
      if ('actif' in $$props) $$invalidate(1, actif = $$props.actif);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        slide: slide,
        get_current_component: get_current_component,
        libelle: libelle,
        href: href,
        afficher: afficher,
        indextab: indextab,
        animer: animer,
        focus: focus,
        actif: actif,
        possedeEnfants: possedeEnfants,
        niveau: niveau,
        thisComponent: thisComponent,
        idSousMenu: idSousMenu,
        toggleFocus: toggleFocus,
        toggleAfficher: toggleAfficher,
        estElementActif: estElementActif,
        obtenirNiveau: obtenirNiveau,
        obtenirMenuVertical: obtenirMenuVertical,
        onKeyDown: onKeyDown,
        accederMenuSuivant: accederMenuSuivant,
        accederMenuPrecedent: accederMenuPrecedent,
        estMenuItem: estMenuItem,
        onFocus: onFocus,
        retirerPossibiliteFocusElementsMenu: retirerPossibiliteFocusElementsMenu
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('libelle' in $$props) $$invalidate(2, libelle = $$props.libelle);
      if ('href' in $$props) $$invalidate(3, href = $$props.href);
      if ('afficher' in $$props) $$invalidate(0, afficher = $$props.afficher);
      if ('indextab' in $$props) $$invalidate(4, indextab = $$props.indextab);
      if ('animer' in $$props) $$invalidate(5, animer = $$props.animer);
      if ('focus' in $$props) $$invalidate(12, focus = $$props.focus);
      if ('actif' in $$props) $$invalidate(1, actif = $$props.actif);
      if ('possedeEnfants' in $$props) $$invalidate(6, possedeEnfants = $$props.possedeEnfants);
      if ('niveau' in $$props) $$invalidate(7, niveau = $$props.niveau);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    $$self.$$.update = function () {
      if ($$self.$$.dirty &
      /*focus*/
      4096) {
        // Watch sur la prop focus
        toggleFocus();
      }
    };

    return [afficher, actif, libelle, href, indextab, animer, possedeEnfants, niveau, idSousMenu, toggleAfficher, onKeyDown, onFocus, focus];
  }

  var MenuVerticalItem = /*#__PURE__*/function (_SvelteElement) {
    _inherits(MenuVerticalItem, _SvelteElement);

    var _super = _createSuper$5(MenuVerticalItem);

    function MenuVerticalItem(options) {
      var _this;

      _classCallCheck(this, MenuVerticalItem);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$5, create_fragment$5, safe_not_equal, {
        libelle: 2,
        href: 3,
        afficher: 0,
        indextab: 4,
        animer: 5,
        focus: 12,
        actif: 1
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(MenuVerticalItem, [{
      key: "libelle",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(libelle) {
        this.$$set({
          libelle: libelle
        });
        flush();
      }
    }, {
      key: "href",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(href) {
        this.$$set({
          href: href
        });
        flush();
      }
    }, {
      key: "afficher",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(afficher) {
        this.$$set({
          afficher: afficher
        });
        flush();
      }
    }, {
      key: "indextab",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(indextab) {
        this.$$set({
          indextab: indextab
        });
        flush();
      }
    }, {
      key: "animer",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(animer) {
        this.$$set({
          animer: animer
        });
        flush();
      }
    }, {
      key: "focus",
      get: function get() {
        return this.$$.ctx[12];
      },
      set: function set(focus) {
        this.$$set({
          focus: focus
        });
        flush();
      }
    }, {
      key: "actif",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(actif) {
        this.$$set({
          actif: actif
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["libelle", "href", "afficher", "indextab", "animer", "focus", "actif"];
      }
    }]);

    return MenuVerticalItem;
  }(SvelteElement);

  customElements.define("utd-menu-vertical-item", MenuVerticalItem);

  function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$4 = "src\\components\\section.svelte"; // (37:4) {:else}

  function create_else_block(ctx) {
    var previous_tag =
    /*tagTitre*/
    ctx[4];
    var svelte_element_anchor;
    validate_dynamic_element(
    /*tagTitre*/
    ctx[4]);
    validate_void_dynamic_element(
    /*tagTitre*/
    ctx[4]);
    var svelte_element =
    /*tagTitre*/
    ctx[4] && create_dynamic_element_1(ctx);
    var block = {
      c: function create() {
        if (svelte_element) svelte_element.c();
        svelte_element_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (svelte_element) svelte_element.m(target, anchor);
        insert_dev(target, svelte_element_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (
        /*tagTitre*/
        ctx[4]) {
          if (!previous_tag) {
            svelte_element = create_dynamic_element_1(ctx);
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else if (safe_not_equal(previous_tag,
          /*tagTitre*/
          ctx[4])) {
            svelte_element.d(1);
            validate_dynamic_element(
            /*tagTitre*/
            ctx[4]);
            validate_void_dynamic_element(
            /*tagTitre*/
            ctx[4]);
            svelte_element = create_dynamic_element_1(ctx);
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else {
            svelte_element.p(ctx, dirty);
          }
        } else if (previous_tag) {
          svelte_element.d(1);
          svelte_element = null;
        }

        previous_tag =
        /*tagTitre*/
        ctx[4];
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(svelte_element_anchor);
        if (svelte_element) svelte_element.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_else_block.name,
      type: "else",
      source: "(37:4) {:else}",
      ctx: ctx
    });
    return block;
  } // (27:4) {#if extensible === 'true'}


  function create_if_block_1$1(ctx) {
    var previous_tag =
    /*tagTitre*/
    ctx[4];
    var svelte_element_anchor;
    validate_dynamic_element(
    /*tagTitre*/
    ctx[4]);
    validate_void_dynamic_element(
    /*tagTitre*/
    ctx[4]);
    var svelte_element =
    /*tagTitre*/
    ctx[4] && create_dynamic_element(ctx);
    var block = {
      c: function create() {
        if (svelte_element) svelte_element.c();
        svelte_element_anchor = empty();
      },
      m: function mount(target, anchor) {
        if (svelte_element) svelte_element.m(target, anchor);
        insert_dev(target, svelte_element_anchor, anchor);
      },
      p: function update(ctx, dirty) {
        if (
        /*tagTitre*/
        ctx[4]) {
          if (!previous_tag) {
            svelte_element = create_dynamic_element(ctx);
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else if (safe_not_equal(previous_tag,
          /*tagTitre*/
          ctx[4])) {
            svelte_element.d(1);
            validate_dynamic_element(
            /*tagTitre*/
            ctx[4]);
            validate_void_dynamic_element(
            /*tagTitre*/
            ctx[4]);
            svelte_element = create_dynamic_element(ctx);
            svelte_element.c();
            svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
          } else {
            svelte_element.p(ctx, dirty);
          }
        } else if (previous_tag) {
          svelte_element.d(1);
          svelte_element = null;
        }

        previous_tag =
        /*tagTitre*/
        ctx[4];
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(svelte_element_anchor);
        if (svelte_element) svelte_element.d(detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1$1.name,
      type: "if",
      source: "(27:4) {#if extensible === 'true'}",
      ctx: ctx
    });
    return block;
  } // (39:8) {#if titre}


  function create_if_block_4$1(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text(
        /*titre*/
        ctx[2]);
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titre*/
        4) set_data_dev(t,
        /*titre*/
        ctx[2]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4$1.name,
      type: "if",
      source: "(39:8) {#if titre}",
      ctx: ctx
    });
    return block;
  } // (38:6) <svelte:element this={tagTitre} class="titre">


  function create_dynamic_element_1(ctx) {
    var svelte_element;
    var t;
    var slot;
    var if_block =
    /*titre*/
    ctx[2] && create_if_block_4$1(ctx);
    var svelte_element_levels = [{
      class: "titre"
    }];
    var svelte_element_data = {};

    for (var i = 0; i < svelte_element_levels.length; i += 1) {
      svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
    }

    var block = {
      c: function create() {
        svelte_element = element(
        /*tagTitre*/
        ctx[4]);
        if (if_block) if_block.c();
        t = space();
        slot = element("slot");
        attr_dev(slot, "name", "titre");
        add_location(slot, file$4, 41, 8, 1427);
        set_attributes(svelte_element, svelte_element_data);
        add_location(svelte_element, file$4, 37, 6, 1315);
      },
      m: function mount(target, anchor) {
        insert_dev(target, svelte_element, anchor);
        if (if_block) if_block.m(svelte_element, null);
        append_dev(svelte_element, t);
        append_dev(svelte_element, slot);
      },
      p: function update(ctx, dirty) {
        if (
        /*titre*/
        ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block_4$1(ctx);
            if_block.c();
            if_block.m(svelte_element, t);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        set_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [{
          class: "titre"
        }]));
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(svelte_element);
        if (if_block) if_block.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_dynamic_element_1.name,
      type: "child_dynamic_element",
      source: "(38:6) <svelte:element this={tagTitre} class=\\\"titre\\\">",
      ctx: ctx
    });
    return block;
  } // (30:10) {#if titre}


  function create_if_block_2$1(ctx) {
    var t;
    var block = {
      c: function create() {
        t = text(
        /*titre*/
        ctx[2]);
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titre*/
        4) set_data_dev(t,
        /*titre*/
        ctx[2]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2$1.name,
      type: "if",
      source: "(30:10) {#if titre}",
      ctx: ctx
    });
    return block;
  } // (28:4) <svelte:element this={tagTitre} class="titre">


  function create_dynamic_element(ctx) {
    var svelte_element;
    var button;
    var t0;
    var slot;
    var t1;
    var span;
    var button_aria_expanded_value;
    var mounted;
    var dispose;
    var if_block =
    /*titre*/
    ctx[2] && create_if_block_2$1(ctx);
    var svelte_element_levels = [{
      class: "titre"
    }];
    var svelte_element_data = {};

    for (var i = 0; i < svelte_element_levels.length; i += 1) {
      svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
    }

    var block = {
      c: function create() {
        svelte_element = element(
        /*tagTitre*/
        ctx[4]);
        button = element("button");
        if (if_block) if_block.c();
        t0 = space();
        slot = element("slot");
        t1 = space();
        span = element("span");
        attr_dev(slot, "name", "titre");
        add_location(slot, file$4, 32, 10, 1153);
        attr_dev(span, "class", "utd-icone-svg chevron-blanc");
        add_location(span, file$4, 33, 8, 1196);
        attr_dev(button, "type", "button");
        attr_dev(button, "class", "");
        attr_dev(button, "aria-controls",
        /*idContenu*/
        ctx[5]);
        attr_dev(button, "aria-expanded", button_aria_expanded_value =
        /*reduit*/
        ctx[0] === 'false');
        add_location(button, file$4, 28, 6, 950);
        set_attributes(svelte_element, svelte_element_data);
        add_location(svelte_element, file$4, 27, 4, 895);
      },
      m: function mount(target, anchor) {
        insert_dev(target, svelte_element, anchor);
        append_dev(svelte_element, button);
        if (if_block) if_block.m(button, null);
        append_dev(button, t0);
        append_dev(button, slot);
        append_dev(button, t1);
        append_dev(button, span);

        if (!mounted) {
          dispose = listen_dev(button, "click",
          /*toggleAffichageContenu*/
          ctx[6], false, false, false);
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (
        /*titre*/
        ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block_2$1(ctx);
            if_block.c();
            if_block.m(button, t0);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty &
        /*reduit*/
        1 && button_aria_expanded_value !== (button_aria_expanded_value =
        /*reduit*/
        ctx[0] === 'false')) {
          attr_dev(button, "aria-expanded", button_aria_expanded_value);
        }

        set_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [{
          class: "titre"
        }]));
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(svelte_element);
        if (if_block) if_block.d();
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_dynamic_element.name,
      type: "child_dynamic_element",
      source: "(28:4) <svelte:element this={tagTitre} class=\\\"titre\\\">",
      ctx: ctx
    });
    return block;
  } // (49:4) {#if extensible === 'false' || reduit === 'false'}


  function create_if_block$4(ctx) {
    var div;
    var slot;
    var div_transition;
    var current;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        add_location(slot, file$4, 50, 6, 1659);
        add_location(div, file$4, 49, 4, 1610);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
        current = true;
      },
      i: function intro(local) {
        if (current) return;
        add_render_callback(function () {
          if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
            duration: 250
          }, true);
          div_transition.run(1);
        });
        current = true;
      },
      o: function outro(local) {
        if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {
          duration: 250
        }, false);
        div_transition.run(0);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if (detaching && div_transition) div_transition.end();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$4.name,
      type: "if",
      source: "(49:4) {#if extensible === 'false' || reduit === 'false'}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$4(ctx) {
    var div2;
    var div0;
    var t0;
    var div1;
    var div2_class_value;
    var t1;
    var link;
    var current;

    function select_block_type(ctx, dirty) {
      if (
      /*extensible*/
      ctx[1] === 'true') return create_if_block_1$1;
      return create_else_block;
    }

    var current_block_type = select_block_type(ctx);
    var if_block0 = current_block_type(ctx);
    var if_block1 = (
    /*extensible*/
    ctx[1] === 'false' ||
    /*reduit*/
    ctx[0] === 'false') && create_if_block$4(ctx);
    var block = {
      c: function create() {
        div2 = element("div");
        div0 = element("div");
        if_block0.c();
        t0 = space();
        div1 = element("div");
        if (if_block1) if_block1.c();
        t1 = space();
        link = element("link");
        this.c = noop;
        attr_dev(div0, "class", "entete");
        add_location(div0, file$4, 25, 2, 836);
        attr_dev(div1, "id",
        /*idContenu*/
        ctx[5]);
        attr_dev(div1, "class", "contenu");
        add_location(div1, file$4, 47, 2, 1509);
        attr_dev(div2, "class", div2_class_value = "utd-component utd-section " + (
        /*extensible*/
        ctx[1] === 'true' ? 'extensible' : '') + " " + (
        /*reduit*/
        ctx[0] === 'false' ? 'ouvert' : '') + " " + (
        /*bordure*/
        ctx[3] === 'true' ? 'bordure' : ''));
        add_location(div2, file$4, 24, 0, 673);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$4, 57, 0, 1713);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div2, anchor);
        append_dev(div2, div0);
        if_block0.m(div0, null);
        append_dev(div2, t0);
        append_dev(div2, div1);
        if (if_block1) if_block1.m(div1, null);
        insert_dev(target, t1, anchor);
        insert_dev(target, link, anchor);
        current = true;
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0.d(1);
          if_block0 = current_block_type(ctx);

          if (if_block0) {
            if_block0.c();
            if_block0.m(div0, null);
          }
        }

        if (
        /*extensible*/
        ctx[1] === 'false' ||
        /*reduit*/
        ctx[0] === 'false') {
          if (if_block1) {
            if (dirty &
            /*extensible, reduit*/
            3) {
              transition_in(if_block1, 1);
            }
          } else {
            if_block1 = create_if_block$4(ctx);
            if_block1.c();
            transition_in(if_block1, 1);
            if_block1.m(div1, null);
          }
        } else if (if_block1) {
          group_outros();
          transition_out(if_block1, 1, 1, function () {
            if_block1 = null;
          });
          check_outros();
        }

        if (!current || dirty &
        /*extensible, reduit, bordure*/
        11 && div2_class_value !== (div2_class_value = "utd-component utd-section " + (
        /*extensible*/
        ctx[1] === 'true' ? 'extensible' : '') + " " + (
        /*reduit*/
        ctx[0] === 'false' ? 'ouvert' : '') + " " + (
        /*bordure*/
        ctx[3] === 'true' ? 'bordure' : ''))) {
          attr_dev(div2, "class", div2_class_value);
        }
      },
      i: function intro(local) {
        if (current) return;
        transition_in(if_block1);
        current = true;
      },
      o: function outro(local) {
        transition_out(if_block1);
        current = false;
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div2);
        if_block0.d();
        if (if_block1) if_block1.d();
        if (detaching) detach_dev(t1);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$4.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$4($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-section', slots, []);
    var _$$props$extensible = $$props.extensible,
        extensible = _$$props$extensible === void 0 ? "true" : _$$props$extensible;
    var _$$props$reduit = $$props.reduit,
        reduit = _$$props$reduit === void 0 ? "true" : _$$props$reduit;
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? "" : _$$props$titre;
    var _$$props$bordure = $$props.bordure,
        bordure = _$$props$bordure === void 0 ? "true" : _$$props$bordure;
    var _$$props$tagTitre = $$props.tagTitre,
        tagTitre = _$$props$tagTitre === void 0 ? "h2" : _$$props$tagTitre;
    var idEntete = Utils.genererId();
    var idContenu = 'corps' + idEntete; //TODO éventuellement déterminer automatiquement le niveau de header via un script? 

    function toggleAffichageContenu() {
      $$invalidate(0, reduit = reduit === 'true' ? 'false' : 'true');
    }

    var writable_props = ['extensible', 'reduit', 'titre', 'bordure', 'tagTitre'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-section> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('extensible' in $$props) $$invalidate(1, extensible = $$props.extensible);
      if ('reduit' in $$props) $$invalidate(0, reduit = $$props.reduit);
      if ('titre' in $$props) $$invalidate(2, titre = $$props.titre);
      if ('bordure' in $$props) $$invalidate(3, bordure = $$props.bordure);
      if ('tagTitre' in $$props) $$invalidate(4, tagTitre = $$props.tagTitre);
    };

    $$self.$capture_state = function () {
      return {
        slide: slide,
        Utils: Utils,
        extensible: extensible,
        reduit: reduit,
        titre: titre,
        bordure: bordure,
        tagTitre: tagTitre,
        idEntete: idEntete,
        idContenu: idContenu,
        toggleAffichageContenu: toggleAffichageContenu
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('extensible' in $$props) $$invalidate(1, extensible = $$props.extensible);
      if ('reduit' in $$props) $$invalidate(0, reduit = $$props.reduit);
      if ('titre' in $$props) $$invalidate(2, titre = $$props.titre);
      if ('bordure' in $$props) $$invalidate(3, bordure = $$props.bordure);
      if ('tagTitre' in $$props) $$invalidate(4, tagTitre = $$props.tagTitre);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [reduit, extensible, titre, bordure, tagTitre, idContenu, toggleAffichageContenu];
  }

  var Section = /*#__PURE__*/function (_SvelteElement) {
    _inherits(Section, _SvelteElement);

    var _super = _createSuper$4(Section);

    function Section(options) {
      var _this;

      _classCallCheck(this, Section);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$4, create_fragment$4, safe_not_equal, {
        extensible: 1,
        reduit: 0,
        titre: 2,
        bordure: 3,
        tagTitre: 4
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(Section, [{
      key: "extensible",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(extensible) {
        this.$$set({
          extensible: extensible
        });
        flush();
      }
    }, {
      key: "reduit",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(reduit) {
        this.$$set({
          reduit: reduit
        });
        flush();
      }
    }, {
      key: "titre",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "bordure",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(bordure) {
        this.$$set({
          bordure: bordure
        });
        flush();
      }
    }, {
      key: "tagTitre",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(tagTitre) {
        this.$$set({
          tagTitre: tagTitre
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["extensible", "reduit", "titre", "bordure", "tagTitre"];
      }
    }]);

    return Section;
  }(SvelteElement);

  customElements.define("utd-section", Section);

  function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$3 = "src\\components\\menuAncres.svelte";

  function get_each_context(ctx, list, i) {
    var child_ctx = ctx.slice();
    child_ctx[4] = list[i];
    return child_ctx;
  } // (34:0) {#if ancres && ancres.length}


  function create_if_block$3(ctx) {
    var div;
    var h2;
    var t0;
    var t1;
    var nav;
    var ul;
    var each_value =
    /*ancres*/
    ctx[1];
    validate_each_argument(each_value);
    var each_blocks = [];

    for (var i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    }

    var block = {
      c: function create() {
        div = element("div");
        h2 = element("h2");
        t0 = text(
        /*titre*/
        ctx[0]);
        t1 = space();
        nav = element("nav");
        ul = element("ul");

        for (var _i = 0; _i < each_blocks.length; _i += 1) {
          each_blocks[_i].c();
        }

        attr_dev(h2, "id", "titreTableMatieres");
        add_location(h2, file$3, 35, 4, 790);
        add_location(ul, file$3, 37, 6, 887);
        attr_dev(nav, "aria-describedby", "titreTableMatieres");
        add_location(nav, file$3, 36, 4, 836);
        attr_dev(div, "class", "utd-component utd-menu-ancres");
        add_location(div, file$3, 34, 2, 741);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, h2);
        append_dev(h2, t0);
        append_dev(div, t1);
        append_dev(div, nav);
        append_dev(nav, ul);

        for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
          each_blocks[_i2].m(ul, null);
        }
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titre*/
        1) set_data_dev(t0,
        /*titre*/
        ctx[0]);

        if (dirty &
        /*ancres*/
        2) {
          each_value =
          /*ancres*/
          ctx[1];
          validate_each_argument(each_value);

          var _i3;

          for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
            var child_ctx = get_each_context(ctx, each_value, _i3);

            if (each_blocks[_i3]) {
              each_blocks[_i3].p(child_ctx, dirty);
            } else {
              each_blocks[_i3] = create_each_block(child_ctx);

              each_blocks[_i3].c();

              each_blocks[_i3].m(ul, null);
            }
          }

          for (; _i3 < each_blocks.length; _i3 += 1) {
            each_blocks[_i3].d(1);
          }

          each_blocks.length = each_value.length;
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        destroy_each(each_blocks, detaching);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$3.name,
      type: "if",
      source: "(34:0) {#if ancres && ancres.length}",
      ctx: ctx
    });
    return block;
  } // (39:8) {#each ancres as ancre}


  function create_each_block(ctx) {
    var li;
    var a;
    var t0_value =
    /*ancre*/
    ctx[4].innerText + "";
    var t0;
    var a_href_value;
    var t1;
    var block = {
      c: function create() {
        li = element("li");
        a = element("a");
        t0 = text(t0_value);
        t1 = space();
        attr_dev(a, "href", a_href_value = "#" +
        /*ancre*/
        ctx[4].id);
        add_location(a, file$3, 40, 12, 954);
        add_location(li, file$3, 39, 10, 936);
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor);
        append_dev(li, a);
        append_dev(a, t0);
        append_dev(li, t1);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*ancres*/
        2 && t0_value !== (t0_value =
        /*ancre*/
        ctx[4].innerText + "")) set_data_dev(t0, t0_value);

        if (dirty &
        /*ancres*/
        2 && a_href_value !== (a_href_value = "#" +
        /*ancre*/
        ctx[4].id)) {
          attr_dev(a, "href", a_href_value);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_each_block.name,
      type: "each",
      source: "(39:8) {#each ancres as ancre}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$3(ctx) {
    var t;
    var link;
    var if_block =
    /*ancres*/
    ctx[1] &&
    /*ancres*/
    ctx[1].length && create_if_block$3(ctx);
    var block = {
      c: function create() {
        if (if_block) if_block.c();
        t = space();
        link = element("link");
        this.c = noop;
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$3, 48, 0, 1101);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        if (if_block) if_block.m(target, anchor);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (
        /*ancres*/
        ctx[1] &&
        /*ancres*/
        ctx[1].length) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block$3(ctx);
            if_block.c();
            if_block.m(t.parentNode, t);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (if_block) if_block.d(detaching);
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$3.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$3($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-menu-ancres', slots, []);
    var _$$props$titre = $$props.titre,
        titre = _$$props$titre === void 0 ? Utils.obtenirLanguePage() === 'fr' ? "Dans cette page :" : "On this page:" : _$$props$titre;
    var _$$props$selecteur = $$props.selecteur,
        selecteur = _$$props$selecteur === void 0 ? '.ancre' : _$$props$selecteur;
    var ancres;
    onMount(function () {
      $$invalidate(1, ancres = obtenirAncres());
    });

    function obtenirAncres() {
      var ancres = document.querySelectorAll(selecteur); //Ajouter un id aux ancres qui n'en n'auraient pas

      ancres.forEach(function (ancre) {
        if (!ancre.id) {
          ancre.id = Utils.genererId();
        }
      });
      return ancres;
    }

    var writable_props = ['titre', 'selecteur'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-menu-ancres> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('selecteur' in $$props) $$invalidate(2, selecteur = $$props.selecteur);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        titre: titre,
        selecteur: selecteur,
        ancres: ancres,
        obtenirAncres: obtenirAncres
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('titre' in $$props) $$invalidate(0, titre = $$props.titre);
      if ('selecteur' in $$props) $$invalidate(2, selecteur = $$props.selecteur);
      if ('ancres' in $$props) $$invalidate(1, ancres = $$props.ancres);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [titre, ancres, selecteur];
  }

  var MenuAncres = /*#__PURE__*/function (_SvelteElement) {
    _inherits(MenuAncres, _SvelteElement);

    var _super = _createSuper$3(MenuAncres);

    function MenuAncres(options) {
      var _this;

      _classCallCheck(this, MenuAncres);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$3, create_fragment$3, safe_not_equal, {
        titre: 0,
        selecteur: 2
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(MenuAncres, [{
      key: "titre",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(titre) {
        this.$$set({
          titre: titre
        });
        flush();
      }
    }, {
      key: "selecteur",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(selecteur) {
        this.$$set({
          selecteur: selecteur
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["titre", "selecteur"];
      }
    }]);

    return MenuAncres;
  }(SvelteElement);

  customElements.define("utd-menu-ancres", MenuAncres);

  function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$2 = "src\\components\\pivEntete.svelte"; // (38:0) {#if passerContenu === 'true'}

  function create_if_block_9(ctx) {
    var div1;
    var div0;
    var a;
    var t;
    var mounted;
    var dispose;
    var block = {
      c: function create() {
        div1 = element("div");
        div0 = element("div");
        a = element("a");
        t = text(
        /*textePasserContenu*/
        ctx[12]);
        attr_dev(a, "href",
        /*urlPasserContenu*/
        ctx[11]);
        attr_dev(a, "class", "utd-passer-contenu");
        add_location(a, file$2, 40, 8, 1454);
        attr_dev(div0, "class", "utd-passer-contenu");
        add_location(div0, file$2, 39, 4, 1412);
        attr_dev(div1, "class", "utd-conteneur-passer-contenu");
        add_location(div1, file$2, 38, 2, 1364);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, div0);
        append_dev(div0, a);
        append_dev(a, t);

        if (!mounted) {
          dispose = listen_dev(a, "click",
          /*clickLien*/
          ctx[14], false, false, false);
          mounted = true;
        }
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*textePasserContenu*/
        4096) set_data_dev(t,
        /*textePasserContenu*/
        ctx[12]);

        if (dirty &
        /*urlPasserContenu*/
        2048) {
          attr_dev(a, "href",
          /*urlPasserContenu*/
          ctx[11]);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        mounted = false;
        dispose();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_9.name,
      type: "if",
      source: "(38:0) {#if passerContenu === 'true'}",
      ctx: ctx
    });
    return block;
  } // (57:10) {#if titreSite2}


  function create_if_block_8(ctx) {
    var span;
    var t;
    var block = {
      c: function create() {
        span = element("span");
        t = text(
        /*titreSite2*/
        ctx[4]);
        attr_dev(span, "class", "description");
        add_location(span, file$2, 57, 12, 2023);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, t);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titreSite2*/
        16) set_data_dev(t,
        /*titreSite2*/
        ctx[4]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_8.name,
      type: "if",
      source: "(57:10) {#if titreSite2}",
      ctx: ctx
    });
    return block;
  } // (64:8) {#if Utils.slotExiste(slots, 'boutonRecherche')}


  function create_if_block_7(ctx) {
    var div;
    var slot;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        attr_dev(slot, "name", "boutonRecherche");
        add_location(slot, file$2, 65, 12, 2276);
        attr_dev(div, "class", "bouton-recherche");
        add_location(div, file$2, 64, 10, 2232);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_7.name,
      type: "if",
      source: "(64:8) {#if Utils.slotExiste(slots, 'boutonRecherche')}",
      ctx: ctx
    });
    return block;
  } // (74:10) {#if urlNousJoindre || urlLangueAlternative}


  function create_if_block_4(ctx) {
    var ul;
    var t;
    var if_block0 =
    /*urlLangueAlternative*/
    ctx[7] && create_if_block_6(ctx);
    var if_block1 =
    /*urlNousJoindre*/
    ctx[9] && create_if_block_5(ctx);
    var block = {
      c: function create() {
        ul = element("ul");
        if (if_block0) if_block0.c();
        t = space();
        if (if_block1) if_block1.c();
        add_location(ul, file$2, 74, 12, 2524);
      },
      m: function mount(target, anchor) {
        insert_dev(target, ul, anchor);
        if (if_block0) if_block0.m(ul, null);
        append_dev(ul, t);
        if (if_block1) if_block1.m(ul, null);
      },
      p: function update(ctx, dirty) {
        if (
        /*urlLangueAlternative*/
        ctx[7]) {
          if (if_block0) {
            if_block0.p(ctx, dirty);
          } else {
            if_block0 = create_if_block_6(ctx);
            if_block0.c();
            if_block0.m(ul, t);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (
        /*urlNousJoindre*/
        ctx[9]) {
          if (if_block1) {
            if_block1.p(ctx, dirty);
          } else {
            if_block1 = create_if_block_5(ctx);
            if_block1.c();
            if_block1.m(ul, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(ul);
        if (if_block0) if_block0.d();
        if (if_block1) if_block1.d();
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_4.name,
      type: "if",
      source: "(74:10) {#if urlNousJoindre || urlLangueAlternative}",
      ctx: ctx
    });
    return block;
  } // (71:8) {#if Utils.slotExiste(slots, 'liens')}


  function create_if_block_3(ctx) {
    var slot;
    var block = {
      c: function create() {
        slot = element("slot");
        attr_dev(slot, "name", "liens");
        add_location(slot, file$2, 71, 10, 2412);
      },
      m: function mount(target, anchor) {
        insert_dev(target, slot, anchor);
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(slot);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_3.name,
      type: "if",
      source: "(71:8) {#if Utils.slotExiste(slots, 'liens')}",
      ctx: ctx
    });
    return block;
  } // (76:14) {#if urlLangueAlternative}


  function create_if_block_6(ctx) {
    var li;
    var a;
    var t;
    var block = {
      c: function create() {
        li = element("li");
        a = element("a");
        t = text(
        /*texteLangueAlternative*/
        ctx[6]);
        attr_dev(a, "href",
        /*urlLangueAlternative*/
        ctx[7]);
        add_location(a, file$2, 76, 20, 2592);
        add_location(li, file$2, 76, 16, 2588);
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor);
        append_dev(li, a);
        append_dev(a, t);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*texteLangueAlternative*/
        64) set_data_dev(t,
        /*texteLangueAlternative*/
        ctx[6]);

        if (dirty &
        /*urlLangueAlternative*/
        128) {
          attr_dev(a, "href",
          /*urlLangueAlternative*/
          ctx[7]);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_6.name,
      type: "if",
      source: "(76:14) {#if urlLangueAlternative}",
      ctx: ctx
    });
    return block;
  } // (79:14) {#if urlNousJoindre}


  function create_if_block_5(ctx) {
    var li;
    var a;
    var t;
    var block = {
      c: function create() {
        li = element("li");
        a = element("a");
        t = text(
        /*texteNousJoindre*/
        ctx[8]);
        attr_dev(a, "href",
        /*urlNousJoindre*/
        ctx[9]);
        add_location(a, file$2, 79, 20, 2753);
        add_location(li, file$2, 79, 16, 2749);
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor);
        append_dev(li, a);
        append_dev(a, t);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*texteNousJoindre*/
        256) set_data_dev(t,
        /*texteNousJoindre*/
        ctx[8]);

        if (dirty &
        /*urlNousJoindre*/
        512) {
          attr_dev(a, "href",
          /*urlNousJoindre*/
          ctx[9]);
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_5.name,
      type: "if",
      source: "(79:14) {#if urlNousJoindre}",
      ctx: ctx
    });
    return block;
  } // (90:8) {#if titreSite2}


  function create_if_block_2(ctx) {
    var span;
    var t;
    var block = {
      c: function create() {
        span = element("span");
        t = text(
        /*titreSite2*/
        ctx[4]);
        attr_dev(span, "class", "description");
        add_location(span, file$2, 90, 10, 3062);
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor);
        append_dev(span, t);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*titreSite2*/
        16) set_data_dev(t,
        /*titreSite2*/
        ctx[4]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_2.name,
      type: "if",
      source: "(90:8) {#if titreSite2}",
      ctx: ctx
    });
    return block;
  } // (95:6) {#if Utils.slotExiste(slots, 'boutonRechercheMobile')}


  function create_if_block_1(ctx) {
    var div;
    var slot;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        attr_dev(slot, "name", "boutonRechercheMobile");
        add_location(slot, file$2, 96, 10, 3254);
        attr_dev(div, "class", "bouton-recherche");
        add_location(div, file$2, 95, 8, 3212);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block_1.name,
      type: "if",
      source: "(95:6) {#if Utils.slotExiste(slots, 'boutonRechercheMobile')}",
      ctx: ctx
    });
    return block;
  } // (101:4) {#if Utils.slotExiste(slots, 'zoneRecherche')}


  function create_if_block$2(ctx) {
    var div;
    var slot;
    var block = {
      c: function create() {
        div = element("div");
        slot = element("slot");
        attr_dev(slot, "name", "zoneRecherche");
        add_location(slot, file$2, 102, 8, 3448);
        attr_dev(div, "class", "zone-recherche");
        add_location(div, file$2, 101, 6, 3410);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, slot);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$2.name,
      type: "if",
      source: "(101:4) {#if Utils.slotExiste(slots, 'zoneRecherche')}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$2(ctx) {
    var t0;
    var div7;
    var div6;
    var div3;
    var div0;
    var a0;
    var img;
    var img_src_value;
    var t1;
    var div1;
    var a1;
    var span0;
    var t2;
    var t3;
    var t4;
    var div2;
    var show_if_3 = Utils.slotExiste(
    /*slots*/
    ctx[13], 'boutonRecherche');
    var t5;
    var show_if_2;
    var t6;
    var div5;
    var div4;
    var span1;
    var t7;
    var t8;
    var t9;
    var show_if_1 = Utils.slotExiste(
    /*slots*/
    ctx[13], 'boutonRechercheMobile');
    var t10;
    var show_if = Utils.slotExiste(
    /*slots*/
    ctx[13], 'zoneRecherche');
    var t11;
    var link;
    var if_block0 =
    /*passerContenu*/
    ctx[10] === 'true' && create_if_block_9(ctx);
    var if_block1 =
    /*titreSite2*/
    ctx[4] && create_if_block_8(ctx);
    var if_block2 = show_if_3 && create_if_block_7(ctx);

    function select_block_type(ctx, dirty) {
      if (dirty &
      /*slots*/
      8192) show_if_2 = null;
      if (show_if_2 == null) show_if_2 = !!Utils.slotExiste(
      /*slots*/
      ctx[13], 'liens');
      if (show_if_2) return create_if_block_3;
      if (
      /*urlNousJoindre*/
      ctx[9] ||
      /*urlLangueAlternative*/
      ctx[7]) return create_if_block_4;
    }

    var current_block_type = select_block_type(ctx, -1);
    var if_block3 = current_block_type && current_block_type(ctx);
    var if_block4 =
    /*titreSite2*/
    ctx[4] && create_if_block_2(ctx);
    var if_block5 = show_if_1 && create_if_block_1(ctx);
    var if_block6 = show_if && create_if_block$2(ctx);
    var block = {
      c: function create() {
        if (if_block0) if_block0.c();
        t0 = space();
        div7 = element("div");
        div6 = element("div");
        div3 = element("div");
        div0 = element("div");
        a0 = element("a");
        img = element("img");
        t1 = space();
        div1 = element("div");
        a1 = element("a");
        span0 = element("span");
        t2 = text(
        /*titreSite1*/
        ctx[3]);
        t3 = space();
        if (if_block1) if_block1.c();
        t4 = space();
        div2 = element("div");
        if (if_block2) if_block2.c();
        t5 = space();
        if (if_block3) if_block3.c();
        t6 = space();
        div5 = element("div");
        div4 = element("div");
        span1 = element("span");
        t7 = text(
        /*titreSite1*/
        ctx[3]);
        t8 = space();
        if (if_block4) if_block4.c();
        t9 = space();
        if (if_block5) if_block5.c();
        t10 = space();
        if (if_block6) if_block6.c();
        t11 = space();
        link = element("link");
        this.c = noop;
        attr_dev(img, "alt",
        /*altLogo*/
        ctx[2]);
        if (!src_url_equal(img.src, img_src_value =
        /*srcLogo*/
        ctx[1])) attr_dev(img, "src", img_src_value);
        add_location(img, file$2, 50, 10, 1789);
        attr_dev(a0, "href",
        /*urlLogo*/
        ctx[0]);
        add_location(a0, file$2, 49, 8, 1757);
        attr_dev(div0, "class", "section-gauche signature-gouvernement");
        add_location(div0, file$2, 48, 6, 1696);
        add_location(span0, file$2, 55, 10, 1956);
        attr_dev(a1, "href",
        /*urlTitreSite*/
        ctx[5]);
        attr_dev(a1, "class", "titre-site");
        add_location(a1, file$2, 54, 8, 1900);
        attr_dev(div1, "class", "section-centre");
        add_location(div1, file$2, 53, 6, 1862);
        attr_dev(div2, "class", "section-droite");
        add_location(div2, file$2, 62, 6, 2134);
        attr_dev(div3, "class", "conteneur-sections");
        add_location(div3, file$2, 47, 4, 1656);
        add_location(span1, file$2, 88, 8, 2999);
        attr_dev(div4, "class", "titre-site");
        add_location(div4, file$2, 87, 6, 2965);
        attr_dev(div5, "class", "zone-titre-recherche");
        add_location(div5, file$2, 86, 4, 2923);
        attr_dev(div6, "class", "utd-container");
        add_location(div6, file$2, 46, 2, 1623);
        attr_dev(div7, "class", "utd-piv-entete");
        add_location(div7, file$2, 45, 0, 1591);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$2, 111, 0, 3538);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        if (if_block0) if_block0.m(target, anchor);
        insert_dev(target, t0, anchor);
        insert_dev(target, div7, anchor);
        append_dev(div7, div6);
        append_dev(div6, div3);
        append_dev(div3, div0);
        append_dev(div0, a0);
        append_dev(a0, img);
        append_dev(div3, t1);
        append_dev(div3, div1);
        append_dev(div1, a1);
        append_dev(a1, span0);
        append_dev(span0, t2);
        append_dev(a1, t3);
        if (if_block1) if_block1.m(a1, null);
        append_dev(div3, t4);
        append_dev(div3, div2);
        if (if_block2) if_block2.m(div2, null);
        append_dev(div2, t5);
        if (if_block3) if_block3.m(div2, null);
        append_dev(div6, t6);
        append_dev(div6, div5);
        append_dev(div5, div4);
        append_dev(div4, span1);
        append_dev(span1, t7);
        append_dev(div4, t8);
        if (if_block4) if_block4.m(div4, null);
        append_dev(div5, t9);
        if (if_block5) if_block5.m(div5, null);
        append_dev(div6, t10);
        if (if_block6) if_block6.m(div6, null);
        insert_dev(target, t11, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (
        /*passerContenu*/
        ctx[10] === 'true') {
          if (if_block0) {
            if_block0.p(ctx, dirty);
          } else {
            if_block0 = create_if_block_9(ctx);
            if_block0.c();
            if_block0.m(t0.parentNode, t0);
          }
        } else if (if_block0) {
          if_block0.d(1);
          if_block0 = null;
        }

        if (dirty &
        /*altLogo*/
        4) {
          attr_dev(img, "alt",
          /*altLogo*/
          ctx[2]);
        }

        if (dirty &
        /*srcLogo*/
        2 && !src_url_equal(img.src, img_src_value =
        /*srcLogo*/
        ctx[1])) {
          attr_dev(img, "src", img_src_value);
        }

        if (dirty &
        /*urlLogo*/
        1) {
          attr_dev(a0, "href",
          /*urlLogo*/
          ctx[0]);
        }

        if (dirty &
        /*titreSite1*/
        8) set_data_dev(t2,
        /*titreSite1*/
        ctx[3]);

        if (
        /*titreSite2*/
        ctx[4]) {
          if (if_block1) {
            if_block1.p(ctx, dirty);
          } else {
            if_block1 = create_if_block_8(ctx);
            if_block1.c();
            if_block1.m(a1, null);
          }
        } else if (if_block1) {
          if_block1.d(1);
          if_block1 = null;
        }

        if (dirty &
        /*urlTitreSite*/
        32) {
          attr_dev(a1, "href",
          /*urlTitreSite*/
          ctx[5]);
        }

        if (dirty &
        /*slots*/
        8192) show_if_3 = Utils.slotExiste(
        /*slots*/
        ctx[13], 'boutonRecherche');

        if (show_if_3) {
          if (if_block2) ; else {
            if_block2 = create_if_block_7(ctx);
            if_block2.c();
            if_block2.m(div2, t5);
          }
        } else if (if_block2) {
          if_block2.d(1);
          if_block2 = null;
        }

        if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block3) {
          if_block3.p(ctx, dirty);
        } else {
          if (if_block3) if_block3.d(1);
          if_block3 = current_block_type && current_block_type(ctx);

          if (if_block3) {
            if_block3.c();
            if_block3.m(div2, null);
          }
        }

        if (dirty &
        /*titreSite1*/
        8) set_data_dev(t7,
        /*titreSite1*/
        ctx[3]);

        if (
        /*titreSite2*/
        ctx[4]) {
          if (if_block4) {
            if_block4.p(ctx, dirty);
          } else {
            if_block4 = create_if_block_2(ctx);
            if_block4.c();
            if_block4.m(div4, null);
          }
        } else if (if_block4) {
          if_block4.d(1);
          if_block4 = null;
        }

        if (dirty &
        /*slots*/
        8192) show_if_1 = Utils.slotExiste(
        /*slots*/
        ctx[13], 'boutonRechercheMobile');

        if (show_if_1) {
          if (if_block5) ; else {
            if_block5 = create_if_block_1(ctx);
            if_block5.c();
            if_block5.m(div5, null);
          }
        } else if (if_block5) {
          if_block5.d(1);
          if_block5 = null;
        }

        if (dirty &
        /*slots*/
        8192) show_if = Utils.slotExiste(
        /*slots*/
        ctx[13], 'zoneRecherche');

        if (show_if) {
          if (if_block6) ; else {
            if_block6 = create_if_block$2(ctx);
            if_block6.c();
            if_block6.m(div6, null);
          }
        } else if (if_block6) {
          if_block6.d(1);
          if_block6 = null;
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (if_block0) if_block0.d(detaching);
        if (detaching) detach_dev(t0);
        if (detaching) detach_dev(div7);
        if (if_block1) if_block1.d();
        if (if_block2) if_block2.d();

        if (if_block3) {
          if_block3.d();
        }

        if (if_block4) if_block4.d();
        if (if_block5) if_block5.d();
        if (if_block6) if_block6.d();
        if (detaching) detach_dev(t11);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$2.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$2($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots$1 = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-piv-entete', slots$1, []);
    var _$$props$urlLogo = $$props.urlLogo,
        urlLogo = _$$props$urlLogo === void 0 ? '/' : _$$props$urlLogo;
    var _$$props$srcLogo = $$props.srcLogo,
        srcLogo = _$$props$srcLogo === void 0 ? "".concat(Utils.imagesRelativePath, "utd-sprite.svg?v=1.7.7#QUEBEC_blanc") : _$$props$srcLogo;
    var _$$props$altLogo = $$props.altLogo,
        altLogo = _$$props$altLogo === void 0 ? Utils.obtenirLanguePage() === 'fr' ? 'Signature du gouvernement du Québec.' : 'Québec government signature.' : _$$props$altLogo;
    var _$$props$titreSite = $$props.titreSite1,
        titreSite1 = _$$props$titreSite === void 0 ? '' : _$$props$titreSite;
    var _$$props$titreSite2 = $$props.titreSite2,
        titreSite2 = _$$props$titreSite2 === void 0 ? '' : _$$props$titreSite2;
    var _$$props$urlTitreSite = $$props.urlTitreSite,
        urlTitreSite = _$$props$urlTitreSite === void 0 ? '/' : _$$props$urlTitreSite;
    var _$$props$texteLangueA = $$props.texteLangueAlternative,
        texteLangueAlternative = _$$props$texteLangueA === void 0 ? Utils.obtenirLanguePage() === 'fr' ? 'English' : 'Français' : _$$props$texteLangueA;
    var _$$props$urlLangueAlt = $$props.urlLangueAlternative,
        urlLangueAlternative = _$$props$urlLangueAlt === void 0 ? '' : _$$props$urlLangueAlt;
    var _$$props$texteNousJoi = $$props.texteNousJoindre,
        texteNousJoindre = _$$props$texteNousJoi === void 0 ? Utils.obtenirLanguePage() === 'fr' ? 'Nous joindre' : 'Contact us' : _$$props$texteNousJoi;
    var _$$props$urlNousJoind = $$props.urlNousJoindre,
        urlNousJoindre = _$$props$urlNousJoind === void 0 ? '' : _$$props$urlNousJoind;
    var _$$props$passerConten = $$props.passerContenu,
        passerContenu = _$$props$passerConten === void 0 ? 'true' : _$$props$passerConten;
    var _$$props$urlPasserCon = $$props.urlPasserContenu,
        urlPasserContenu = _$$props$urlPasserCon === void 0 ? '#main' : _$$props$urlPasserCon;
    var _$$props$textePasserC = $$props.textePasserContenu,
        textePasserContenu = _$$props$textePasserC === void 0 ? Utils.obtenirLanguePage() === 'fr' ? 'Passer au contenu' : 'Skip to content' : _$$props$textePasserC;
    var thisComponent = get_current_component();
    var slots = [];
    onMount(function () {
      $$invalidate(13, slots = Array.from(thisComponent.querySelectorAll('[slot]')));
    });

    function clickLien() {
      Utils.dispatchWcEvent(thisComponent, "clickLien");
    }

    var writable_props = ['urlLogo', 'srcLogo', 'altLogo', 'titreSite1', 'titreSite2', 'urlTitreSite', 'texteLangueAlternative', 'urlLangueAlternative', 'texteNousJoindre', 'urlNousJoindre', 'passerContenu', 'urlPasserContenu', 'textePasserContenu'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-piv-entete> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('urlLogo' in $$props) $$invalidate(0, urlLogo = $$props.urlLogo);
      if ('srcLogo' in $$props) $$invalidate(1, srcLogo = $$props.srcLogo);
      if ('altLogo' in $$props) $$invalidate(2, altLogo = $$props.altLogo);
      if ('titreSite1' in $$props) $$invalidate(3, titreSite1 = $$props.titreSite1);
      if ('titreSite2' in $$props) $$invalidate(4, titreSite2 = $$props.titreSite2);
      if ('urlTitreSite' in $$props) $$invalidate(5, urlTitreSite = $$props.urlTitreSite);
      if ('texteLangueAlternative' in $$props) $$invalidate(6, texteLangueAlternative = $$props.texteLangueAlternative);
      if ('urlLangueAlternative' in $$props) $$invalidate(7, urlLangueAlternative = $$props.urlLangueAlternative);
      if ('texteNousJoindre' in $$props) $$invalidate(8, texteNousJoindre = $$props.texteNousJoindre);
      if ('urlNousJoindre' in $$props) $$invalidate(9, urlNousJoindre = $$props.urlNousJoindre);
      if ('passerContenu' in $$props) $$invalidate(10, passerContenu = $$props.passerContenu);
      if ('urlPasserContenu' in $$props) $$invalidate(11, urlPasserContenu = $$props.urlPasserContenu);
      if ('textePasserContenu' in $$props) $$invalidate(12, textePasserContenu = $$props.textePasserContenu);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        get_current_component: get_current_component,
        urlLogo: urlLogo,
        srcLogo: srcLogo,
        altLogo: altLogo,
        titreSite1: titreSite1,
        titreSite2: titreSite2,
        urlTitreSite: urlTitreSite,
        texteLangueAlternative: texteLangueAlternative,
        urlLangueAlternative: urlLangueAlternative,
        texteNousJoindre: texteNousJoindre,
        urlNousJoindre: urlNousJoindre,
        passerContenu: passerContenu,
        urlPasserContenu: urlPasserContenu,
        textePasserContenu: textePasserContenu,
        thisComponent: thisComponent,
        slots: slots,
        clickLien: clickLien
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('urlLogo' in $$props) $$invalidate(0, urlLogo = $$props.urlLogo);
      if ('srcLogo' in $$props) $$invalidate(1, srcLogo = $$props.srcLogo);
      if ('altLogo' in $$props) $$invalidate(2, altLogo = $$props.altLogo);
      if ('titreSite1' in $$props) $$invalidate(3, titreSite1 = $$props.titreSite1);
      if ('titreSite2' in $$props) $$invalidate(4, titreSite2 = $$props.titreSite2);
      if ('urlTitreSite' in $$props) $$invalidate(5, urlTitreSite = $$props.urlTitreSite);
      if ('texteLangueAlternative' in $$props) $$invalidate(6, texteLangueAlternative = $$props.texteLangueAlternative);
      if ('urlLangueAlternative' in $$props) $$invalidate(7, urlLangueAlternative = $$props.urlLangueAlternative);
      if ('texteNousJoindre' in $$props) $$invalidate(8, texteNousJoindre = $$props.texteNousJoindre);
      if ('urlNousJoindre' in $$props) $$invalidate(9, urlNousJoindre = $$props.urlNousJoindre);
      if ('passerContenu' in $$props) $$invalidate(10, passerContenu = $$props.passerContenu);
      if ('urlPasserContenu' in $$props) $$invalidate(11, urlPasserContenu = $$props.urlPasserContenu);
      if ('textePasserContenu' in $$props) $$invalidate(12, textePasserContenu = $$props.textePasserContenu);
      if ('slots' in $$props) $$invalidate(13, slots = $$props.slots);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [urlLogo, srcLogo, altLogo, titreSite1, titreSite2, urlTitreSite, texteLangueAlternative, urlLangueAlternative, texteNousJoindre, urlNousJoindre, passerContenu, urlPasserContenu, textePasserContenu, slots, clickLien];
  }

  var PivEntete = /*#__PURE__*/function (_SvelteElement) {
    _inherits(PivEntete, _SvelteElement);

    var _super = _createSuper$2(PivEntete);

    function PivEntete(options) {
      var _this;

      _classCallCheck(this, PivEntete);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$2, create_fragment$2, safe_not_equal, {
        urlLogo: 0,
        srcLogo: 1,
        altLogo: 2,
        titreSite1: 3,
        titreSite2: 4,
        urlTitreSite: 5,
        texteLangueAlternative: 6,
        urlLangueAlternative: 7,
        texteNousJoindre: 8,
        urlNousJoindre: 9,
        passerContenu: 10,
        urlPasserContenu: 11,
        textePasserContenu: 12
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(PivEntete, [{
      key: "urlLogo",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(urlLogo) {
        this.$$set({
          urlLogo: urlLogo
        });
        flush();
      }
    }, {
      key: "srcLogo",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(srcLogo) {
        this.$$set({
          srcLogo: srcLogo
        });
        flush();
      }
    }, {
      key: "altLogo",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(altLogo) {
        this.$$set({
          altLogo: altLogo
        });
        flush();
      }
    }, {
      key: "titreSite1",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(titreSite1) {
        this.$$set({
          titreSite1: titreSite1
        });
        flush();
      }
    }, {
      key: "titreSite2",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(titreSite2) {
        this.$$set({
          titreSite2: titreSite2
        });
        flush();
      }
    }, {
      key: "urlTitreSite",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(urlTitreSite) {
        this.$$set({
          urlTitreSite: urlTitreSite
        });
        flush();
      }
    }, {
      key: "texteLangueAlternative",
      get: function get() {
        return this.$$.ctx[6];
      },
      set: function set(texteLangueAlternative) {
        this.$$set({
          texteLangueAlternative: texteLangueAlternative
        });
        flush();
      }
    }, {
      key: "urlLangueAlternative",
      get: function get() {
        return this.$$.ctx[7];
      },
      set: function set(urlLangueAlternative) {
        this.$$set({
          urlLangueAlternative: urlLangueAlternative
        });
        flush();
      }
    }, {
      key: "texteNousJoindre",
      get: function get() {
        return this.$$.ctx[8];
      },
      set: function set(texteNousJoindre) {
        this.$$set({
          texteNousJoindre: texteNousJoindre
        });
        flush();
      }
    }, {
      key: "urlNousJoindre",
      get: function get() {
        return this.$$.ctx[9];
      },
      set: function set(urlNousJoindre) {
        this.$$set({
          urlNousJoindre: urlNousJoindre
        });
        flush();
      }
    }, {
      key: "passerContenu",
      get: function get() {
        return this.$$.ctx[10];
      },
      set: function set(passerContenu) {
        this.$$set({
          passerContenu: passerContenu
        });
        flush();
      }
    }, {
      key: "urlPasserContenu",
      get: function get() {
        return this.$$.ctx[11];
      },
      set: function set(urlPasserContenu) {
        this.$$set({
          urlPasserContenu: urlPasserContenu
        });
        flush();
      }
    }, {
      key: "textePasserContenu",
      get: function get() {
        return this.$$.ctx[12];
      },
      set: function set(textePasserContenu) {
        this.$$set({
          textePasserContenu: textePasserContenu
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["urlLogo", "srcLogo", "altLogo", "titreSite1", "titreSite2", "urlTitreSite", "texteLangueAlternative", "urlLangueAlternative", "texteNousJoindre", "urlNousJoindre", "passerContenu", "urlPasserContenu", "textePasserContenu"];
      }
    }]);

    return PivEntete;
  }(SvelteElement);

  customElements.define("utd-piv-entete", PivEntete);

  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file$1 = "src\\components\\pivPiedPage.svelte"; // (39:2) {#if Utils.slotExiste(slots, 'liens')}

  function create_if_block$1(ctx) {
    var div;
    var h2;
    var t0;
    var t1;
    var nav;
    var slot;
    var block = {
      c: function create() {
        div = element("div");
        h2 = element("h2");
        t0 = text(
        /*texteTitreSrLiens*/
        ctx[0]);
        t1 = space();
        nav = element("nav");
        slot = element("slot");
        attr_dev(h2, "class", "utd-sr-only");
        attr_dev(h2, "id", "utdTitreLiensPivPiedPage");
        add_location(h2, file$1, 40, 4, 1599);
        attr_dev(slot, "name", "liens");
        add_location(slot, file$1, 42, 6, 1739);
        attr_dev(nav, "aria-labelledby", "utdTitreLiensPivPiedPage");
        add_location(nav, file$1, 41, 4, 1683);
        attr_dev(div, "class", "liens");
        add_location(div, file$1, 39, 2, 1574);
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        append_dev(div, h2);
        append_dev(h2, t0);
        append_dev(div, t1);
        append_dev(div, nav);
        append_dev(nav, slot);
      },
      p: function update(ctx, dirty) {
        if (dirty &
        /*texteTitreSrLiens*/
        1) set_data_dev(t0,
        /*texteTitreSrLiens*/
        ctx[0]);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block$1.name,
      type: "if",
      source: "(39:2) {#if Utils.slotExiste(slots, 'liens')}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment$1(ctx) {
    var div;
    var show_if = Utils.slotExiste(
    /*slots*/
    ctx[10], 'liens');
    var t0;
    var a0;
    var img;
    var img_alt_value;
    var img_src_value;
    var t1;
    var span1;
    var a1;
    var t2;
    var t3;
    var t4;
    var span0;
    var t5;
    var link;
    var if_block = show_if && create_if_block$1(ctx);
    var block = {
      c: function create() {
        div = element("div");
        if (if_block) if_block.c();
        t0 = space();
        a0 = element("a");
        img = element("img");
        t1 = space();
        span1 = element("span");
        a1 = element("a");
        t2 = text(
        /*texteCopyright*/
        ctx[6]);
        t3 = text(
        /*anneeCopyright*/
        ctx[7]);
        t4 = space();
        span0 = element("span");
        t5 = space();
        link = element("link");
        this.c = noop;
        attr_dev(img, "class", "logo-mo");
        attr_dev(img, "alt", img_alt_value = "" + (
        /*altLogo*/
        ctx[2] +
        /*texteSrOuvertureNouvelOnglet*/
        ctx[9]));
        if (!src_url_equal(img.src, img_src_value =
        /*srcLogo*/
        ctx[3])) attr_dev(img, "src", img_src_value);
        attr_dev(img, "width",
        /*widthLogo*/
        ctx[4]);
        attr_dev(img, "height",
        /*heightLogo*/
        ctx[5]);
        add_location(img, file$1, 48, 6, 1864);
        attr_dev(a0, "href",
        /*urlLogo*/
        ctx[1]);
        attr_dev(a0, "target", "_blank");
        attr_dev(a0, "rel", "noopener");
        add_location(a0, file$1, 47, 2, 1805);
        attr_dev(span0, "class", "utd-sr-only");
        add_location(span0, file$1, 54, 10, 2147);
        attr_dev(a1, "href",
        /*urlCopyright*/
        ctx[8]);
        attr_dev(a1, "target", "_blank");
        attr_dev(a1, "rel", "noopener");
        add_location(a1, file$1, 52, 6, 2035);
        attr_dev(span1, "class", "copyright");
        add_location(span1, file$1, 51, 2, 2003);
        attr_dev(div, "class", "utd-container utd-piv-pied-page");
        add_location(div, file$1, 36, 0, 1479);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file$1, 60, 0, 2253);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor);
        if (if_block) if_block.m(div, null);
        append_dev(div, t0);
        append_dev(div, a0);
        append_dev(a0, img);
        append_dev(div, t1);
        append_dev(div, span1);
        append_dev(span1, a1);
        append_dev(a1, t2);
        append_dev(a1, t3);
        append_dev(a1, t4);
        append_dev(a1, span0);
        span0.innerHTML =
        /*texteSrOuvertureNouvelOnglet*/
        ctx[9];
        insert_dev(target, t5, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (dirty &
        /*slots*/
        1024) show_if = Utils.slotExiste(
        /*slots*/
        ctx[10], 'liens');

        if (show_if) {
          if (if_block) {
            if_block.p(ctx, dirty);
          } else {
            if_block = create_if_block$1(ctx);
            if_block.c();
            if_block.m(div, t0);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }

        if (dirty &
        /*altLogo, texteSrOuvertureNouvelOnglet*/
        516 && img_alt_value !== (img_alt_value = "" + (
        /*altLogo*/
        ctx[2] +
        /*texteSrOuvertureNouvelOnglet*/
        ctx[9]))) {
          attr_dev(img, "alt", img_alt_value);
        }

        if (dirty &
        /*srcLogo*/
        8 && !src_url_equal(img.src, img_src_value =
        /*srcLogo*/
        ctx[3])) {
          attr_dev(img, "src", img_src_value);
        }

        if (dirty &
        /*widthLogo*/
        16) {
          attr_dev(img, "width",
          /*widthLogo*/
          ctx[4]);
        }

        if (dirty &
        /*heightLogo*/
        32) {
          attr_dev(img, "height",
          /*heightLogo*/
          ctx[5]);
        }

        if (dirty &
        /*urlLogo*/
        2) {
          attr_dev(a0, "href",
          /*urlLogo*/
          ctx[1]);
        }

        if (dirty &
        /*texteCopyright*/
        64) set_data_dev(t2,
        /*texteCopyright*/
        ctx[6]);
        if (dirty &
        /*anneeCopyright*/
        128) set_data_dev(t3,
        /*anneeCopyright*/
        ctx[7]);
        if (dirty &
        /*texteSrOuvertureNouvelOnglet*/
        512) span0.innerHTML =
        /*texteSrOuvertureNouvelOnglet*/
        ctx[9];

        if (dirty &
        /*urlCopyright*/
        256) {
          attr_dev(a1, "href",
          /*urlCopyright*/
          ctx[8]);
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div);
        if (if_block) if_block.d();
        if (detaching) detach_dev(t5);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment$1.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance$1($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots$1 = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-piv-pied-page', slots$1, []);
    var textesDefaut = Utils.obtenirTextesDefaut();
    var languePage = Utils.obtenirLanguePage();
    var _$$props$texteTitreSr = $$props.texteTitreSrLiens,
        texteTitreSrLiens = _$$props$texteTitreSr === void 0 ? languePage === 'fr' ? 'Liens vers informations complémentaires' : 'Links to additional information' : _$$props$texteTitreSr;
    var _$$props$urlLogo = $$props.urlLogo,
        urlLogo = _$$props$urlLogo === void 0 ? languePage === 'fr' ? 'https://www.mtess.gouv.qc.ca/' : 'https://www.mtess.gouv.qc.ca/index_en.asp' : _$$props$urlLogo;
    var _$$props$altLogo = $$props.altLogo,
        altLogo = _$$props$altLogo === void 0 ? languePage === 'fr' ? "Minist\xE8re de l'Emploi et de la Solidarit\xE9 sociale" : "Minist\xE8re de l'Emploi et de la Solidarit\xE9 sociale" : _$$props$altLogo;
    var _$$props$srcLogo = $$props.srcLogo,
        srcLogo = _$$props$srcLogo === void 0 ? "".concat(Utils.imagesRelativePath, "logo_piv_bas_page.png") : _$$props$srcLogo;
    var _$$props$widthLogo = $$props.widthLogo,
        widthLogo = _$$props$widthLogo === void 0 ? '210' : _$$props$widthLogo;
    var _$$props$heightLogo = $$props.heightLogo,
        heightLogo = _$$props$heightLogo === void 0 ? '81' : _$$props$heightLogo;
    var _$$props$texteCopyrig = $$props.texteCopyright,
        texteCopyright = _$$props$texteCopyrig === void 0 ? languePage === 'fr' ? '© Gouvernement du Québec, ' : '© Gouvernement du Québec, ' : _$$props$texteCopyrig;
    var _$$props$anneeCopyrig = $$props.anneeCopyright,
        anneeCopyright = _$$props$anneeCopyrig === void 0 ? '2022' : _$$props$anneeCopyrig;
    var _$$props$urlCopyright = $$props.urlCopyright,
        urlCopyright = _$$props$urlCopyright === void 0 ? languePage === 'fr' ? 'https://www.quebec.ca/droit-auteur' : 'https://www.quebec.ca/en/copyright' : _$$props$urlCopyright;
    var _$$props$texteSrOuver = $$props.texteSrOuvertureNouvelOnglet,
        texteSrOuvertureNouvelOnglet = _$$props$texteSrOuver === void 0 ? textesDefaut.texteSrOuvertureNouvelOnglet : _$$props$texteSrOuver;
    var thisComponent = get_current_component();
    var slots = [];
    onMount(function () {
      $$invalidate(10, slots = Array.from(thisComponent.querySelectorAll('[slot]')));
    });
    var writable_props = ['texteTitreSrLiens', 'urlLogo', 'altLogo', 'srcLogo', 'widthLogo', 'heightLogo', 'texteCopyright', 'anneeCopyright', 'urlCopyright', 'texteSrOuvertureNouvelOnglet'];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-piv-pied-page> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$$set = function ($$props) {
      if ('texteTitreSrLiens' in $$props) $$invalidate(0, texteTitreSrLiens = $$props.texteTitreSrLiens);
      if ('urlLogo' in $$props) $$invalidate(1, urlLogo = $$props.urlLogo);
      if ('altLogo' in $$props) $$invalidate(2, altLogo = $$props.altLogo);
      if ('srcLogo' in $$props) $$invalidate(3, srcLogo = $$props.srcLogo);
      if ('widthLogo' in $$props) $$invalidate(4, widthLogo = $$props.widthLogo);
      if ('heightLogo' in $$props) $$invalidate(5, heightLogo = $$props.heightLogo);
      if ('texteCopyright' in $$props) $$invalidate(6, texteCopyright = $$props.texteCopyright);
      if ('anneeCopyright' in $$props) $$invalidate(7, anneeCopyright = $$props.anneeCopyright);
      if ('urlCopyright' in $$props) $$invalidate(8, urlCopyright = $$props.urlCopyright);
      if ('texteSrOuvertureNouvelOnglet' in $$props) $$invalidate(9, texteSrOuvertureNouvelOnglet = $$props.texteSrOuvertureNouvelOnglet);
    };

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        get_current_component: get_current_component,
        textesDefaut: textesDefaut,
        languePage: languePage,
        texteTitreSrLiens: texteTitreSrLiens,
        urlLogo: urlLogo,
        altLogo: altLogo,
        srcLogo: srcLogo,
        widthLogo: widthLogo,
        heightLogo: heightLogo,
        texteCopyright: texteCopyright,
        anneeCopyright: anneeCopyright,
        urlCopyright: urlCopyright,
        texteSrOuvertureNouvelOnglet: texteSrOuvertureNouvelOnglet,
        thisComponent: thisComponent,
        slots: slots
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('texteTitreSrLiens' in $$props) $$invalidate(0, texteTitreSrLiens = $$props.texteTitreSrLiens);
      if ('urlLogo' in $$props) $$invalidate(1, urlLogo = $$props.urlLogo);
      if ('altLogo' in $$props) $$invalidate(2, altLogo = $$props.altLogo);
      if ('srcLogo' in $$props) $$invalidate(3, srcLogo = $$props.srcLogo);
      if ('widthLogo' in $$props) $$invalidate(4, widthLogo = $$props.widthLogo);
      if ('heightLogo' in $$props) $$invalidate(5, heightLogo = $$props.heightLogo);
      if ('texteCopyright' in $$props) $$invalidate(6, texteCopyright = $$props.texteCopyright);
      if ('anneeCopyright' in $$props) $$invalidate(7, anneeCopyright = $$props.anneeCopyright);
      if ('urlCopyright' in $$props) $$invalidate(8, urlCopyright = $$props.urlCopyright);
      if ('texteSrOuvertureNouvelOnglet' in $$props) $$invalidate(9, texteSrOuvertureNouvelOnglet = $$props.texteSrOuvertureNouvelOnglet);
      if ('slots' in $$props) $$invalidate(10, slots = $$props.slots);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [texteTitreSrLiens, urlLogo, altLogo, srcLogo, widthLogo, heightLogo, texteCopyright, anneeCopyright, urlCopyright, texteSrOuvertureNouvelOnglet, slots];
  }

  var PivPiedPage = /*#__PURE__*/function (_SvelteElement) {
    _inherits(PivPiedPage, _SvelteElement);

    var _super = _createSuper$1(PivPiedPage);

    function PivPiedPage(options) {
      var _this;

      _classCallCheck(this, PivPiedPage);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance$1, create_fragment$1, safe_not_equal, {
        texteTitreSrLiens: 0,
        urlLogo: 1,
        altLogo: 2,
        srcLogo: 3,
        widthLogo: 4,
        heightLogo: 5,
        texteCopyright: 6,
        anneeCopyright: 7,
        urlCopyright: 8,
        texteSrOuvertureNouvelOnglet: 9
      }, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }

        if (options.props) {
          _this.$set(options.props);

          flush();
        }
      }

      return _this;
    }

    _createClass(PivPiedPage, [{
      key: "texteTitreSrLiens",
      get: function get() {
        return this.$$.ctx[0];
      },
      set: function set(texteTitreSrLiens) {
        this.$$set({
          texteTitreSrLiens: texteTitreSrLiens
        });
        flush();
      }
    }, {
      key: "urlLogo",
      get: function get() {
        return this.$$.ctx[1];
      },
      set: function set(urlLogo) {
        this.$$set({
          urlLogo: urlLogo
        });
        flush();
      }
    }, {
      key: "altLogo",
      get: function get() {
        return this.$$.ctx[2];
      },
      set: function set(altLogo) {
        this.$$set({
          altLogo: altLogo
        });
        flush();
      }
    }, {
      key: "srcLogo",
      get: function get() {
        return this.$$.ctx[3];
      },
      set: function set(srcLogo) {
        this.$$set({
          srcLogo: srcLogo
        });
        flush();
      }
    }, {
      key: "widthLogo",
      get: function get() {
        return this.$$.ctx[4];
      },
      set: function set(widthLogo) {
        this.$$set({
          widthLogo: widthLogo
        });
        flush();
      }
    }, {
      key: "heightLogo",
      get: function get() {
        return this.$$.ctx[5];
      },
      set: function set(heightLogo) {
        this.$$set({
          heightLogo: heightLogo
        });
        flush();
      }
    }, {
      key: "texteCopyright",
      get: function get() {
        return this.$$.ctx[6];
      },
      set: function set(texteCopyright) {
        this.$$set({
          texteCopyright: texteCopyright
        });
        flush();
      }
    }, {
      key: "anneeCopyright",
      get: function get() {
        return this.$$.ctx[7];
      },
      set: function set(anneeCopyright) {
        this.$$set({
          anneeCopyright: anneeCopyright
        });
        flush();
      }
    }, {
      key: "urlCopyright",
      get: function get() {
        return this.$$.ctx[8];
      },
      set: function set(urlCopyright) {
        this.$$set({
          urlCopyright: urlCopyright
        });
        flush();
      }
    }, {
      key: "texteSrOuvertureNouvelOnglet",
      get: function get() {
        return this.$$.ctx[9];
      },
      set: function set(texteSrOuvertureNouvelOnglet) {
        this.$$set({
          texteSrOuvertureNouvelOnglet: texteSrOuvertureNouvelOnglet
        });
        flush();
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["texteTitreSrLiens", "urlLogo", "altLogo", "srcLogo", "widthLogo", "heightLogo", "texteCopyright", "anneeCopyright", "urlCopyright", "texteSrOuvertureNouvelOnglet"];
      }
    }]);

    return PivPiedPage;
  }(SvelteElement);

  customElements.define("utd-piv-pied-page", PivPiedPage);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var file = "src\\components\\piedPageSite.svelte"; // (22:4) {#if Utils.slotExiste(slots, 'contenu')}

  function create_if_block(ctx) {
    var slot;
    var block = {
      c: function create() {
        slot = element("slot");
        attr_dev(slot, "name", "contenu");
        add_location(slot, file, 22, 6, 585);
      },
      m: function mount(target, anchor) {
        insert_dev(target, slot, anchor);
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(slot);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_if_block.name,
      type: "if",
      source: "(22:4) {#if Utils.slotExiste(slots, 'contenu')}",
      ctx: ctx
    });
    return block;
  }

  function create_fragment(ctx) {
    var div1;
    var div0;
    var show_if = Utils.slotExiste(
    /*slots*/
    ctx[0], 'contenu');
    var t;
    var link;
    var if_block = show_if && create_if_block(ctx);
    var block = {
      c: function create() {
        div1 = element("div");
        div0 = element("div");
        if (if_block) if_block.c();
        t = space();
        link = element("link");
        this.c = noop;
        attr_dev(div0, "class", "utd-container");
        add_location(div0, file, 20, 2, 504);
        attr_dev(div1, "class", "utd-pied-page-site");
        add_location(div1, file, 19, 0, 468);
        attr_dev(link, "rel", "stylesheet");
        attr_dev(link, "href", Utils.cssFullPath);
        add_location(link, file, 27, 0, 645);
      },
      l: function claim(nodes) {
        throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor);
        append_dev(div1, div0);
        if (if_block) if_block.m(div0, null);
        insert_dev(target, t, anchor);
        insert_dev(target, link, anchor);
      },
      p: function update(ctx, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            dirty = _ref2[0];

        if (dirty &
        /*slots*/
        1) show_if = Utils.slotExiste(
        /*slots*/
        ctx[0], 'contenu');

        if (show_if) {
          if (if_block) ; else {
            if_block = create_if_block(ctx);
            if_block.c();
            if_block.m(div0, null);
          }
        } else if (if_block) {
          if_block.d(1);
          if_block = null;
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1);
        if (if_block) if_block.d();
        if (detaching) detach_dev(t);
        if (detaching) detach_dev(link);
      }
    };
    dispatch_dev("SvelteRegisterBlock", {
      block: block,
      id: create_fragment.name,
      type: "component",
      source: "",
      ctx: ctx
    });
    return block;
  }

  function instance($$self, $$props, $$invalidate) {
    var _$$props$$$slots = $$props.$$slots,
        slots$1 = _$$props$$$slots === void 0 ? {} : _$$props$$$slots;
        $$props.$$scope;
    validate_slots('utd-pied-page-site', slots$1, []);
    var thisComponent = get_current_component();
    var slots = [];
    onMount(function () {
      $$invalidate(0, slots = Array.from(thisComponent.querySelectorAll('[slot]')));
    });
    var writable_props = [];
    Object.keys($$props).forEach(function (key) {
      if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<utd-pied-page-site> was created with unknown prop '".concat(key, "'"));
    });

    $$self.$capture_state = function () {
      return {
        onMount: onMount,
        Utils: Utils,
        get_current_component: get_current_component,
        thisComponent: thisComponent,
        slots: slots
      };
    };

    $$self.$inject_state = function ($$props) {
      if ('slots' in $$props) $$invalidate(0, slots = $$props.slots);
    };

    if ($$props && "$$inject" in $$props) {
      $$self.$inject_state($$props.$$inject);
    }

    return [slots];
  }

  var PiedPageSite = /*#__PURE__*/function (_SvelteElement) {
    _inherits(PiedPageSite, _SvelteElement);

    var _super = _createSuper(PiedPageSite);

    function PiedPageSite(options) {
      var _this;

      _classCallCheck(this, PiedPageSite);

      _this = _super.call(this);
      init(_assertThisInitialized(_this), {
        target: _this.shadowRoot,
        props: attribute_to_object(_this.attributes),
        customElement: true
      }, instance, create_fragment, safe_not_equal, {}, null);

      if (options) {
        if (options.target) {
          insert_dev(options.target, _assertThisInitialized(_this), options.anchor);
        }
      }

      return _this;
    }

    return PiedPageSite;
  }(SvelteElement);

  customElements.define("utd-pied-page-site", PiedPageSite);

  exports.ajusterAccessibiliteLiens = ajusterAccessibiliteLiens;
  exports.customElements = customElements;
  exports.dialogue = dialogue;
  exports.extend = extend;
  exports.genererId = genererId;
  exports.message = message;
  exports.notification = notification;
  exports.obtenirIdControleActif = obtenirIdControleActif;
  exports.obtenirLanguePage = obtenirLanguePage;
  exports.traitementEnCours = traitementEnCours;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
