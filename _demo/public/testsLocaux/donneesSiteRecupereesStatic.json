[
	{
		"c": "Règles d'interfaces",
		"r": "Règles d'interfaces",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/base/reglesinterfaces",
		"t": "Règles d'interfaces\n\nTous les sites Web développés au sein du ministère de l'Emploi et de la Solidarité sociale doivent être conformes à ces standards du gouvernement :\n\nCes règles s'appliquent à tous les sites Web. Pour les sites Web particuliers (intranet, progiciels, sondage, bulletin Web, etc.), ces règles sont aussi une référence, mais ils pourront être traités au cas par cas puisque les règles d'affichage peuvent varier selon le type de plateforme de développement, de service Web et de clientèle.\n\nTout nouveau site Web qui sera mis en ligne devra respecter ces règles d'interface Web, le PIV et le système de design gouvernemental. Les sites mis en ligne dans le passé devront appliquer ces règles lors des développements en continuité ou lors de demandes d'amélioration.",
		"mc": ""
	},
	{
		"c": "Principe et utilisation des composants",
		"r": "Principe et utilisation des composants",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/base/principe",
		"t": "Principe et utilisation des composants\nPrincipe\n\nComposants web réutilisables pour le MESS qui sont basés sur les règles Quebec.ca.\n\nAccessibles, \"responsive\", sans dépendance, utilisables dans tous les types de projets (.Net, Drupal, SharePoint, VueJs, etc.).\n\nPour utiliser ces composants, il suffit d'injecter un fichier javascript, un fichier css, un fichier svg et quelques fichiers de fonts.\n\nUtilisation des composants\nIntégration dans un projet via CDN\nPréchargement des fonts\n\nPrécharger les fonts dans la balise head de votre projet.\n\nChargement du css\n\nCharger le css dans la balise head avant le css de votre projet.\n\nChargement du javascript\n\nCharger le script à la fin du body de la page.\n\nIl est possible de ne pas spécifier de numéro de version précis remplaçant le numéro de version (ex. @1.13.0) par :\n@latest afin d'obtenir la version la plus récente (Attention! Pourrait contenir un \"breaking change\");\n@1.9 afin d'obtenir la version la plus récente 1.9.x;\n@1 afin d'obtenir la version la plus récente 1.x.x. (Recommandé afin de rester le plus à jour possible sans \"breaking change\")\nIntégration dans un projet (Copie locale des fichiers)\n\nVous pouvez rappatrier les fichiers dans votre solution afin de pouvoir les fusionner avec les vôtres histoire de diminuer le nombre de fichiers.\n\nAttention, si vous copiez les fichiers dans votre projet, les fichiers doivent cependant respecter la structure définie dans de dossier \"dist\" disponible dans la release.\n\nConsulter les releases et télécharger les fichiers requis\n. Ce lien sera ouvert dans un nouvel onglet.\n\nPréchargement des fonts\n\nPrécharger les fonts dans la balise head de votre projet.\n\nChargement du css\n\nCharger le css dans la balise head avant le css de votre projet.\n\nChargement du javascript\n\nCharger le script à la fin du body de la page.\n\nIl est possible de spécifier le chemin relatif pour atteindre le dossier contenant les éléments utd si ce dernier n'est pas \"/\" (ex. racine wwwroot). Il suffit d'ajouter l'attribut \"relative-base-path\" à la balise script.",
		"mc": ""
	},
	{
		"c": "Gabarits",
		"r": "Gabarit 1 colonne",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/gabarit1colonne",
		"t": "Gabarit 1 colonne\n\nLa présente page est une simple page HTML contenant le markup essentiel pour l'utilisation des composants UTD dans un contexte de gabarit 1 colonne.\n\nInspecter la source de la page afin de voir le HTML requis.\n\nVous devrez évidemment paramétrer les composants utd de base (utd-piv-entete, utd-piv-pied-page, utd-menu-horizontal, ainsi que utd-menu-vertical et utd-pied-page-site au besoin. Les pages d'aide de ces composants sont dans le menu à gauche.",
		"mc": ""
	},
	{
		"c": "Gabarits",
		"r": "Gabarit 1 colonne (cdn)",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/gabarit1colonneCdn",
		"t": "Gabarit 1 colonne (avec Cdn)\n\nLa présente page est une simple page HTML contenant le markup essentiel pour l'utilisation des composants UTD dans un contexte de gabarit 1 colonne en utilisant le cdn.\n\nInspecter la source de la page afin de voir le HTML requis.\n\nVous devrez évidemment paramétrer les composants utd de base (utd-piv-entete, utd-piv-pied-page, ainsi que utd-menu-vertical et utd-pied-page-site au besoin. Les pages d'aide de ces composants sont dans le menu à gauche.",
		"mc": ""
	},
	{
		"c": "Gabarits",
		"r": "Gabarit 2 colonnes",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/gabarit2colonnes",
		"t": "Gabarit 2 colonnes\n\nLa présente page est une simple page HTML contenant le markup essentiel pour l'utilisation des composants UTD dans un contexte de gabarit 2 colonnes.\n\nInspecter la source de la page afin de voir le HTML requis.\n\nVous devrez évidemment paramétrer les composants utd de base (utd-piv-entete, utd-piv-pied-page, ainsi que utd-menu-vertical et utd-pied-page-site au besoin. Les pages d'aide de ces composants sont dans le menu à gauche.",
		"mc": ""
	},
	{
		"c": "Gabarits",
		"r": "Gabarit 2 colonnes (cdn)",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/gabarit2colonnesCdn",
		"t": "Gabarit 2 colonnes (avec cdn)\n\nLa présente page est une simple page HTML contenant le markup essentiel pour l'utilisation des composants UTD dans un contexte de gabarit 2 colonnes en utilisant le cdn.\n\nInspecter la source de la page afin de voir le HTML requis.\n\nVous devrez évidemment paramétrer les composants utd de base (utd-piv-entete, utd-piv-pied-page, ainsi que utd-menu-vertical et utd-pied-page-site au besoin. Les pages d'aide de ces composants sont dans le menu à gauche.",
		"mc": ""
	},
	{
		"c": "Nous joindre",
		"r": "Nous joindre",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/base/nousjoindre",
		"t": "Nous joindre\nPour des questions de design\n\nContacter l'équipe UI/UX. (Infos à venir)\n\nPour des questions d'ordre technique\n\nContacter Christian Caux (Idéalement via Teams).\n\nPour signaler un problème\n\nOuvrir un \"issue\" dans notre dépôt Github\n. Ce lien sera ouvert dans un nouvel onglet.\n.\n\nBien décrire votre problème.",
		"mc": ""
	},
	{
		"c": "Historique des versions",
		"r": "Historique des versions",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/versions",
		"t": "Historique des versions récentes\n1.13.0 (2023-07-??)\nCorrection d'anomalies\n\nComposant Dialogue modal. Un clic initié à partir de la fenêtre modale ne ferme plus cette dernière si le bouton de la souris est relâché à l'extérieur de la fenêtre modale.\n\nVoir l'issue dans Github\n\nAméliorations\nAjout du composant Barre de recherche et intégration de ce dernier dans le composant Entête PIV via de nouveaux paramètres pour la recherche.\n1.12.1 (2023-07-11)\n1.12.0 (2023-06-13)\n1.11.0 (2023-05-26)\n1.10.0 (2023-04-17)\nConsulter les versions antérieures",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Barre de recherche",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/barrerecherche",
		"t": "Barre de recherche\nDescription\n\nLa composante barre de recherche permet à l’utilisateur de faire des recherches dans un site Internet ou une application à partir de mots clés.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Québec.ca\n\nLa barre de recherche ne mène pas à une page de résultats de recherche mais affiche les résultats au fur et à mesure de la saisie dans le champ (\"search as you type\").\n\nLes résultats sont affichés sous le champ et le click sur un résultat provoque la navigation vers ce dernier.\n\nAttributs disponibles\nNom\tType\tDescription\nplaceholder\tString (Optionnel)\tTexte (placeholder) à afficher dans le contrôle tant qu'aucune saisie n'est effectuée. Défaut \"Rechercher...\" et \"Search...\".\nurl-contenu-recherche\tString (Optionnel)\tSi spécifié, url à laquelle un appel (fetch) sera effectué afin d'obtenir le contenu de recherche au format attendu en JSON.\nnb-max-resultats\tInteger (Optionnel)\tNombre de résultats de recherche maximal à afficher. Défaut : 10.\nÉvénements disponibles\ninitialiser\n\nEst exécuté uniquement si le paramètre url-contenu-recherche n'est pas spécifié.\n\nSon exécution se produit lorsque le contrôle de recherche est initialisé (lors d'une première tentative de recherche).\n\nVoir exemple 1c- Un niveau (callback) ou n'importe quel exemple (callback).\n\nRetour\nNom\tType\tDescription\ndefinirContenuRecherche\tFonction\tFonction (callback) ayant en paramètre un objet qui doit posséder une propriété \"contenu\", laquelle doit contenir le contenu de recherche qui respecte le format requis.\nFormat (JSON) du contenu de recherche attendu\n\nLe contenu de recherche fourni doit être un array d'objets ayant la structure suivante :\n\nPropriété\tObligatoire\tDescription\nc\tAffichage à 2 et 3 niveaux.\tCatégorie. Correspond au 1er niveau de regroupement.\nsc\tAffichage à 3 niveaux.\tSous-catégorie. Correspond au 2ème niveau de regroupement.\nr\tOui\tRésultat. Texte du lien permettant d'accéder au résultat de recherche.\nh\tOui\tUrl relative ou absolue du lien permettant d'accéder au résultat de recherche. (Valeur \"href\" du lien)\nt\tOui\tTexte à indexer. Correspond à tout le texte à indexer pour le résultat de recherche. Ex. le contenu d'une page, la description d'un service, etc.\nmc\tNon\tMots-clés. Termes supplémentaires à indexer. Permet d'indexer des mots ne figurant pas dans le texte à indexer. Ex. des synonymes, accronymes, etc.\n\nConsulter le code source (js) des exemples 1c (1 niveau), 2c (2 niveaux) et 3c (3 niveaux) afin de voir des cas d'utilisation. Regarder plus précisément le contenu de la variable monContenuRecherche.\n\nAccessibilité\nInspiré du \"combobox pattern\" défini au W3C\n. Ce lien sera ouvert dans un nouvel onglet.\n, avec quelques légères différences pour adapter à notre besoin.\nExemples\n1a- Un niveau (url de contenu)\n1b- Un niveau (url de contenu et 3 résultats maximum)\n1c- Un niveau (callback)\n2a- Deux niveaux (url de contenu)\n2b- Deux niveaux (url de contenu et 3 résultats maximum)\n2c- Deux niveaux (callback)\n3a- Trois niveaux (url de contenu)\n3b- Trois niveaux (url de contenu et 3 résultats maximum)\n3c- Trois niveaux (callback synchrone)\n3d- Trois niveaux (callback asynchrone)",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Boutons",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/boutons",
		"t": "Boutons\nDescription\n\nLes boutons indiquent les actions qui peuvent être exécutées sur une page. Le libellé d’un bouton annonce l'action qui se produit lorsque l'utilisateur interagit avec celui-ci. \n\nQuatre types de boutons sont disponibles : les boutons principaux, les boutons secondaires, les boutons tertiaires et les boutons d’avertissement. \n\nVariante « boutons avec icône » à venir.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nExemples\n1- Bouton primaire\nBase Compact Arrondi Compact et arrondi Inactif\n2- Bouton secondaire\nBase Compact Arrondi Compact et arrondi Inactif\n3- Bouton tertiaire\nBase\nCompact\nInactif\n4-Bouton avertissement\nBase Compact Arrondi Compact et arrondi Inactif",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Dialogue modal",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/dialogue",
		"t": "Dialogue modal\nDescription\n\nLe dialogue modal est une boîte qui se superpose au contenu de la page, en plein centre, à la suite d’une action déclenchée directement par l’utilisateur. Il sert à communiquer de l’information contextuelle.\n\nLorsque le dialogue modal est activé, l’arrière-plan de la page devient plus sombre pour qu’il soit en évidence.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Quebec.ca\n\nLe composant dialogue d'alerte a été remplacé par notre composant message (seulement le nom est différent, il a les mêmes caractéristiques).\n\nAttributs disponibles\nNom\tType\tDescription\nafficher\tBoolean (Optionnel)\tPermet de spécifier si la fenêtre modale doit être affichée ou non.\ntype\tString (Optionnel)\tType de la fenêtre modale (icône). Valeurs possibles : information, avertissement, succes, erreur.\ntitre\tString (Optionnel)\tTitre de la fenêtre modale.\nsr-bouton-fermer\tString (Optionnel)\tTexte lecteur écran seulement du bouton permettant de fermer la fenêtre modale.\nid-focus-ouverture\tString (Optionnel)\tId du contrôle auquel on veut forcer le focus une fois la fenêtre modale affichée si le comportement pas défaut ne convient pas.\nid-focus-fermeture\tString (Optionnel)\tId du contrôle auquel on veut forcer le focus à la fermeture de la fenêtre modale si le comportement par défaut ne convient pas. Par défaut le contrôle redonne le focus à l'élément qui à ouvert la fenêtre modale (ex. un bouton).\nboutons-texte-long\tBoolean (Optionnel)\tAffiche les boutons à partir de 525px et moins sous forme de colonne (au lieu du 425px normal).\nforcer-boutons-inline\tBoolean (Optionnel)\tForce l'affichage des boutons en mode inline (ne vont pas s'afficher en colonne à 425px et moins).\naffichage-lateral\tBoolean (Optionnel)\tIndique si une animation d'ouverture latérale (droite vers la gauche) est utilisée pour l'affichage de la fenêtre modale.\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Est injecté dans la zone de contenu de la fenêtre modale.\n\n\npied\tContenu html injecté dans le pied de la fenêtre modale (généralement des boutons).\nAccessibilité\n\nLes règles du W3C relatives aux dialogues\n. Ce lien sera ouvert dans un nouvel onglet.\n sont suivies à la lettre.\n\nIl semble que l'implémentation dans NVDA provoque la lecture du titre de la modale au lecteur écran deux fois.\n\nIl s'agit malgré tout de la meilleure solution possible, et il semble qu'il n'y a malheureusement rien à faire.\n\nExemples\n1- Ouverture par le biais d'un bouton\nAfficher un long contenu dans la fenêtre modale\nAfficher\n2- Ouverture latérale, affichage forcé des boutons sur une ligne et focus à l'ouverture sur le contrôle spécifié\n\nUtilisez le bouton \"Votre avis\" à droite fin de tester.\n\nVotre avis\n3- Focus à l'élément spécifié à l'ouverture\nAfficher\n4- Modale sans contrôle de saisie (mode \"fenêtre de message\" est activé)\nAfficher",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Message",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/message",
		"t": "Message\nDescription\n\nIl s'agit du composant dialogue d’alerte du système de design Quebec.ca.\n\nIl apparaît lorsqu’une action immédiate est requise. Le dialogue d’alerte contient un message ainsi qu’un ou plusieurs boutons d’action.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Quebec.ca\n\nLorsqu'un type est spécifié, nous ajoutons une icône au titre du message et nous retirons le filet de couleur saumon sous le titre du message.\n\nNous estimons que cela ajoute un élément visuel fort qui indique rapidement de quel type de message il s'agit.\n\nMéthodes\nutd.message.afficher\nParamètres\nNom\tType\tDescription\ntype\tString (Optionnel)\tValeurs possibles : information, avertissement, succes, erreur.\ntitre\tString\tTitre du message.\ncorps\tString\tCorps du message.\ntexteBoutonPrimaire\tString\tTexte du bouton primaire. Si non spécifié, le bouton primaire n'est pas affiché.\ntexteBoutonSecondaire\tString (Optionnel)\tTexte du bouton secondaire. Si non spécifié, le bouton secondaire n'est pas affiché.\ntexteBoutonFermer\tString (Optionnel)\tTexte du bouton de fermeture du message. Défaut \"Fermer\" ou \"Close\" en anglais.\nestBoutonsTexteLong\tBoolean (Optionnel)\tIndique si le texte des boutons est long. Si c'est le cas, les boutons sont affichés verticalement en pleine largeur si la largeur d'écran est inférieure ou égale à 525px. (Au lieu de 425px normalement)\nidControleFocusFermeture\tString (Optionnel)\tId du contrôle auquel on redonne le focus à la fermeture de la fenêtre de message. Si non spécifié, focus redonné à l'élément actif avant l'affichage du message.\nRetour\n\nUne promesse javascript dont le résultat contient une chaîne de caractères contenant le raison de fermeture du message. Les valeurs possibles sont :\n\nprimaire, si le bouton primaire a été cliqué.\nsecondaire, si le bouton secondaire a été cliqué.\nclickBackdrop, si l'utilisateur a cliqué dans le backdrop afin de fermer le message.\nboutonFermer, si l'utilisateur a cliqué sur le bouton \"Fermer (X)\" afin de fermer le message.\nescape, si l'utilisateur appuyé sur la touche \"ESC\" afin de fermer le message.\nAccessibilité\n\nLes règles du W3C relatives aux dialogues de type \"messages\" sont suivies à la lettre.\n\nIl semble que l'implémentation dans NVDA provoque la lecture du titre de la modale au lecteur écran deux fois (une au début et une à la fin). Le libellé du bouton qui reçoit le focus est également lu deux fois.\n\nIl serait possible de donner le focus au texte du message, mais dans ce cas c'est un bout du texte du message qui serait lu deux fois. Dans tous les cas le titre de la modale est lu deux fois.\n\nOn préfère donc donner le focus au bouton même si son libellé est lu deux fois. Il s'agit malgré tout de la meilleure solution possible, et il semble qu'il n'y a malheureusement rien à faire.\n\nExemples\n1- Message de type avertissement avec 2 boutons\nTest 1\n2- Message de type information avec 1 bouton\nTest 2\n3- Message de type succès avec 1 bouton\nTest 3\n4- Message de type erreur avec 1 bouton\nTest 4\n5- Message sans type avec 2 boutons\nTest 5\n6- Message sans type avec 2 boutons et texte long\nTest 6",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Notifications",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/notifications",
		"t": "Notifications\nDescription\n\nIl s'agit du composant notification contextuelle du système de design Quebec.ca.\n\nLa notification contextuelle affiche un message temporaire qui apparaît à la suite d’une interaction humaine.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Quebec.ca\n\nLorsqu'un titre est spécifié et que le type est \"positif\" ou \"negatif\", nous ajoutons une icône au titre du message.\n\nNous estimons que cela ajoute un élément visuel fort qui indique rapidement de quel type de notification il s'agit.\n\nMéthodes\nutd.notification.emettre\nParamètres\nNom\tType\tDescription\ntype\tString (Optionnel)\tType de notification. Valeurs possibles : positif (Défaut), negatif, neutre.\ntitre\tString (Optionnel)\tTitre de la notification.\nmessage\tString\tTexte de la notification.\ndelaiFermeture\tNumber (Optionnel)\tDélai de fermeture de la notification (en millisecondes). Défaut 5000.\ntexteBoutonFermer\tString (Optionnel)\tTexte du bouton de fermeture de la notification. Défaut \"Fermer\" ou \"Close\" en anglais.\nRetour\n\nAucun.\n\nExemples\n1- Notification de type \"positif\" avec titre\nTest 1\n2- Notification de type \"positif\" sans titre et délai de fermeture plus long spécifié (10 secondes)\nTest 2\n3- Notification de type \"negatif\" avec titre\nTest 3\n4- Notification de type \"negatif\" sans titre\nTest 4\n5- Notification de type \"neutre\" avec titre\nTest 5\n6- Notification de type \"neutre\" sans titre\nTest 6",
		"mc": ""
	},
	{
		"c": "Action",
		"r": "Traitement en cours",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/actions/traitementencours",
		"t": "Traitement en cours\nDescription\n\nPermet de gérer la notion de traitement en cours dans une interface. Un visuel (spinner) est affiché sur le bouton ayant initié le traitement et il est possible de bloquer l'interface (overlay).\n\nEffectue également une notification au lecteur écran afin d'aviser que le traitement est débuté ou terminé.\n\nMéthodes\nutd.traitementEnCours.debuter\nParamètres\nNom\tType\tDescription\nbouton\tObject\tObjet (bouton) ayant initié le traitement en cours.\navecOverlay\tBoolean (Optionnel)\tIndique si l'interface doit être bloquée (overlay). Défaut true.\nutd.traitementEnCours.terminer\nParamètres\nNom\tType\tDescription\nidBouton\tString\tId du bouton ayant initié le traitement en cours.\nExemples\n1- Sur un bouton (avec overlay)\n\nSimule un traitement de 5 secondes.\n\nTest 1\n2- Sur un bouton (sans overlay)\n\nSimule un traitement de 5 secondes.\n\nTest 2\n3- Sur un bouton compact (avec overlay)\n\nSimule un traitement simultané de 5 secondes sur le bouton 1, 10 secondes sur le bouton 2 et 15 secondes sur le bouton 3.\n\nTest 3",
		"mc": ""
	},
	{
		"c": "Affichage de contenu",
		"r": "Accordéon",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/affichagecontenu/accordeon",
		"t": "Accordéon\nDescription\n\nL’accordéon permet de réduire temporairement la quantité d’information affichée sur une page. Avec cette option, la personne survole le contenu et accède plus rapidement à l’information recherchée.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nAttributs disponibles\nNom\tType\tDescription\nreduit\tBoolean (Optionnel)\tIndique si l'accordéon doit être réduit ou développé. Peut être mis à jour une fois le contrôle généré afin de modifier son état d'affichage (développé/réduit). Défaut \"true\" (réduit).\ntitre\tString (Optionnel)\tTitre affiché dans l'entête de l'accordéon.\ntag-titre\tString (Optionnel)\tBalise html à utiliser pour le titre de l'entête. Défaut \"h2\".\ncontenu\tString (Optionnel)\tTexte à afficher dans la zone de contenu de l'accordéon.\nconserver-etat-affichage\tBoolean (Optionnel)\t\n\nIndique si l'état d'affichage (développé/réduit) de l'accordéon doit être conservé pendant la session (tant que le fureteur est ouvert). Défaut \"false\".\n\nIMPORTANT! Afin que la fonctionnalité de conservation d'état d'affichage fonctionne, le composant utd-accordeon doit avoir un id.\n\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Est injecté dans la zone de contenu de l'accordéon.\n\n\ntitre\tContenu html injecté dans l'entête de l'accordéon. Exemple d'utilisation : Ajout d'une icône à gauche du titre.\nÉvénements disponibles\nchangementEtat\n\nEst exécuté lorsque l'état d'affichage (développé/réduit) de l'accordéon change. Voir exemple 5- Accordéon contrôlé par javascript.\n\nRetour\nNom\tType\tDescription\nreduit\tBoolean (Optionnel)\tIndique si l'accordéon est réduit. Il s'agit du nouvel état suite au changement d'état d'affichage.\nExemples\n1- Avec attributs \"titre\" et \"contenu\"\n2- Avec attribut \"titre\", slot par défaut et tag-titre h5\n3- Avec slots \"titre\" et slot par défaut et conservation de l'état d'affichage\n\nDans cet exemple, l'état d'affichage (développé/réduit) et conservé tout au long de la session.\n\nPour tester, développer l'accordéon, changer de page et revenir dans cette page. Vous constaterez que l'accordéon sera ouvert.\n\nExemple d'utilisation 3 avec un titre long long long long long long long long long long long long long long long long long long\n4- Accordéon développé par défaut\nExemple d'utilisation 4\n\nIci un texte incroyable.\n\nQui peut même contenir du html.\n\n5- Accordéon contrôlé par javascript et conservation de l'état d'affichage\n\nCet exemple démontre l'utilisation de javascript afin de développer/réduire l'accordéon via un bouton.\n\nIl utilise également l'événement changementEtat afin de signaler l'état d'affichage de l'accordéon (développé/réduit) lorsque son état change.\n\nAussi dans cet exemple, l'état d'affichage (développé/réduit) et conservé tout au long de la session.\n\nPour tester, réduire l'accordéon, changer de page et revenir dans cette page. Vous constaterez que l'accordéon sera réduit.\n\nExemple d'utilisation 5\n\nUn bel exemple de comment contrôler l'ouverture/fermeture de l'accordéon via un bouton.\n\nCliquez le bouton \"Contrôler accordéon\" pour essayer.\n\nRemarquez également le texte indiquant l'état d'affichage lorsque ce dernier change.\n\nContrôler accordéon",
		"mc": ""
	},
	{
		"c": "Affichage de contenu",
		"r": "Avis",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/affichagecontenu/avis",
		"t": "Avis\nDescription\n\nLes avis sont des messages contextuels qui peuvent s’afficher sur une page ou sur plusieurs pages d’un même sujet.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nAttributs disponibles\nNom\tType\tDescription\ntype\tString (Optionnel)\tType de l'avis (icône/couleur). Valeurs possibles : information, avertissement, succes, erreur, ou complementaire. Défaut \"information\".\ntitre\tString (Optionnel)\tTitre affiché dans l'avis.\ncontenu\tString (Optionnel)\tTexte à afficher dans l'avis.\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Est injecté dans la zone de contenu de l'avis.\n\nExemples\nAvis information\n1- Avec attribut \"contenu\"\n2- Avec slot par défaut\nEst considérée comme votre conjoint (même si elle est absente temporairement) :\nla personne qui habite avec vous et avec qui vous êtes marié ou uni civilement;\nla personne qui habite avec vous et qui est l’autre parent d’au moins un de vos enfants;\nla personne majeure qui vit maritalement avec vous et qui, à un moment donné, a habité avec vous pendant une période d’au moins un an.\nAvis avertissement\n3- Avec attribut \"contenu\"\n4- Avec slot par défaut\nCertains faits importants à savoir à propos de Chuck Norris :\nUn jour Chuck Norris a eu un zero en latin, depuis c'est une langue morte.\nChuck Norris a déjà compté jusqu'à l'infini. Deux fois.\nC'est Chuck Norris qui a décidé que toute phrase se terminait par un poing.\nAvis succès\n5- Avec attribut \"contenu\"\n6- Avec slot par défaut\nCertains faits importants à savoir à propos de Chuck Norris :\nUn jour Chuck Norris a eu un zero en latin, depuis c'est une langue morte.\nChuck Norris a déjà compté jusqu'à l'infini. Deux fois.\nC'est Chuck Norris qui a décidé que toute phrase se terminait par un poing.\nAvis erreur\n7- Avec attribut \"contenu\"\n8- Avec slot par défaut\nLe champ « Nom de famille » est obligatoire.\nLe champ « Prénom » est obligatoire.\nLe champ « Numéro de dossier » est obligatoire.\nAvis complémentaire\n\nLe type d'avis complementaire doit être précisé (sous-type). Valeurs possibles: astuce et rappel.\n\n9- Avec attribut \"contenu\"\n10- Avec slot par défaut\ncompléter le formulaire A38;\narmez-vous de patience;\napporter le formulaire complété à la capitainerie du port.",
		"mc": ""
	},
	{
		"c": "Affichage de contenu",
		"r": "Infobulle",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/affichagecontenu/infobulle",
		"t": "Infobulle\nDescription\n\nL’infobulle est utilisée pour fournir des informations contextuelles liées à un élément particulier.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Quebec.ca\n\nNotre composant prend toujours l'aspect feuille, i.e. l'infobulle est toujours affichée au bas de la page et jamais à côté du bouton qui lui est associé.\n\nAttributs disponibles\nNom\tType\tDescription\ntitre\tString (Optionnel)\tTitre affiché dans la feuille associée à l'infobulle.\nsr-titre\tString (Optionnel)\tTexte lecteur écran seulement en préfixe au titre affiché dans la feuille associée à l'infobulle. Défaut : \"Aide concernant \" et \"Help about \".\nsr-prefixe-contenu\tString (Optionnel)\tTexte lecteur écran seulement en préfixe au contenu affiché dans la feuille associée à l'infobulle. Il permet d'améliorer l'accessibilité du composant en évitant de lire tout le contenu de l'infobulle lors de son ouverture. Défaut : \"Détails : \" et \"Details: \".\nsr-bouton-ouvrir\tString (Optionnel)\tTexte lecteur écran seulement du bouton permettant d'ouvrir l'infobulle.\nsr-bouton-fermer\tString (Optionnel)\tTexte lecteur écran seulement du bouton permettant de fermer l'infobulle.\ncontenu\tString (Optionnel)\tTexte à afficher dans la zone de contenu de l'infobulle.\nSlots disponibles\nNom\tDescription\ncontenu\tTexte à afficher dans la zone de contenu de l'infobulle.\ntexte-lie\tTexte lié à l'infobulle (affiché en bleu pâle juste avant l'infobulle.\nExemples\n1- Utilisation dans un paragraphe sans mot lié\n\nLe contenu doit être fourni via l'attribut contenu.\n\nIci un texte plus ou moins important. Aucun mot lié directement à l'aide contextuelle (cas de figure limite qui ne devrait pas se produire souvent) \n\n2- Utilisation à l'intérieur d'un paragraphe avec mot lié\n\nLe contenu doit être fourni via l'attribut contenu et le mot lié est dans la slot texte-lie.\n\nUn texte incroyable avec un mot très important, à savoir bananequi a été inséré ici de façon arbitraire et qui réflète un cas d'utilisation typique de l'aide contextuelle associée à un mot.\n\n3- Utilisation à l'extérieur d'un paragraphe sans mot lié (avec la slot \"contenu\")\nVotre nom officiel \n4- Utilisation à l'extérieur d'un paragraphe sans mot lié (avec l'attribut \"contenu\")\nVotre nom officiel \n5- Utilisation avec attributs avancés (sr-titre, sr-bouton-ouvrir et sr-bouton-fermer)\nUne question de test bidon ",
		"mc": ""
	},
	{
		"c": "Affichage de contenu",
		"r": "Points de suspension",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/affichagecontenu/pointssuspension",
		"t": "Points de suspension\nDescription\n\nLes points de suspension (ellipsis) sont utilisés pour tronquer un texte trop long pour être entièrement affiché dans l’espace prévu. Ils indiquent qu’il y a une suite à lire et affichent la suite du texte lorsqu'ils sont cliqués.\n\nRéférence système de design Quebec.ca\n\nN'existe pas dans la système de design.\n\nParticularités\n\nSi le fureteur ne supporte pas les \"ResizeObserver\" (ex. IOS <= 13.3, cela dit très rare car supporté par 95% des fureteurs), le texte est toujours affiché au long.\n\nConsulter le tableau de support des fureteurs\n. Ce lien sera ouvert dans un nouvel onglet.\n\nAttributs disponibles\nNom\tType\tDescription\nnb-lignes\tString (Optionnel)\tNombre de ligne à afficher initialement. Défaut \"1\".\nafficher-texte-lien\tString (Optionnel)\tAjoute le texte \"Voir plus/Show more\" dans le lien permettant l'affichage complet du texte. Ex. ... [Voir plus]. Défaut \"false\".\naffichage-initial\tString (Optionnel)\tAttribut réactif permettant de forcer la réinitialisation de l'affichage si valeur = 'true'\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Est injecté dans la zone de contenu du composant.\n\nExemples\n1- Texte long sur une ligne\n2- Texte long sur 3 lignes\n3- Texte court sur une ligne\n5- Texte court sur 3 lignes (entre toujours sur 2 lignes max.)\n6- Texte court sur une ligne et exemple de réinitialisation\n\nCet exemple vise a démontrer la possibilité de réinitialiser l'affichage du contrôle à son état initial.\n\nEx. si l'utilisateur a cliqué [...] afin de voir tout le contenu, il y a possibilité via le code de remettre l'affichage à son état initial. Dans cet exemple on le fait via un bouton, mais il suffit d'initialiser la valeur de l'attribut \"affichage-initial\" à \"true\".\n\nDébut de l'exemple\nRéinitialiser\n7- Avec texte affiché dans le lien",
		"mc": ""
	},
	{
		"c": "Affichage de contenu",
		"r": "Section",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/affichagecontenu/section",
		"t": "Section\nDescription\n\nLe composant section permet d'organiser le contenu en regroupant les informations en sections principales ou en blocs d'informations.\n\nSelon les besoins, cette section peut être extensible ou non, et avoir une bordure ou non pour regrouper son contenu.\n\nRéférence système de design Quebec.ca\nN'existe pas sur le site de design Quebec.ca\nAttributs disponibles\nNom\tType\tDescription\nextensible\tBoolean (Optionnel)\tIndique si la section doit être extensible ou non. Défaut \"true\" (extensible).\nreduit\tBoolean (Optionnel)\tIndique si la section doit être réduite ou développée. Peut être mis à jour une fois le contrôle généré afin de modifier son état d'affichage (développée/réduite). Défaut \"true\" (réduite).\nbordure\tBoolean (Optionnel)\tIndique si la section doit être affichée avec bordure ou non. Défaut \"true\" (avec bordure).\ntitre\tString (Optionnel)\tTitre affiché dans l'entête de la section.\ntag-titre\tString (Optionnel)\tBalise html à utiliser pour le titre de l'entête. Défaut \"h2\".\nconserver-etat-affichage\tBoolean (Optionnel)\t\n\nIndique si l'état d'affichage (développé/réduit) de la section doit être conservé pendant la session (tant que le fureteur est ouvert). Défaut \"false\".\n\nIMPORTANT! Afin que la fonctionnalité de conservation d'état d'affichage fonctionne, le composant utd-section doit avoir un id.\n\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Est injecté dans la zone de contenu de la section.\n\n\ntitre\tContenu html injecté dans l'entête de la section. Exemple d'utilisation : Ajout d'une icône à gauche du titre.\nÉvénements disponibles\nchangementEtat\n\nEst exécuté lorsque l'état d'affichage (développé/réduit) de la section change. Voir exemple 7- Section contrôlée par javascript.\n\nRetour\nNom\tType\tDescription\nreduit\tBoolean (Optionnel)\tIndique si la section est réduite. Il s'agit du nouvel état suite au changement d'état d'affichage.\nExemples\n1- Section avec champs\n2- Section avec accordéons et conservation de l'état d'affichage\n3- Section sans bordure\n4- Section non extensible\n\nLe mot de passe est associé à votre compte clicSÉQUR - Citoyens.\n\nModifiez votre mot de passe\n\n5- Section non extensible sans bordure\n\nLe mot de passe est associé à votre compte clicSÉQUR - Citoyens.\n\nModifiez votre mot de passe\n\n6- Section ouverte par défaut et titre h3\n\nLe mot de passe est associé à votre compte clicSÉQUR - Citoyens.\n\nModifiez votre mot de passe\n\n7- Section contrôlée par javascript et conservation de l'état d'affichage\nExemple d'utilisation 7\n\nUn bel exemple de comment contrôler l'ouverture/fermeture de la section via un bouton.\n\nCliquez le bouton \"Contrôler section\" pour essayer.\n\nRemarquez également le texte indiquant l'état d'affichage lorsque ce dernier change.\n\nContrôler section",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Bouton radio",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/boutonradio",
		"t": "Bouton radio\nDescription\n\nLe bouton radio, ou case d’option, permet à l’utilisateur de choisir une seule option dans une liste.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nExemples\n1- Gestion manuelle\nQuel est votre personnage préféré ?\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nLe champ «Quel est votre personnage préféré ?» est obligatoire.\n2- Gestion manuelle (affichage compact)\nQuel est votre personnage préféré ?\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nLe champ «Quel est votre personnage préféré ?» est obligatoire.\n3- Gestion automatique (Avec wrapper \"utd-champ-form\")\nQuel est votre personnage préféré ?\n*\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\n4- Gestion automatique (Avec wrapper \"utd-champ-form\" affichage compact)\nQuel est votre personnage préféré ?\n*\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Case à cocher",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/casecocher",
		"t": "Case à cocher\nDescription\n\nLa case à cocher permet à l’utilisateur de sélectionner une ou plusieurs options dans une liste.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nExemples\n1- Seul (gestion manuelle)\nJ'ai pris connaissance des directives\n*\nLe champ «J'ai pris connaissance des directives» est obligatoire.\n2- Seul (gestion manuelle, format compact)\nJ'ai pris connaissance des directives\n*\nLe champ «J'ai pris connaissance des directives» est obligatoire.\n3- Liste (gestion manuelle)\nQuels sont vos personnages préférés ?\n*\nobligatoire\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nFonzi\nCaptain America\nLe champ «Quels sont vos personnages préférés ?» est obligatoire.\n4- Liste (gestion manuelle, format compact)\nQuels sont vos personnages préférés ?\n*\nobligatoire\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nFonzi\nCaptain America\nLe champ «Quels sont vos personnages préférés ?» est obligatoire.\n5- Seul (Gestion automatique avec wrapper \"utd-champ-form\")\nJ'ai pris connaissance des directives\n*\n6- Seul (Gestion automatique avec wrapper \"utd-champ-form\", format compact)\nJ'ai pris connaissance des directives\n*\n7- Liste (Gestion automatique avec wrapper \"utd-champ-form\")\nQuels sont vos personnages préférés ?\nobligatoire\n*\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nFonzi\nVinny Barberino\n8- Liste (Gestion automatique avec wrapper \"utd-champ-form\", format compact)\nQuels sont vos personnages préférés ?\nobligatoire\n*\nFaites confiance à votre instinct.\nMarty MacFly\nForrest Gump\nDarth Vador (AKA Anakin Skywalker, AKA Dark Lord of the Sith)\nFonzi\nCaptain America",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Champs obligatoires",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/champobligatoire",
		"t": "Champ obligatoire\nDescription\n\nLa composante est constituée de deux éléments : la mention et l'astérisque.\n\nLa mention s’affiche sous le titre du formulaire avec la phrase : « Les champs suivis d'un * sont obligatoires ». Elle doit toujours être présente dès que la tâche dépasse 2 champs de formulaire.\n\nL’astérisque est placé à la fin de l’étiquette de chacun des champs obligatoires. Il est toujours en rouge pour que l'utilisateur puisse repérer rapidement quel champ est obligatoire. Il suffit d'utiliser un <span> avec la classe utd-icone-champ-requis ayant comme contenu une étoile \"*\".\n\nL’attribut aria-required doit être spécifié avec la valeur \"true\" afin d'indiquer au lecteur écran que le champ est obligatoire.\n\nIl serait possible d'utiliser l'attribut HTML5 required, cependant dès qu'on accède à un champ required, le lecteur écran indique que le champ est invalide s'il est vide, et ce même si le champ n'a pas encore été touché.\n\nExemples\nExemple 1\nTéléphone*\nSi vous n’avez pas de numéro de téléphone, inscrivez le numéro d’un membre de votre famille, d’un ami ou d’un organisme.",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Champs texte et autres",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/champstexte",
		"t": "Champs texte et autres\n\nTout ce qui est décrit dans cette page s'applique également aux champs de type \"number\", \"date\", \"tel\", \"email\", \"password\", \"url\" et \"search\".\n\nDescription\n\nLe champ texte est un espace dans lequel est saisie une information qui tient sur une ligne de texte.\n\nLe champ est accompagné d’une étiquette claire et succincte. Elle permet d’identifier au premier coup d’œil l’information requise dans le champ. Les signes de ponctuation sont à éviter.\n\nOn évite aussi d’ajouter des compléments d’information entre les champs d’un formulaire. Les précisions sont fournies à l’aide :\n\nd’une étiquette claire et succincte;\nd’un espace réservé (placeholder), au besoin;\nd’une courte phrase sous l’étiquette, au besoin;\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nNotions de base\n\nUn champ de type <input> doit posséder la classe utd-form-control et être dans un conteneur (ex. un <div>) ayant la classe utd-form-group (sauf le dernier champ d'une page).\n\nÉtiquette (label)\n\nStyle appliqué automatiquement à tous les éléments <label>.\n\nParticularités vs. le système de design Quebec.ca\n\nNous utilisons la graisse semi-bold au lieu de bold.\n\nExemples\nUn beau libellé de champ\nFormats disponibles\n\nLa longueur du champ doit être adaptée à la réponse requise, selon 5 formats disponibles.\n\nUtilisez les classes sm, md, lg, xl, et xxl afin de préciser le format des champs. Si rien n'est spécifié, le format \"large\" par défaut s'applique.\n\nParticularités vs. le système de design Quebec.ca\n\nNous avons ajouté un format \"extra extra-large\" xxl prenant la largeur disponible à l'intérieur du conteneur.\n\nExemples\nChamp \"petit\" (sm)\nChamp \"moyen\" (md)\nChamp \"large\" (lg)\nChamp \"extra-large\" (xl)\nChamp \"extra extra-large\" (xxl)\nEspace réservé et précision\n\nUn espace réservé (placeholder) permet de préciser comment saisir les informations. Il est utilisé dans les champs dont le format est particulier, comme le code postal, le numéro de téléphone ou la date.\n\nLa précision quant à elle permet d'ajouter certaines informations permettant de mieux comprendre ce qui doit être inscrit dans un champ. Elle s’ajoute à la suite de l’étiquette, avant le champ texte. Simplement utiliser un <span> avec la classe utd-precision.\n\nLors de l'utilisation d'une précision, il est impératif d'ajouter l'attribut aria-describedby sur le champ afin que la précision soit lue au lecteur écran avec le libellé.\n\nExemples\nTéléphone\nSi vous n’avez pas de numéro de téléphone, inscrivez le numéro d’un membre de votre famille, d’un ami ou d’un organisme.\nDifférents types\nChamp type \"text\"\nChamp type \"text\" (inactif)\nChamp type \"number\"\nChamp type \"date\"\nChamp type \"url\"\nChamp type \"tel\"\nChamp type \"email\"\nChamp type \"password\"\nChamp type \"search\"\nChamp type \"textarea\"",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Champs (Gestion automatique)",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/champsautomatique",
		"t": "Champs (gestion automatique)\nDescription\n\nIl est possible de grandement simplifier à différents niveaux le code requis pour les champs en utilisant le contrôle utd-champ-form.\n\nEn effet, il prend en charge la gestion du label, de la précision, du champ requis, du message d'erreur et évidemment de tous les attributs requis pour l'accessibilité.\n\nIl est possible de tout spécifier via des attributs du contrôle utd-champ-form, ou bien via du html traditionnel et tous va être bien ficelé (ex. label for, les attributs aria, la précision, le message d'erreur, etc.)\n\nAttributs disponibles\nNom\tType\tDescription\nformat\tString (Optionnel)\tTaille du champ. Valeurs possibles : sm, md, lg, xl, xxl. Pour les cases à cocher et boutons radios, la variante de format possible est : compact.\nobligatoire\tString (Optionnel)\tIndique si le champ est obligatoire ou non.\nlibelle\tString (Optionnel)\tLibellé du champ.\nprecision\tString (Optionnel)\tPrécision du champ.\ninvalide\tBoolean (Optionnel)\tIndique si la valeur du champ est invalide ou non. Si invalide le message d'erreur est affiché et le visuel d'erreur est appliqué.\nmessage-erreur\tString (Optionnel)\tLe message d'erreur à afficher (visible uniquement si invalide=\"true\").\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Utilisé lorsqu'on veut gérer manuellement en partie (ex. Un libellé, un contrôle, une précision, un message d'erreur.)\n\nExemples\n\nTous les exemples utilisent le cas de figure le plus complexe, i.e. un champ obligatoire, avec précision et message d'erreur.\n\n1- Gestion manuelle\n\nDans cet exemple, tout doit être présent dans le html. Noter le nombre d'ids, d'attributs aria et de classes css requis.\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\nLe champ «Téléphone» est obligatoire.\n2- Gestion automatique (la plus simple)\n\nExemple de gestion complète à sa plus simple expression.\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\nLe champ «Téléphone» est obligatoire.\n3- Gestion automatique (partielle)\n\nComme exemple 2, mais ici on a spécifié nous même un label via le html.\n\nÀ noter que l'attribut for n'est pas spécifié pour le label. Il sera ajouté automatiquement comme tout le reste!\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\nLe champ «Téléphone» est obligatoire.\n4- Gestion automatique (partielle)\n\nComme exemple 3, mais ici nous spécifions l'attribut for du label et une précision via le html.\n\nNoter l'attribut aria-describedby du contrôle qui est bien associé à notre précision, même si nous n'avions pas spécifié d'id pour cette dernière.\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\nLe champ «Téléphone» est obligatoire.\n5- Gestion automatique (partielle)\n\nComme exemple 4, mais ici nous spécifions le message d'erreur via le html.\n\nNoter l'attribut aria-describedby du contrôle qui est bien associé à notre id de précision et de message d'erreur, même si nous n'avions pas spécifié d'id pour le message d'erreur.\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\nLe champ «Téléphone» est obligatoire.\n6- Gestion automatique champ texte (la plus simple avec dynamisme)\n\nAfin de modifier l'affichage du contrôle il suffit de modifier la valeur des différents attributs.\n\nPar exemple pour modifier l'affichage du message d'erreur il suffit de spécifier la valeur désirée dans l'attribut invalide (true/false) et toutes les attaches vont être faites.\n\nÀ noter que le présent exemple est très basique et vérifie uniquement que le champ contient une valeur ou non.\n\nTéléphone*\nIndiquez le numéro de téléphone de l'établissement concerné.\n7- Gestion automatique textarea (la plus simple)\nSaisissez ici votre requête en langage naturel\nComme vous poseriez la question à quelqu'un.",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Erreurs",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/champerreur",
		"t": "Erreurs\nDescription\n\nUne erreur dans un champ est indiquée par un contour rouge (excepté pour les cases à cocher et boutons radio) et un message contextuel placé sous le champ.\n\nPour le message d'erreur, il suffit d'utiliser un <span> avec la classe utd-erreur-champ. Ce <span> doit obligatoirement avoir un \"id\".\n\nL'attribut aria-describedby de l'élément doit contenir l'id du <span> contenant le message d'erreur, ainsi que l'id de la précision s'il y en a une afin que le message d'erreur, et la précision soient lus au lecteur écran.\n\nL'attribut aria-invalid doit avoir la valeur \"true\".\n\nParticularités vs. le système de design Quebec.ca\n\nLa bordure rouge est de 2px au lieu de 3px et la graisse pour le message d'erreur est normale au lieu de bold.\n\nExemples\nExemple 1\nTéléphone*\nSi vous n’avez pas de numéro de téléphone, inscrivez le numéro d’un membre de votre famille, d’un ami ou d’un organisme.\nLe champ «Téléphone» est obligatoire.",
		"mc": ""
	},
	{
		"c": "Formulaire",
		"r": "Liste déroulante",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/formulaire/listederoulante",
		"t": "Liste déroulante\nDescription\n\nLa liste déroulante permet à l'utilisateur de sélectionner une ou plusieurs des options contenues dans une liste.\n\nIl existe 3 types de liste déroulante.\n\nLa liste déroulante standard est utilisée lorsqu'un seul choix est requis, par exemple pour sélectionner la province de résidence dans une adresse postale. \n\nLa liste déroulante à sélection multiple permet de choisir un ou plusieurs éléments de la liste, comme la composante Case à cocher. Elle ne devrait être utilisée uniquement lorsque les cases à cocher occupent trop d'espace dans l'écran.\n\nCette liste est utilisée pour permettre à l'utilisateur de sélectionner des critères comme dans le cas de conditions de travail d'un emploi.\n\nLa boîte combinée est une liste à sélection unique ou multiple qui comprend un outil de recherche. Par défaut la recherche permet un certain flou (Voir paramètres \"recherche-floue\" et \"precision-recherche\").\n\nCette liste est utilisée pour faciliter la sélection d'éléments lorsque la liste est très longue, par exemple une liste de ministères et organismes.\n\nRéférence système de design Québec.ca\nVoir les spécifications sur le site de design Québec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nParticularités vs. le système de design Québec.ca\n\nUn filet gris pâle a été ajouté sous le placeholder lorsqu'une liste à sélection simple sans recherche est ouverte afin de mieux distinguer les choix possibles de l'élément sélectionné.\n\nParticularités techniques\n\nCe composant produit une liste déroulante à partir d'une liste native (select). Il suffit d'intégrer à l'intérieur du présent composant une liste déroulante native avec les options que vous souhaitez et l'attribut \"multiple\" pour une liste à sélection multiple.\n\nLes attributs du composant vous permettent de spécifier si la liste est recherchable (floue ou précise), ainsi que sa largeur. La largeur devrait être déterminée en fonction de la longueur des textes des choix possibles.\n\nAttributs disponibles\nNom\tType\tDescription\nrecherchable\tBooléen (Optionnel)\tIndique s'il est possible d'effectuer une recherche dans les valeurs possibles de la liste. (Défaut : \"false\")\nlargeur\tString (Optionnel)\tLargeur de la liste. Valeurs possibles : lg (528px), md (342px), sm (156px). (Défaut : \"md\")\nrecherche-floue\tBooléen (Optionnel)\tIndique si la recherche doit être précise ou non, i.e. doit contenir exactement le terme recherché. Si la recherche est floue, un certain niveau d'erreur est permis (ex. une faute de frappe). (Défaut : \"true\")\nSlots disponibles\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Ne devrait être que le contrôle \"select\" original.\n\nExemples\n\nLes exemples 1a et 1b montrent des listes déroulantes natives à titre de référence et comparaison. Les autres exemples utilisent tous le composant \"Liste déroulante\".\n\n1a- Liste déroulante native à sélection simple\nSélectionnez votre province canadienne préférée\nNe soyez pas timide et assumez-vous.\nAlberta\nColombie-Britannique\nManitoba\nNouveau-Brunswick\nTerre-Neuve-et-Labrador\nNouvelle-Écosse\nOntario\nÎle-du-Prince-Édouard\nQuébec\nSaskatchewan\nTerritoires du Nord-Ouest\nNunavut\nYukon\n1b- Liste déroulante native à sélection multiple\nSélectionnez vos provinces canadiennes préférées\nNe soyez pas timide et assumez-vous.\nAlberta\nColombie-Britannique\nManitoba\nNouveau-Brunswick\nTerre-Neuve-et-Labrador\nNouvelle-Écosse\nOntario\nÎle-du-Prince-Édouard\nQuébec\nSaskatchewan\nTerritoires du Nord-Ouest\nNunavut\nYukon\n2a- Liste déroulante à sélection simple\nSélectionnez votre province canadienne préférée\nNe soyez pas timide et assumez-vous.\nEffectuer un choix\nAlberta\nColombie-Britannique\nManitoba\nNouveau-Brunswick\nTerre-Neuve-et-Labrador\nNouvelle-Écosse\nOntario\nÎle-du-Prince-Édouard\nQuébec\nSaskatchewan\nTerritoires du Nord-Ouest\nNunavut\nYukon\n2b- Liste déroulante à sélection simple (avec peu de choix donc sans barre de défilement)\nSélectionnez votre province canadienne préférée\nNe soyez pas timide et assumez-vous.\nEffectuer un choix\nAlberta\nColombie-Britannique\nQuébec\nSaskatchewan\n3- Liste déroulante à sélection multiple\nSélectionnez vos provinces canadiennes préférées\nNe soyez pas timide et assumez-vous.\nAlberta\nColombie-Britannique\nManitoba\nNouveau-Brunswick\nTerre-Neuve-et-Labrador\nNouvelle-Écosse\nOntario\nÎle-du-Prince-Édouard\nQuébec\nSaskatchewan\nTerritoires du Nord-Ouest\nNunavut\nYukon\n4- Boîte combinée (sélection simple)\nSélectionnez votre état américain préféré*\nNe soyez pas timide et assumez-vous.\nEffectuer un choix\nAlabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nDistrict Of Columbia\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming\nLe champ «Sélectionnez votre état américain préféré» est obligatoire.\n5- Boîte combinée (sélection multiple)\n\nDans cet exemple des mots clés ont été ajoutés sur certaines options. Ex. \"Nordiques Québec\" pour \"Colorado\" et \"pomme\" pour \"New York\". Si une recherche est faite avec \"Québec\", le résultat \"Colorado\" sera disponible bien que le terme \"Québec\" ne soit pas dans le texte de l'option.\n\nSélectionnez vos états américains préférés\nNe soyez pas timide et assumez-vous.\nAlabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nDistrict Of Columbia\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming\n6- Boîte combinée (sélection multiple) avec recherche précise (aucun flou)\n\nEffectuer une recherche avec le terme \"Floride\". Comme dans cet exemple la recherche est précise (vs. floue par défaut), il n'y aura aucun résultat contrairement à ce que nous pouvons obtenir dans l'exemple 5.\n\nSélectionnez vos états américains préférés\nNe soyez pas timide et assumez-vous.\nAlabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nDistrict Of Columbia\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming\n7- Valeur par défaut et état inactif\n\nCompte tenu de certaines contraintes techniques, les exemples de définition d'une valeur par défaut et d'état inactif sont dans une autre page. Accéder à cette page.",
		"mc": ""
	},
	{
		"c": "Navigation",
		"r": "Haut de page",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/navigation/hautpage",
		"t": "Haut de page\nDescription\n\nLe bouton haut de page permet de remonter rapidement au haut de la page.\n\nRéférence système de design Quebec.ca\nVoir les spécifications sur le site de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\nAttributs disponibles\nNom\tType\tDescription\ntitle\tString (Optionnel)\tTexte affiché au survol du bouton. Défaut \"Retour en haut de page.\", \"Return to the top of the page.\"\nhauteur-minimale-scroll\tNumber (Optionnel)\tHauteur (en px) minimale de défilement avant que le bouton soit affiché. Défaut 555.\nExemple\n\nDéfiler la page vers le bas afin de voir le contrôle haut de page en bas à droite de la page.\n\nÀ noter que le contrôle en exemple devrait être inséré dans votre page à l'endroit désiré dans le DOM pour la tabulation. Généralement c'est juste avant le pied de page.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse laoreet egestas metus, vel lobortis lacus. Cras tincidunt ante mauris, semper vulputate libero tincidunt ut. Quisque quis cursus velit, a venenatis tellus. Proin nec venenatis dui, eu tempus dui. Etiam sed mauris dui. Aliquam pellentesque turpis iaculis leo dapibus facilisis non et dolor. Vestibulum hendrerit, dolor at volutpat sodales, nulla metus rutrum diam, at facilisis neque odio et dui. Vestibulum a blandit neque. Maecenas sagittis imperdiet leo in mattis. Proin blandit orci non enim euismod, quis pellentesque tortor tempor. Suspendisse dui nisi, consequat vel eros et, porttitor dictum odio. Ut tempor consequat mollis.\n\nAenean ultrices consectetur tellus, a efficitur diam finibus non. Donec imperdiet ex nec consectetur molestie. Proin porta est id ligula auctor, in molestie massa aliquet. Nam velit nunc, ornare id tempor et, aliquet ac ante. Aliquam ut sapien ut dolor ornare molestie. Nam semper sollicitudin vehicula. Pellentesque fermentum sit amet nibh sit amet malesuada. In sed est tincidunt, feugiat nisl nec, commodo urna. Nullam ac pellentesque nulla. Fusce efficitur metus non purus tincidunt eleifend. Maecenas consectetur id nulla sit amet elementum.\n\nPellentesque felis diam, aliquam sed pellentesque nec, tristique sit amet purus. Phasellus dapibus tempus malesuada. Vestibulum justo dui, hendrerit eu velit sit amet, placerat aliquam erat. Integer faucibus nisi id tellus fermentum cursus. Cras sagittis quam felis, ut luctus est molestie auctor. Vestibulum nec suscipit libero. Vivamus non lacus lorem. In efficitur lectus nec finibus porttitor. Ut nulla arcu, semper non hendrerit vel, placerat ac leo.\n\nQuisque non viverra mi. Etiam vehicula lectus vitae odio eleifend, nec rutrum ante pretium. Cras vulputate eros sapien, porttitor volutpat urna pretium vitae. Duis viverra erat sed mauris aliquet iaculis. Donec sodales feugiat turpis, cursus porta erat efficitur eget. Sed eu posuere lacus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Fusce consequat lorem nisi, in convallis ex gravida a. Ut at imperdiet nibh. Quisque a faucibus mi. Aenean odio urna, lobortis ac tempus a, ultricies non tellus. Mauris tempor erat nisi, eu porttitor purus sollicitudin et. Aenean et turpis erat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elit mi, efficitur ut mi quis, eleifend tincidunt tellus.\n\nFusce efficitur tempus odio, accumsan dictum nisl feugiat sed. Vivamus tempus odio eu tristique fringilla. Sed pulvinar pellentesque lectus, id vestibulum purus ultrices id. Nulla et arcu at erat porttitor tincidunt. Suspendisse potenti. In hac habitasse platea dictumst. Vestibulum sollicitudin enim non erat molestie, ut mollis sem suscipit. Aenean tempus porttitor risus, id bibendum ante ullamcorper ut. Fusce in leo nibh. Vivamus lobortis purus sit amet sem suscipit, eu interdum ligula fermentum. Proin ullamcorper sem quis enim venenatis accumsan. Vivamus arcu augue, venenatis ut lorem at, ullamcorper euismod metus.\n\nNunc tincidunt, metus ac euismod imperdiet, metus est rutrum augue, vitae mattis lorem dui ut velit. Donec pulvinar imperdiet metus sit amet posuere. Proin diam nisl, gravida quis lectus sed, pellentesque blandit neque. Vestibulum eget sapien et enim euismod blandit. Pellentesque sagittis egestas mauris vel feugiat. Sed lacinia, sem at varius cursus, arcu magna volutpat urna, ac aliquam arcu erat in velit. Aliquam pellentesque porttitor mollis. Vivamus placerat nec turpis non pulvinar. Praesent magna purus, molestie non lorem vitae, fringilla viverra neque. Proin varius dolor eu sagittis blandit. Vestibulum vel lorem mi. Suspendisse potenti. Ut imperdiet molestie odio. Nulla lacinia, est et rutrum scelerisque, lacus nulla sollicitudin risus, id facilisis lorem velit efficitur enim. Integer ut turpis ac diam imperdiet blandit nec quis nulla. Vestibulum nec volutpat arcu.\n\nVestibulum mollis libero non leo gravida aliquet. Quisque scelerisque massa sit amet tempus elementum. Praesent hendrerit tincidunt nibh. Cras quis neque quis neque malesuada iaculis a at augue. Cras nec tristique mi. Nulla sollicitudin fermentum urna quis ultrices. Nunc sed elit pharetra, ullamcorper mi eget, suscipit diam. Integer vitae ligula risus. Vestibulum finibus odio nec tellus dictum, sed iaculis mi dignissim. Morbi sit amet eleifend enim. Nulla a cursus ipsum. Fusce mattis tortor quis tortor consectetur, non lacinia odio ornare. Mauris non leo sed risus imperdiet posuere.\n\nInteger ut aliquam libero, in porta felis. Etiam vel lectus vel massa pretium imperdiet non rhoncus justo. Etiam augue urna, posuere vel sapien vel, blandit lacinia diam. Ut massa ante, molestie a metus ornare, porttitor malesuada nibh. Vivamus mattis vel mi eu mollis. Vestibulum at libero nec erat sodales rutrum quis sed elit. Cras a aliquet ligula. Nunc volutpat, lorem a suscipit dapibus, quam urna sodales neque, eget rutrum ante urna ut augue. Suspendisse potenti. Curabitur mollis dictum lobortis. Integer odio libero, hendrerit at ullamcorper vitae, vestibulum non turpis. Duis rhoncus laoreet consectetur. Curabitur id rhoncus tellus, dictum cursus sem. Praesent eget ullamcorper leo, sit amet pharetra mi.\n\nAliquam erat volutpat. Nulla lacinia quis libero at molestie. Aenean efficitur eros elit, et pellentesque eros iaculis et. Morbi commodo, nulla ac faucibus tristique, nisi orci ultrices mi, vel luctus orci turpis sit amet odio. Curabitur convallis mattis odio eget varius. In bibendum commodo sem mollis elementum. Vestibulum vel lacus quis elit dapibus lobortis pharetra sit amet lorem. In vitae sem nisi. Donec lobortis dapibus consectetur. In hac habitasse platea dictumst. Maecenas egestas molestie diam nec lacinia. Sed id quam at eros pellentesque feugiat eu non ex. Proin iaculis, ipsum eu pulvinar consequat, sapien nunc convallis dolor, non placerat risus tortor a magna. Sed eu lorem at arcu molestie tempus ut eget lacus. Suspendisse tempus ornare nunc, non placerat tortor scelerisque id.\n\nUt vel aliquet diam. Etiam luctus est lacus, eget fringilla leo luctus ut. Maecenas dignissim dapibus dictum. Nunc eget blandit felis, et ultricies ante. Nam molestie non turpis vitae ornare. Nullam non luctus nulla. Nam at dapibus nibh, nec congue justo. Donec cursus, neque sodales fermentum pharetra, ligula lacus hendrerit ligula, sit amet molestie mauris odio et purus. Quisque at luctus urna.\n\nMorbi fermentum placerat velit eu dictum. Cras sed lobortis nisi. Aliquam malesuada enim justo, sed rhoncus neque ullamcorper sit amet. Pellentesque placerat vulputate velit, id faucibus quam vehicula eu. Mauris efficitur facilisis ante sit amet egestas. Quisque non nisl in leo congue venenatis. Mauris eu urna non felis iaculis porttitor. Vivamus tincidunt, nisi vel varius iaculis, lorem elit placerat nisi, eu venenatis dui erat a nisi. Suspendisse magna felis, volutpat non eros at, posuere sodales ligula. Vivamus nulla diam, suscipit tincidunt orci et, efficitur lobortis ante. Morbi congue quam enim, at luctus lectus venenatis ut. Suspendisse sed nulla vulputate, tempor risus ullamcorper, blandit enim. In hac habitasse platea dictumst. Vestibulum nunc ipsum, tristique vitae lectus at, sodales lacinia turpis. In lorem nulla, iaculis congue interdum id, congue et dolor.\n\nDonec ligula turpis, maximus rhoncus nunc quis, elementum faucibus lorem. Duis a rhoncus nisi. Suspendisse pellentesque magna vitae nibh viverra dictum. Etiam a erat eu ipsum consectetur interdum in non justo. Aenean convallis sagittis enim, eu posuere erat luctus vel. Cras condimentum laoreet risus vel pulvinar. Nunc in augue dictum, scelerisque sapien id, hendrerit nulla. Integer at tortor quis ex consectetur condimentum. Aenean laoreet vulputate orci, eget dictum diam faucibus sed. Nam massa augue, facilisis ac odio sed, tempus pellentesque felis. Ut venenatis viverra nisl eget sodales. Praesent viverra lorem placerat vulputate maximus. Praesent luctus fermentum rutrum. Aenean aliquet aliquam dolor at dictum.\n\nQuisque lacinia sed nisl at tincidunt. Vivamus vel felis a ante scelerisque euismod sit amet vel mauris. Vivamus eu aliquet lacus. Mauris sed erat risus. Phasellus rutrum ex a ipsum sagittis laoreet. Vivamus iaculis condimentum nulla a vehicula. Sed dignissim, arcu non condimentum interdum, ligula ipsum dictum urna, sed dictum elit tortor et odio. Phasellus volutpat dictum nisi at consequat. Morbi volutpat, purus sit amet sodales feugiat, magna dolor venenatis ex, sagittis fringilla erat risus vitae magna.\n\nMaecenas consectetur elit quis urna consectetur, non luctus arcu mattis. Vivamus dapibus lacus vel metus aliquam feugiat. Praesent vitae justo gravida, efficitur felis at, cursus massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ut faucibus ligula. Duis nec nulla libero. Interdum et malesuada fames ac ante ipsum primis in faucibus. Etiam ac pharetra leo.\n\nPraesent at velit quam. Ut quis orci nec erat bibendum ultricies gravida non lectus. Proin luctus est vel turpis efficitur ultrices. Mauris semper tempor elit vitae congue. Mauris tempus, libero eu interdum viverra, enim ligula malesuada turpis, vel tempus sem lectus eget orci. Pellentesque suscipit feugiat diam ac tincidunt. Duis in libero et est vulputate blandit. Etiam tempus, magna id mattis vehicula, mauris erat pharetra justo, ac venenatis tellus lorem sit amet mi.\n\nMauris aliquet mattis libero, in imperdiet tellus posuere sed. Suspendisse posuere, ipsum sed egestas ultricies, nisi sapien tincidunt urna, rhoncus volutpat diam lorem eu lorem. Phasellus pellentesque nunc luctus tortor venenatis tincidunt. Quisque auctor consequat nisi quis convallis. Nulla erat arcu, cursus eget lectus vitae, efficitur aliquam lorem. Maecenas gravida vulputate nulla sit amet consequat. Donec suscipit, est eu suscipit tincidunt, urna quam tempor leo, sit amet ultricies lorem felis non tortor. Aliquam a arcu ut ex rhoncus blandit. Etiam ultricies mi sit amet nulla cursus, eget consectetur lorem viverra. Etiam viverra, lorem et maximus dapibus, urna est vestibulum ligula, vitae facilisis nisi sapien vel dui. Quisque vitae lectus posuere, euismod enim in, malesuada elit. Praesent ac nisl maximus, rutrum elit vel, consectetur quam. Ut condimentum commodo metus quis pellentesque. Nam egestas laoreet risus nec blandit.\n\nIn ultrices quis arcu ac egestas. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed id augue eget sem suscipit molestie. Aenean suscipit mi sit amet turpis congue porta. Vivamus eu feugiat tortor, a congue mi. Quisque et convallis quam. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam in urna porttitor, porttitor turpis vel, elementum nunc. Nullam consectetur nulla ac nulla pulvinar dictum. Cras varius blandit dui sed eleifend. Proin dignissim sollicitudin orci quis pellentesque. Donec tincidunt quis tellus bibendum volutpat. Duis euismod, urna sit amet tempus molestie, nulla nisi pretium arcu, ut hendrerit libero mi eu eros.\n\nNam nec sem mi. Curabitur sed elementum leo. Nulla interdum posuere augue vel elementum. Curabitur eget dui laoreet, facilisis risus eu, euismod nunc. Pellentesque at dictum tortor. Etiam justo tellus, vehicula a rhoncus at, euismod sit amet tellus. Sed eu est vehicula, maximus nisl id, placerat lorem. Quisque leo leo, consequat in scelerisque sed, auctor eu sem. Fusce commodo, ligula eget accumsan gravida, purus lectus semper odio, quis laoreet ex turpis vel nulla. Sed ac tortor accumsan, gravida purus a, finibus velit. Morbi tempor feugiat rhoncus. Vivamus tincidunt finibus congue. Morbi sed volutpat neque, ut interdum nisl. Duis id molestie odio, ut mollis nulla.\n\nAenean auctor turpis lorem, quis aliquam felis interdum a. Quisque placerat magna nisl, non semper ex vulputate eu. Sed quis nibh odio. Nam iaculis nulla in quam lacinia, et volutpat odio maximus. Aenean suscipit quis tellus at ultricies. Pellentesque euismod ipsum non varius volutpat. Fusce posuere egestas libero tincidunt vehicula. Duis scelerisque imperdiet tellus eget pellentesque. Proin accumsan, velit vitae ornare dignissim, augue diam pulvinar ante, non semper eros nunc ac libero. Curabitur augue eros, finibus nec neque id, pellentesque ultrices urna. Nullam quis velit quis neque hendrerit ultricies sed a orci.\n\nCras facilisis urna quis lobortis tristique. Donec id scelerisque ligula. Vivamus nec velit enim. Etiam pharetra neque et justo scelerisque mattis. Duis felis eros, malesuada sit amet ante ut, faucibus cursus mi. Mauris dui sem, tempus vitae lacinia a, mattis quis quam. Fusce nec purus vitae dolor interdum porta. Ut faucibus aliquet bibendum. Sed leo justo, mollis id posuere ut, eleifend ac lectus. Duis nec ultricies tellus. Aenean sodales eu magna eget ullamcorper. Proin ut quam eget lorem dapibus euismod. Nulla consequat nibh vel ultricies viverra.",
		"mc": ""
	},
	{
		"c": "Navigation",
		"r": "Menu d'ancres",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/navigation/menuancres",
		"t": "Menu d'ancres\nDescription\n\nMenu d'ancres placé généralement au début d'une page. On le voit ici au début de la zone de contenu de la page \"Dans cette page:\". Il est généré à partir du selecteur css fourni.\n\nRéférence système de design Quebec.ca\n\nNon disponible.\n\nAttributs disponibles\nNom\tType\tDescription\ntitre\tString (Optionnel)\tTitre du menu d'ancre. Défaut \"Dans cette page :\", \"On this page:\"\nselecteur\tString (Optionnel)\tSélecteur css à utiliser pour obtenir/definir les ancres. Défaut \".ancre\".\nExemple\n\nL'exemple contient le menu d'ancre contenu dans la présente page. Le sélecteur css obtient les balises h2 dans main.",
		"mc": ""
	},
	{
		"c": "Navigation",
		"r": "Menu horizontal",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/navigation/menuhorizontal",
		"t": "Menu horizontal\nDescription\n\nMenu de navigation horizontal applicatif à deux niveaux. Il est généré à partir de deux composants, soit utd-menu-horizontal et utd-menu-horizontal-item.\n\nLe composant utd-menu-horizontal contient l'ensemble du menu.\n\nLe composant utd-menu-horizontal-item correspond à un élément du menu et peut contenir d'autres composants utd-menu-horizontal-item (menu/sous-menu).\n\nComme il s'agit d'un menu horizontal \"applicatif\" et non \"informationnel\", seuls deux niveaux sont supportés.\n\nRéférence système de design Quebec.ca\n\nNon disponible.\n\nRéférences d'accessibilité\n\nLe \"disclosure pattern\" tel que défini au W3C\n. Ce lien sera ouvert dans un nouvel onglet.\n a été utilisé.\n\nParticularités\n\nLe menu horizontal faire partie du \"bandeau principal\" qui est constitué du menu principal (le présent) et d'une zone de raccourcis et d'éléments liés à la connexion.\n\nLa zone de raccourcis et d'éléments liés à la connexion/déconnexion ne fait pas partie du menu horizontal, et son contenu devrait se restreindre à quelques icônes de raccourcis et un bouton de connexion/déconnexion.\n\nCependant les deux doivent être intégrés dans une structure html particulière. Voir les éléments de classe utd-bandeau-principal, utd-container et utd-zone-raccourcis-connexion dans l'exemple.\n\nutd-menu-horizontal - Attributs disponibles\nNom\tType\tDescription\ntitre\tString (Optionnel)\tTitre lu au lecteur écran seulement. Défaut : \"Menu principal de navigation\" / \"Main navigation menu\".\nlargeur-viewport-menu-burger\tInteger (Optionnel)\tLargeur d'écran à partir de laquelle l'affichage du menu est forcé en mobile, i.e Affichage d'un seul élément de menu (menu burger) nommé \"Menu\". Défaut : 475.\nafficher-icone-accueil\tBooléen (Optionnel)\tIndique si le lien \"accueil/home\" (icône \"maison\") doit être affiché ou non. Défaut : false.\ntitre-accueil\tString (Optionnel)\tTitle (icône maison) et texte (dans le menu burger) associé au lien \"accueil\" si affiché. Sera aussi le texte affiché Défaut : Accueil / Home.\nurl-accueil\tString (Optionnel)\tUrl vers laquelle le lien \"accueil\" doit rediriger. Défaut : \"/\".\nutd-menu-horizontal-item - Attributs disponibles\nNom\tType\tDescription\nlibelle\tString\tTexte du lien associé à l'item de menu. Il est possible d'ajouter \"<br/>\" afin de forcer un saut de ligne dans le texte.\nhref\tString (Optionnel)\tValeur de l'attribut \"href\" du lien dans l'item de menu.\nSlots disponibles (utd-menu-horizontal et utd-menu-horizontal-item)\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Ne devrait contenir que des composants utd-menu-horizontal-item.\n\nExemple\n\nL'exemple contient le menu horizontal du présent site de démonstration avec quelques éléments fictifs supplémentaires visibles uniquement dans la présente page.\n\nLe menu horizontal doit être intégré dans une structure html particulière. Voir les éléments de classe utd-bandeau-principal et utd-container dans l'exemple.",
		"mc": ""
	},
	{
		"c": "Navigation",
		"r": "Menu vertical",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/navigation/menuvertical",
		"t": "Menu vertical\nDescription\n\nMenu vertical à deux niveaux. Il est généré à partir de deux composants, soit utd-menu-vertical et utd-menu-vertical-item.\n\nLe composant utd-menu-vertical contient l'ensemble du menu.\n\nLe composant utd-menu-vertical-item correspond à un élément du menu et peut contenir d'autres composants utd-menu-vertical-item (menu/sous-menu).\n\nPour le moment seuls deux niveaux sont supportés.\n\nutd-menu-vertical - Attributs disponibles\nNom\tType\tDescription\ntitre\tString (Optionnel)\tTitre affiché au dessus du menu (si titre-visible=\"true\") ou au lecteur écran seulement sinon. Défaut : \"Menu secondaire\" / \"Secondary menu\".\ntitre-visible\tBoolean (Optionnel)\tIndique si le titre du menu est affiché ou non. Défaut : \"true\" (titre visible).\nutd-menu-vertical-item - Attributs disponibles\nNom\tType\tDescription\nlibelle\tString\tTexte du lien associé à l'item de menu.\nhref\tString (Optionnel)\tValeur de l'attribut \"href\" du lien dans l'item de menu.\nSlots disponibles (utd-menu-vertical et utd-menu-vertical-item)\nNom\tDescription\ndéfaut\t\n\nSlot par défaut. Aucun nom à fournir.\n\nContenu html entre les balises du contrôle. Ne devrait contenir que des composants utd-menu-vertical-item.\n\nRéférence système de design Quebec.ca\n\nNon disponible.\n\nExemple\n\nL'exemple contient le menu vertical du présent site de démonstration.",
		"mc": ""
	},
	{
		"c": "Entête et pied de page",
		"r": "Entête PIV",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/entetepiedpage/piventete",
		"t": "PIV entête\nDescription\n\nPIV d'entête gouvernemental. Il inclu le lien \"Passer au contenu\" (possible de ne pas le générer au besoin), ainsi qu'une barre de recherche si requis.\n\nRéférence système de design Quebec.ca\n\nNon disponible. Voir les spécifications sur le XD de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\n.\n\nParticularités vs. le système de design Quebec.ca\n\nNous avons 2 lignes potentielles pour le titre du site ou du service.\n\nAttributs disponibles\nNom\tType\tDescription\ntitre-site1\tString (Obligatoire)\tTexte ligne 1 pour le nom du site ou de service.\ntitre-site2\tString (Optionnel)\tTexte ligne 2 pour le nom du site ou de service.\nurl-titre-site\tString (Obligatoire)\tUrl vers laquelle rediriger lorsque l'utilisateur clique sur la zone de titre du site ou de service.\nsrc-logo\tString (Optionnel)\tSource (attribut \"src\") du logo. Défaut logo du gouvernement du québec \"/images/utd-sprite.svg#QUEBEC_blanc\" inclu avec les composants utd.\nurl-logo\tString (Optionnel)\tUrl du logo. Défaut : \"/\".\nalt-logo\tString (Optionnel)\tTexte alternatif du logo. Défaut : \"Signature du gouvernement du Québec.\" / \"Québec government signature\".\nurl-langue-alternative\tString (Optionnel)\tUrl vers laquelle rediriger lorsque l'utilisateur clique sur le lien. Si non spécifié, le lien n'est pas affiché.\ntexte-langue-alternative\tString (Optionnel)\tTexte du lien de langue alternative. Défaut \"Français\" / \"English\".\nurl-nous-joindre\tString (Optionnel)\tUrl vers laquelle rediriger lorsque l'utilisateur clique sur le lien. Si non spécifié, le lien n'est pas affiché.\ntexte-nous-joindre\tString (Optionnel)\tTexte du lien \"Nous joindre\". Défaut \"Nous joindre\" / \"Contact us\".\npasser-contenu\tBoolean (Optionnel)\tIndique si le lien \"Passer au contenu\" est intégré ou non. Défaut \"true\".\nurl-passer-contenu\tString (Optionnel)\tUrl vers laquelle rediriger lorsque l'utilisateur clique sur le lien. Devrait être une ancre de la page. Défaut \"#main\".\ntexte-passer-contenu\tString (Optionnel)\tTexte du lien. Défaut \"Passer au contenu\" / \"Skip to content\".\nafficher-recherche\tBoolean (Optionnel)\tIndique s'il faut afficher ou non le contrôle de recherche (Loupe + contrôle de saisie du texte recherché). Défaut \"false\".\nurl-contenu-recherche\tString (Optionnel)\tSi spécifié, url à laquelle un appel (fetch) sera effectué afin d'obtenir le contenu de recherche au format attendu en JSON. Voir le composant Barre de recherche pour plus de détails.\nSlots disponibles\nNom\tDescription\nboutonRecherche\t\n\nContenu html à insérer dans la zone prévue pour le bouton de recherche. Normalement un lien ou un bouton avec une loupe.\n\n\nboutonRechercheMobile\t\n\nContenu html à insérer dans la zone prévue pour le bouton de recherche en mode mobile. Normalement un lien ou un bouton avec une loupe.\n\n\nzoneRecherche\t\n\nContenu html à insérer dans la zone prévue pour la zone de recherche. Normalement une boîte de texte avec autocomplétion ou un bouton qui lance la recherche. Peut aussi contenir un contrôle permettant d'afficher les résultats de recherche.\n\nÉvénements disponibles\n\nAucun événement spécifique au contrôle de piv d'entête. Cependant l'événement initialiser du contrôle barre de recherche peut être nécessaire si la recherche à l'intérieur du PIV est activée.\n\nLe code source de la section \"Exemple\" de la présente page contient un exemple de définition du contenu de recherche avec un callback.\n\nVoir le composant Barre de recherche pour plus de détails.\n\nFormat (JSON) du contenu de recherche attendu\n\nPour plus de détail sur le format de données attendu consulter la fiche du composant Barre de recherche.\n\nExemple\n\nL'exemple contient le piv d'entête du présent site de démonstration.",
		"mc": ""
	},
	{
		"c": "Entête et pied de page",
		"r": "Pied de page PIV",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/entetepiedpage/pivpiedpage",
		"t": "PIV pied de page\nDescription\n\nPIV de pied de page gouvernemental.\n\nInclu le menu de liens \"génériques\" ou \"généraux\" qui sont obligatoires (selon la version actuelle de nos règles d'interfaces) : Accessibilité et Politiques et conditions d’utilisation.\n\nRéférence système de design Quebec.ca\n\nNon disponible. Voir les spécifications du guide des communications électronique gouvernementales.\n\nAttributs disponibles\nNom\tType\tDescription\ntexte-titre-sr-liens\tString (Optionnel)\tTexte du titre \"h2\" lu au lecteur écran pour le menu de liens. Défaut : \"Liens vers informations complémentaires\" / \"Links to additional information\".\nurl-logo\tString (Optionnel)\tUrl à ouvrir dans un nouvel onglet lorsque l'utilisateur clique sur le logo. Défaut : \"https://www.mtess.gouv.qc.ca/\" / \"https://www.mtess.gouv.qc.ca/index_en.asp\".\nalt-logo\tString (Optionnel)\tTexte alternatif du logo. Défaut : \"Ministère de l'Emploi et de la Solidarité sociale\".\nsrc-logo\tString (Optionnel)\tSource (attribut \"src\") du logo. Défaut logo du MESS \"/images/logo_piv_bas_page.png\" inclu avec les composants utd.\nwidth-logo\tInteger (Optionnel)\tLargeur du logo. Défaut : \"210\".\nheight-logo\tInteger (Optionnel)\tHauteur du logo. Défaut : \"81\".\ntexte-copyright\tString (Optionnel)\tTexte du copyright. Défaut \"© Gouvernement du Québec, \".\nannee-copyright\tInteger (Optionnel)\tAnnée du copyright. Défaut \"2022\".\nurl-copyright\tString (Optionnel)\tUrl à ouvrir dans un nouvel onglet lorsque l'utilisateur clique sur le copyright. Défaut : \"https://www.quebec.ca/droit-auteur\" / \"https://www.quebec.ca/en/copyright\".\ntexte-sr-ouverture-nouvel-onglet\tString (Optionnel)\tTexte lu au lecteur écran indiquant qu'un lien est ouvert dans un nouvel onglet. Défaut \". Ce lien sera ouvert dans un nouvel onglet.\" / \". This link will open in a new tab.\".\nSlots disponibles\nNom\tDescription\nliens\t\n\nContenu html (normalement \"ul\" avec des \"li\" contenant des hyperliens) dans le menu de liens. Aucun css à prévoir si la structure \"ul\", \"li\", \"a\" est respectée. (Voir exemple)\n\nExemple\n\nL'exemple contient le piv de pied de page du présent site de démonstration.",
		"mc": ""
	},
	{
		"c": "Entête et pied de page",
		"r": "Pied de page du site",
		"h": "https://lively-cliff-018a9540f-32.eastus2.azurestaticapps.net/composants/entetepiedpage/piedpagesite",
		"t": "Pied de page de site\nDescription\n\nPied de page de site contenant des liens qui sont complémentaires à la navigation, par exemple des liens vers des sections de contenu importantes, ainsi que les liens vers les médias sociaux.\n\nIl s'agit essentiellement d'un conteneur avec fond bleu positionné au bon endroit, avec les bons padding/marges. Les liens auront déjà le bon style, cependant puisqu'il n'y a pas de norme sur le contenu de cette zone, le reste vous appartient (ex. Affichage en ligne, ou en colonne, regroupements, etc.)\n\nRéférence système de design Quebec.ca\n\nVoir les spécifications sur le XD de design Quebec.ca\n. Ce lien sera ouvert dans un nouvel onglet.\n.\n\nAttributs disponibles\nAucun.\nSlots disponibles\nNom\tDescription\ncontenu\t\n\nContenu html à insérer dans la zone pied de page de site. Devrait contenir des éléments \"nav\" contenant des listes de liens. Ne pas oublier les headers (visibles ou non) permettant d'identifier les groupes de liens et d'y accéder rapidement au clavier.\n\nExemple\n\nL'exemple contient le pied de page de site intégré uniquement dans la page courante à titre d'exemple.",
		"mc": ""
	},
	{
        "c": "Navigation",
        "r": "Groupe de sections",
        "h": "#groupesection",
        "t": "Un formulaire est divise en groupes de sections chaque groupe de sections peut avoir son icone le menu de gauche affiche automatiquement les groupes de sections dans un format menu deroulant au chargement de la page, les groupes de sections sont fermes sauf le groupe de sections actif cliquer sur un groupe de sections ouvre ou ferme le groupe de sections il est possible d'ouvrir et de fermer plusieurs groupes de sections si un groupe de sections contient une erreur de validation (champ obligatoire, format... ), un indicateur rouge est affiche sur le groupe de sections voici le formulaire \"hello world! \" accesanonyme: true form: title: fr: bonjour le monde! En: hello world! Sectionsgroup: - sectiongroup: fr: bonjour en: hello v-if: 'true' === 'true' classes: icone user prefixid: prefixsection sections: - section: fr: titre de la section en: (eng) titre de la section id: sectionpresentation v-if: 'true' === 'true' components: - type: dynamic tag: div classes: page-texte text: fr: texte de salutation. En: (eng) texte de salutation. Fonctions avancees il est possible d'ajouter un prefixe aux composants d'un groupe de section a l'aide du  prefixid  il est possible de repeter les sections d'un groupe de sections et y faisant reference dans un nouveau groupe de sections identifiers le groupe de sections a repeter en ajoutant la cle apres la propriete sections (par exemple : sections: §ion1) copier les sections dans un nouveau groupe de sections en utilisant la cle (par exemple : sections: *section1) pour distinguer les composants d'un groupe de sections repete, utiliser le prefixid (par exemple : section1composant1)",    
        "mc": "découpage"
    },
    {
        "c": "Navigation",
        "r": "Section",
        "h": "#section",
        "t": "Un groupe de sections est divisé en sections le menu de gauche liste automatiquement les sections lorsqu'un groupe de sections est ouvert chaque section est automatiquement numérotée le numéro de la section courante est surligné après avoir été visitée si une section est complétée et ne contient pas d'erreur de validation, le numéro est remplacé par un crochet si une section contient une erreur de validation, le numéro est remplacé par un x rouge",    
        "mc": ""
    },
    {
        "c": "Avancé",
        "r": "Validations personnalisées",
        "h": "#validperso",
        "t": "Description Lorsque les validateurs de bases ne répondent pas au besoin, il est possible d'ajouter des validateurs personnalisés (\"custom\"). Il s'agit d'une fonctionnalité avancée qui nécessite des connaissances en javascript.      Détails        Une validation personnalisée est constituée principalement de 2 éléments, soit la validation et le message d'erreur qui lui est associé.        L'image et le tableau ci-après décrivent en détails les éléments qui constituent une validation personnalisée.",    
        "mc": "validation-rules, validation-message"
    },
    {
        "c": "Avancé",
        "r": "Divers",
        "h": "#divers",
        "t": "Cliquez sur l'infobulle pour voir son contenu  Exemple de champ texte avec une précision Exemple de précision Déplacer le focus dans le formulaire Utiliser la fonction effectuerNavigationParId(sectionID, champID) pour déplacer le focus vers un champ d'une section. Déplacer le focus sur le champ \"Exemple de champ texte petit\" de la page \"Taille de contrôle\"",    
        "mc": ""
    },
    {
        "c": "Avancé",
        "r": "Injection de scripts",
        "h": "#injectionscript",
        "t": "L'injection de script vuejs permet d'ajouter des fonctionnalites au formulaire. On peut injecter trois types de scripts, a savoir method, computed et watch. Method il s'agit ni plus ni moins que d'une fonction telle qu'on les connait. Elles peuvent avoir des parametres, performent des actions et/ou retournent un resultat. Circonstances d'utilisation a utiliser lorsque le traitement satisfait une des conditions suivantes: necessite un ou plusieurs parametres en entree; modifie une valeur du modele de donnees; execute un traitement asynchrone. Computed une computed est en fait une propriete. Elle n'a pas de parametre et son utilisation permet d'ameliorer la performance, car elle est executee au chargement de la page, elle conserve son resultat en cache, et n'est reeexecutee que lorsqu'un element reactif implique dans son traitement est modifie (ex. Une valeur du formulaire). Il est donc imperatif que le traitement qu'elle contient ne modifie jamais un element reactif, auquel cas une boucle infinie risque de tout faire exploser. A titre d'exemple, si on utilise une computed a l'interieur d'une boucle, la valeur en cache sera toujours retournee, donc aucune execution, contrairement a une method qui elle sera executee a chaque iteration de la boucle. Circonstances d'utilisation a utiliser lorsque le traitement satisfait toutes les conditions suivantes: ne necessite aucun parametre en entree; ne modifie pas une valeur du modele de donnees (tres important, car gros risque de boucle infinie); utilise au moins une propriete reactive (ex. Une valeur du modele), mais sans en modifier; n'execute aucun traitement asynchrone. Watch une watch est une methode qui est executee lorsque l'element reactif qu'elle \"surveille\" est modifie. Circonstances d'utilisation rarement utilise. Peut etre utile pour modifier la valeur d'un autre element du modele ou effectuer un traitement asynchrone suite au changement de valeur de l'element \"surveille\". A utiliser lorsque le traitement satisfait toutes les conditions suivantes: ne necessite aucun parametre en entree; doit modifier la valeur d'un element ou effectuer une tache precise suite au changement de la valeur surveillee; ne modifie pas la valeur surveillee (tres important, car gros risque de boucle infinie); watch 1- exemple method et computed dans cet exemple nous demandons a l'utilisateur une date, a laquelle nous ajoutons 30 jours. Nous calculons ensuite le nombre de jours entre cette date et la date du jour et l'affichons dans un message sous le champ date. Date a laquelle vous commence a utiliser frw * afin d'y parvenir, nous avons defini 2 method, soit \"ajouternbjoursdate\" et \"obtenirnbjoursentredeuxdates\". Remarquez que ces 2 method sont generiques et ne sont pas lies a des elements du modele de donnees. On pourrait les reutiliser, et c'est evidemment le but! On utilise aussi 2 computed, \"datedependancecompletefrw\" qui retourne la date de dependance complete a frw (date saisie + 30 jours) en utilisant la method \"ajouternbjoursdate\". L'autre computed, \"nbjoursdependancecompletefrw\" retourne le nombre de jours depuis ou avant la dependance complete a frw (nombre de jours entre la date du jour et la computed \"datedependancecompletefrw\"). Remarquez ici que les computed sont lies a des elements du modele, et ne peuvent donc pas etre reutilisees. Par contre nous avons un gain en performance.",    
        "mc": ""
    },
    {
        "c": "Personnalisation des formulaires",
        "r": "Domaines de valeurs",
        "h": "#domaine",
        "t": "Qu'est-ce qu'un domaine de valeurs? Un domaine de valeurs correspond a une liste de valeurs reutilisables dans un formulaire precis, par tous les formulaires d'un systeme autorise ou meme par tout le systeme frw tout dependant a quel niveau il est configure. Les domaines peuvent etre utilises dans les controles suivants: case a cocher bouton radio liste deroulante hierarchie dans les domaines de valeurs lorsque le meme domaine de valeurs est defini dans plusieurs configurations, le niveau le plus precis a toujours preseance sur les autres. L'image suivante represente la hierarchie des configurations ou le niveau 'pre-remplissage' est le plus important. Definir un domaine via la configuration un domaine peut etre defini dans le bloc config d'un formulaire ou de votre systeme autorise en ajoutant une propriete domaines et en lui assignant les valeurs desirees pour chaque domaine. Definir un domaine via le pre-remplissage les domaines de valeurs fournis en pre-remplisssage ont preseance sur les domaines specifies au niveau de la configuration. Afin de fournir des domaines de valeurs en pre-remplissage, il faut ajouter au json une propriete domaine au meme niveau que form (qui contient les donnees pre-remplies du formulaire).",    
        "mc": ""
    },
    {
        "c": "Personnalisation des formulaires",
        "r": "Page de révision/soumission",
        "h": "#revision",
        "t": "1- personnalisation du texte affiche avant les boutons \"valider\" et \"soumettre\" la personnalisation de ces textes peut etre effectuee dans le fichier de configuration d'un formulaire, plus precisement dans la section \"revision\". Il est important de ne rien modifier d'autre que les elements \"text\" des deux components de type \"dynamic\" de cette section. Dans l'image qui suit, les blocs en jaune sont des exemples de cette personnalisation. 2- validation automatique il est possible d'executer immediatement la validation des que la page revision est accedee. Le bouton \"valider\" et le texte de la page ne sont alors pas affiches et la validation s'effectue comme si l'utilisateur avait clique le bouton \"valider\". Utile lorsqu'aucune consigne particuliere ne doit etre affichee avant la validation. 3- personnalisation du texte du bouton \"soumettre\" la personnalisation de ce texte peut etre effectuee dans le fichier de configuration d'un formulaire, plus precisement dans la section \"soumission\". Voici un exemple dans un contexte de formulaire d'aiguillage :",    
        "mc": ""
    }
]